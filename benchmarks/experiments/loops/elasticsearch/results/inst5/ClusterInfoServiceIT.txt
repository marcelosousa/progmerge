Parsing files...
Merge Instance for method (Ident "ClusterInfoServiceIT",Ident "testClusterInfoServiceCollectsInformation",[])
@Test
 public void testClusterInfoServiceCollectsInformation () throws Exception
{
  internalCluster().startNodesAsync(2, Settings.builder().put(InternalClusterInfoService.INTERNAL_CLUSTER_INFO_UPDATE_INTERVAL, "200ms").build()).get();
  assertAcked(prepareCreate("test").setSettings(settingsBuilder().put(Store.INDEX_STORE_STATS_REFRESH_INTERVAL, 0).put(EnableAllocationDecider.INDEX_ROUTING_REBALANCE_ENABLE, EnableAllocationDecider.Rebalance.NONE).build()));
  ensureGreen("test");
  InternalTestCluster internalTestCluster = internalCluster();
  final InternalClusterInfoService infoService = (InternalClusterInfoService) internalTestCluster.getInstance(ClusterInfoService.class, internalTestCluster.getMasterName());
  ClusterInfo info = infoService.refresh();
  assertNotNull("info should not be null", info);
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  assertNotNull(leastUsages);
  assertNotNull(shardSizes);
  assertThat("some usages are populated", leastUsages.values().size(), Matchers.equalTo(2));
  assertThat("some shard sizes are populated", shardSizes.values().size(), greaterThan(0));
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  ClusterService clusterService = internalTestCluster.getInstance(ClusterService.class, internalTestCluster.getMasterName());
  ClusterState state = clusterService.state();
  RoutingNodes routingNodes = state.getRoutingNodes();
  for (ShardRouting shard : routingNodes.getRoutingTable().allShards()) {
                                                                          String dataPath = info.getDataPath(shard);
                                                                          assertNotNull(dataPath);
                                                                          String nodeId = shard.currentNodeId();
                                                                          DiscoveryNode discoveryNode = state.getNodes().get(nodeId);
                                                                          IndicesService indicesService = internalTestCluster.getInstance(IndicesService.class, discoveryNode.getName());
                                                                          IndexService indexService = indicesService.indexService(shard.index());
                                                                          <?HOLE?>
                                                                          assertEquals(indexShard.shardPath().getRootDataPath().toString(), dataPath);
                                                                        }
}
Edit Base:
Hole 1:
[]: final Map<String, DiskUsage> leastUsages = info.getNodeLeastAvailableDiskUsages();
Hole 2:
[]: final Map<String, DiskUsage> mostUsages = info.getNodeMostAvailableDiskUsages();
Hole 3:
[]: final Map<String, Long> shardSizes = info.shardSizes;
Hole 4:
[SLoop]: for (DiskUsage usage : leastUsages.values()) {
                                               logger.info("--> usage: {}", usage);
                                               assertThat("usage has be retrieved", usage.getFreeBytes(), greaterThan(0L));
                                             }
Hole 5:
[SLoop]: for (DiskUsage usage : mostUsages.values()) {
                                              logger.info("--> usage: {}", usage);
                                              assertThat("usage has be retrieved", usage.getFreeBytes(), greaterThan(0L));
                                            }
Hole 6:
[SLoop]: for (Long size : shardSizes.values()) {
                                        logger.info("--> shard size: {}", size);
                                        assertThat("shard size is greater than 0", size, greaterThanOrEqualTo(0L));
                                      }
Hole 7:
[SLoop]: IndexShard indexShard = indexService.shard(shard.id());

Edit A:
Hole 1:
[]: ImmutableOpenMap<String, DiskUsage> leastUsages = info.getNodeLeastAvailableDiskUsages();
Hole 2:
[]: ImmutableOpenMap<String, DiskUsage> mostUsages = info.getNodeMostAvailableDiskUsages();
Hole 3:
[]: ImmutableOpenMap<String, Long> shardSizes = info.shardSizes;
Hole 4:
[SLoop]: for (ObjectCursor<DiskUsage> usage : leastUsages.values()) {
                                                             logger.info("--> usage: {}", usage.value);
                                                             assertThat("usage has be retrieved", usage.value.getFreeBytes(), greaterThan(0L));
                                                           }
Hole 5:
[SLoop]: for (ObjectCursor<DiskUsage> usage : mostUsages.values()) {
                                                            logger.info("--> usage: {}", usage.value);
                                                            assertThat("usage has be retrieved", usage.value.getFreeBytes(), greaterThan(0L));
                                                          }
Hole 6:
[SLoop]: for (ObjectCursor<Long> size : shardSizes.values()) {
                                                      logger.info("--> shard size: {}", size.value);
                                                      assertThat("shard size is greater than 0", size.value, greaterThanOrEqualTo(0L));
                                                    }
Hole 7:
[SLoop]: IndexShard indexShard = indexService.shard(shard.id());

Edit B:
Hole 1:
[]: final Map<String, DiskUsage> leastUsages = info.getNodeLeastAvailableDiskUsages();
Hole 2:
[]: final Map<String, DiskUsage> mostUsages = info.getNodeMostAvailableDiskUsages();
Hole 3:
[]: final Map<String, Long> shardSizes = info.shardSizes;
Hole 4:
[]: for (DiskUsage usage : leastUsages.values()) {
                                               logger.info("--> usage: {}", usage);
                                               assertThat("usage has be retrieved", usage.getFreeBytes(), greaterThan(0L));
                                             }
Hole 5:
[]: for (DiskUsage usage : mostUsages.values()) {
                                              logger.info("--> usage: {}", usage);
                                              assertThat("usage has be retrieved", usage.getFreeBytes(), greaterThan(0L));
                                            }
Hole 6:
[]: for (Long size : shardSizes.values()) {
                                        logger.info("--> shard size: {}", size);
                                        assertThat("shard size is greater than 0", size, greaterThanOrEqualTo(0L));
                                      }
Hole 7:
[SLoop]: IndexShard indexShard = indexService.getShardOrNull(shard.id());

Edit M:
Hole 1:
[]: ImmutableOpenMap<String, DiskUsage> leastUsages = info.getNodeLeastAvailableDiskUsages();
Hole 2:
[]: ImmutableOpenMap<String, DiskUsage> mostUsages = info.getNodeMostAvailableDiskUsages();
Hole 3:
[]: ImmutableOpenMap<String, Long> shardSizes = info.shardSizes;
Hole 4:
[]: for (ObjectCursor<DiskUsage> usage : leastUsages.values()) {
                                                             logger.info("--> usage: {}", usage.value);
                                                             assertThat("usage has be retrieved", usage.value.getFreeBytes(), greaterThan(0L));
                                                           }
Hole 5:
[]: for (ObjectCursor<DiskUsage> usage : mostUsages.values()) {
                                                            logger.info("--> usage: {}", usage.value);
                                                            assertThat("usage has be retrieved", usage.value.getFreeBytes(), greaterThan(0L));
                                                          }
Hole 6:
[]: for (ObjectCursor<Long> size : shardSizes.values()) {
                                                      logger.info("--> shard size: {}", size.value);
                                                      assertThat("shard size is greater than 0", size.value, greaterThanOrEqualTo(0L));
                                                    }
Hole 7:
[SLoop]: IndexShard indexShard = indexService.getShardOrNull(shard.id());


