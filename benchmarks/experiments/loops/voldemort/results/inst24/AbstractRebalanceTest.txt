Parsing files...
Merge Instance for method (Ident "AbstractRebalanceTest",Ident "populateData",[RefType (ClassRefType (ClassType [(Ident "Cluster",[])])),RefType (ClassRefType (ClassType [(Ident "List",[ActualType (ClassRefType (ClassType [(Ident "Integer",[])]))])]))])
protected void populateData (Cluster cluster, List<Integer> nodeList)
{
  <?HOLE?>
  for (int nodeId : nodeList) {
                                Node node = cluster.getNodeById(nodeId);
                                storeMap.put(nodeId, getSocketStore(testStoreName, node.getHost(), node.getSocketPort()));
                              }
  RoutingStrategy routing = new ConsistentRoutingStrategy(cluster.getNodes(), 1);
  for (Entry<String, String> entry : testEntries.entrySet()) {
                                                               int masterNode = routing.routeRequest(ByteUtils.getBytes(entry.getKey(), "UTF-8")).get(0).getId();
                                                               if (nodeList.contains(masterNode))
                                                               {
                                                                 <?HOLE?>
                                                               }
                                                             }
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: Map<Integer, Store<ByteArray, byte[]>> storeMap = new HashMap<Integer, Store<ByteArray, byte[]>>();
Hole 2:
[SCond,SLoop]: try
{
  ByteArray keyBytes = new ByteArray(ByteUtils.getBytes(entry.getKey(), "UTF-8"));
  storeMap.get(masterNode).put(keyBytes, new Versioned<byte[]>(ByteUtils.getBytes(entry.getValue(), "UTF-8")));
}
catch (ObsoleteVersionException e)
{
  System.out.println("Why are we seeing this at all here ?? ");
  e.printStackTrace();
}
Hole 3:
[SLoop]: for (Store<ByteArray, byte[]> store : storeMap.values()) {
                                                           store.close();
                                                         }

Edit A:
Hole 1:
[]: Map<Integer, Store<ByteArray, byte[], byte[]>> storeMap = new HashMap<Integer, Store<ByteArray, byte[], byte[]>>();
Hole 2:
[SCond,SLoop]: try
{
  ByteArray keyBytes = new ByteArray(ByteUtils.getBytes(entry.getKey(), "UTF-8"));
  storeMap.get(masterNode).put(keyBytes, new Versioned<byte[]>(ByteUtils.getBytes(entry.getValue(), "UTF-8")), null);
}
catch (ObsoleteVersionException e)
{
  System.out.println("Why are we seeing this at all here ?? ");
  e.printStackTrace();
}
Hole 3:
[SLoop]: for (Store<ByteArray, byte[], byte[]> store : storeMap.values()) {
                                                                   store.close();
                                                                 }

Edit B:
Hole 1:
[]: Map<Integer, Store<ByteArray, byte[]>> storeMap = new HashMap<Integer, Store<ByteArray, byte[]>>();
Hole 2:
[SCond,SLoop]: try
{
  ByteArray keyBytes = new ByteArray(ByteUtils.getBytes(entry.getKey(), "UTF-8"));
  storeMap.get(masterNode).put(keyBytes, new Versioned<byte[]>(ByteUtils.getBytes(entry.getValue(), "UTF-8")));
}
catch (ObsoleteVersionException e)
{
  System.out.println("Why are we seeing this at all here ?? ");
  e.printStackTrace();
}
Hole 3:
[]: for (Store<ByteArray, byte[]> store : storeMap.values()) {
                                                           store.close();
                                                         }

Edit M:
Hole 1:
[]: Map<Integer, Store<ByteArray, byte[], byte[]>> storeMap = new HashMap<Integer, Store<ByteArray, byte[], byte[]>>();
Hole 2:
[SCond,SLoop]: try
{
  ByteArray keyBytes = new ByteArray(ByteUtils.getBytes(entry.getKey(), "UTF-8"));
  storeMap.get(masterNode).put(keyBytes, new Versioned<byte[]>(ByteUtils.getBytes(entry.getValue(), "UTF-8")), null);
}
catch (ObsoleteVersionException e)
{
  System.out.println("Why are we seeing this at all here ?? ");
  e.printStackTrace();
}
Hole 3:
[]: for (Store<ByteArray, byte[], byte[]> store : storeMap.values()) {
                                                                   store.close();
                                                                 }


