Parsing files...
Merge Instance for method (Ident "StorageService",Ident "registerNodeStores",[RefType (ClassRefType (ClassType [(Ident "StoreDefinition",[])])),RefType (ClassRefType (ClassType [(Ident "Cluster",[])])),PrimType IntT])
public void registerNodeStores (StoreDefinition def, Cluster cluster, int localNode)
{
  Map<Integer, Store<ByteArray, byte[]>> nodeStores = new HashMap<Integer, Store<ByteArray, byte[]>>(cluster.getNumberOfNodes());
  for (Node node : cluster.getNodes()) {
                                         <?HOLE?>
                                         <?HOLE?>
                                         this.storeRepository.addNodeStore(node.getId(), store);
                                         nodeStores.put(node.getId(), store);
                                       }
  <?HOLE?>
  <?HOLE?>
  routedStore = new InconsistencyResolvingStore<ByteArray, byte[]>(routedStore, new VectorClockInconsistencyResolver<byte[]>());
  this.storeRepository.addRoutedStore(routedStore);
}
Edit Base:
Hole 1:
[SLoop]: Store<ByteArray, byte[]> store;
Hole 2:
[SLoop]: if (node.getId() == localNode)
{
  store = this.storeRepository.getLocalStore(def.getName());
}
else
{
  store = new SocketStore(def.getName(), new SocketDestination(node.getHost(), node.getSocketPort(), voldemortConfig.getRequestFormatType()), socketPool, false);
}
Hole 3:
[]: Store<ByteArray, byte[]> routedStore = new RoutedStore(def.getName(), nodeStores, cluster, def, true, this.clientThreadPool, voldemortConfig.getRoutingTimeoutMs(), voldemortConfig.getClientNodeBannageMs(), SystemTime.INSTANCE);
Hole 4:
[]: <SKIP>

Edit A:
Hole 1:
[SLoop]: Store<ByteArray, byte[]> store = getNodeStore(def.getName(), node, localNode);
Hole 2:
[SLoop]: <SKIP>
Hole 3:
[]: Store<ByteArray, byte[]> routedStore = new RoutedStore(def.getName(), nodeStores, metadata.getCluster(), def, true, this.clientThreadPool, voldemortConfig.getRoutingTimeoutMs(), voldemortConfig.getClientNodeBannageMs(), SystemTime.INSTANCE);
Hole 4:
[]: routedStore = new RebootstrappingStore(metadata, storeRepository, voldemortConfig, socketPool, (RoutedStore) routedStore);

Edit B:
Hole 1:
[SLoop]: Store<ByteArray, byte[]> store;
Hole 2:
[SLoop]: if (node.getId() == localNode)
{
  store = this.storeRepository.getLocalStore(def.getName());
}
else
{
  store = new SocketStore(def.getName(), new SocketDestination(node.getHost(), node.getSocketPort(), voldemortConfig.getRequestFormatType()), socketPool, false);
}
Hole 3:
[]: Store<ByteArray, byte[]> routedStore = new RoutedStore(def.getName(), nodeStores, cluster, def, true, this.clientThreadPool, voldemortConfig.getRoutingTimeoutMs(), failureDetector, SystemTime.INSTANCE);
Hole 4:
[]: <SKIP>

Edit M:
Hole 1:
[SLoop]: Store<ByteArray, byte[]> store = getNodeStore(def.getName(), node, localNode);
Hole 2:
[SLoop]: <SKIP>
Hole 3:
[]: Store<ByteArray, byte[]> routedStore = new RoutedStore(def.getName(), nodeStores, metadata.getCluster(), def, true, this.clientThreadPool, voldemortConfig.getRoutingTimeoutMs(), failureDetector, SystemTime.INSTANCE);
Hole 4:
[]: routedStore = new RebootstrappingStore(metadata, storeRepository, voldemortConfig, socketPool, (RoutedStore) routedStore);


