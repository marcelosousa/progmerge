Parsing files...
Merge Instance for method (Ident "ExploreSessionsActivity",Ident "setHeader",[])
private void setHeader ()
{
  if ((mMode == MODE_EXPLORE && mTagMetadata) != null)
  {
    String title = null;
    String headerImage = null;
    @ColorInt
    int trackColor = Color.TRANSPARENT;
    int selectedTracks = mTagFilterHolder.getCountByCategory(Config.Tags.CATEGORY_TRACK);
    int selectedThemes = mTagFilterHolder.getCountByCategory(Config.Tags.CATEGORY_THEME);
    if (selectedThemes + selectedTracks == 1)
    {
      for (String tagId : mTagFilterHolder.getSelectedFilters()) {
                                                                   <?HOLE?>
                                                                 }
    }
    if (title == null)
    {
      title = getString(R.string.title_explore);
    }
    mTitle.setText(title);
    if (headerImage != null)
    {
      mHeaderImage.setScaleType(ImageView.ScaleType.CENTER_CROP);
      <?HOLE?>
    }
    else
    {
      mHeaderImage.setScaleType(ImageView.ScaleType.FIT_CENTER);
      mHeaderImage.setImageResource(R.drawable.ic_hash_io_16_monochrome);
      <?HOLE?>
    }
    final int statusBarColor = trackColor != Color.TRANSPARENT ? UIUtils.adjustColorForStatusBar(trackColor) : UIUtils.getThemeColor(this, R.attr.colorPrimaryDark, R.color.theme_primary_dark);
    mCollapsingToolbar.setContentScrimColor(trackColor);
    mDrawerLayout.setStatusBarBackgroundColor(statusBarColor);
  }
}
Edit Base:
Hole 1:
[SCond,SLoop,SCond,SCond]: if (tagId.contains(Config.Tags.CATEGORY_TRACK) || tagId.contains(Config.Tags.CATEGORY_THEME))
{
  TagMetadata.Tag selectedTag = mTagMetadata.getTag(tagId);
  title = selectedTag.getName();
  headerImage = selectedTag.getPhotoUrl();
  trackColor = selectedTag.getColor();
  break;
}
Hole 2:
[SCond,SCond]: mImageLoader.loadImage(headerImage, mHeaderImage);
Hole 3:
[SCond,SCond]: <SKIP>

Edit A:
Hole 1:
[SCond,SLoop,SCond,SCond]: if (TagUtils.isTrackTag(tagId) || TagUtils.isThemeTag(tagId))
{
  TagMetadata.Tag selectedTag = mTagMetadata.getTag(tagId);
  title = selectedTag.getName();
  headerImage = selectedTag.getPhotoUrl();
  trackColor = selectedTag.getColor();
  break;
}
Hole 2:
[SCond,SCond]: mImageLoader.loadImage(headerImage, mHeaderImage);
Hole 3:
[SCond,SCond]: <SKIP>

Edit B:
Hole 1:
[SLoop,SCond,SCond]: if (tagId.contains(Config.Tags.CATEGORY_TRACK) || tagId.contains(Config.Tags.CATEGORY_THEME))
{
  TagMetadata.Tag selectedTag = mTagMetadata.getTag(tagId);
  title = selectedTag.getName();
  headerImage = selectedTag.getPhotoUrl();
  trackColor = selectedTag.getColor();
  break;
}
Hole 2:
[SCond,SCond]: mImageLoader.loadImage(headerImage, mHeaderImage, new RequestListener<String, Bitmap>()
                                                  {
                                                    @Override
                                                    public boolean onException (final Exception e, final String model, final Target<Bitmap> target, final boolean isFirstResource)
                                                    {
                                                      supportStartPostponedEnterTransition();
                                                      return false;
                                                    }
                                                    @Override
                                                    public boolean onResourceReady (final Bitmap resource, final String model, final Target<Bitmap> target, final boolean isFromMemoryCache, final boolean isFirstResource)
                                                    {
                                                      target.onResourceReady(resource, null);
                                                      supportStartPostponedEnterTransition();
                                                      return true;
                                                    }
                                                  });
Hole 3:
[SCond,SCond]: supportStartPostponedEnterTransition();

Edit M:
Hole 1:
[SLoop,SCond,SCond]: if (TagUtils.isTrackTag(tagId) || TagUtils.isThemeTag(tagId))
{
  TagMetadata.Tag selectedTag = mTagMetadata.getTag(tagId);
  title = selectedTag.getName();
  headerImage = selectedTag.getPhotoUrl();
  trackColor = selectedTag.getColor();
  break;
}
Hole 2:
[SCond,SCond]: mImageLoader.loadImage(headerImage, mHeaderImage, new RequestListener<String, Bitmap>()
                                                  {
                                                    @Override
                                                    public boolean onException (final Exception e, final String model, final Target<Bitmap> target, final boolean isFirstResource)
                                                    {
                                                      supportStartPostponedEnterTransition();
                                                      return false;
                                                    }
                                                    @Override
                                                    public boolean onResourceReady (final Bitmap resource, final String model, final Target<Bitmap> target, final boolean isFromMemoryCache, final boolean isFirstResource)
                                                    {
                                                      target.onResourceReady(resource, null);
                                                      supportStartPostponedEnterTransition();
                                                      return true;
                                                    }
                                                  });
Hole 3:
[SCond,SCond]: supportStartPostponedEnterTransition();


