Parsing files...
Merge Instance for method (Ident "PieChartRenderer",Ident "drawData",[RefType (ClassRefType (ClassType [(Ident "Canvas",[])]))])
@Override
 public void drawData (Canvas c)
{
  int width = (int) mViewPortHandler.getChartWidth();
  int height = (int) mViewPortHandler.getChartHeight();
  if (mDrawBitmap == null || mDrawBitmap.getWidth() != width || mDrawBitmap.getHeight() != height)
  {
    if ((width > 0 && height) > 0)
    {
      mDrawBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_4444);
      mBitmapCanvas = new Canvas(mDrawBitmap);
    }
    else
      return;
  }
  mDrawBitmap.eraseColor(Color.TRANSPARENT);
  PieData pieData = mChart.getData();
  <?HOLE?>
}
Edit Base:
Hole 1:
[SLoop]: for (PieDataSet set : pieData.getDataSets()) {
                                               if ((set.isVisible() && set.getEntryCount()) > 0)
                                                 drawDataSet(c, set);
                                             }

Edit A:
Hole 1:
[SLoop]: for (IPieDataSet set : pieData.getDataSets()) {
                                                if ((set.isVisible() && set.getEntryCount()) > 0)
                                                  drawDataSet(c, set);
                                              }

Edit B:
Hole 1:
[]: for (PieDataSet set : pieData.getDataSets()) {
                                               if ((set.isVisible() && set.getEntryCount()) > 0)
                                                 drawDataSet(c, set);
                                             }

Edit M:
Hole 1:
[]: for (IPieDataSet set : pieData.getDataSets()) {
                                                if ((set.isVisible() && set.getEntryCount()) > 0)
                                                  drawDataSet(c, set);
                                              }

Merge Instance for method (Ident "PieChartRenderer",Ident "drawHighlighted",[RefType (ClassRefType (ClassType [(Ident "Canvas",[])])),RefType (ArrayType (RefType (ClassRefType (ClassType [(Ident "Highlight",[])]))))])
@Override
 public void drawHighlighted (Canvas c, Highlight[] indices)
{
  float rotationAngle = mChart.getRotationAngle();
  float angle = 0.0F;
  float[] drawAngles = mChart.getDrawAngles();
  float[] absoluteAngles = mChart.getAbsoluteAngles();
  for (int i = 0 ; i < indices.length ; i++)
  {
    int xIndex = indices[i].getXIndex();
    if (xIndex >= drawAngles.length)
      continue;
    <?HOLE?>
    if (set == null || !set.isHighlightEnabled())
      continue;
    if (xIndex == 0)
      angle = rotationAngle;
    else
      angle = rotationAngle + absoluteAngles[(xIndex - 1)];
    <?HOLE?>
    float sliceDegrees = drawAngles[xIndex];
    float shift = set.getSelectionShift();
    RectF circleBox = mChart.getCircleBox();
    RectF highlighted = new RectF(circleBox.left - shift, circleBox.top - shift, circleBox.right + shift, circleBox.bottom + shift);
    mRenderPaint.setColor(set.getColor(xIndex));
    mBitmapCanvas.drawArc(highlighted, ((angle + set.getSliceSpace()) / 2.0F), ((sliceDegrees * mAnimator.getPhaseY() - set.getSliceSpace()) / 2.0F), true, mRenderPaint);
  }
}
Edit Base:
Hole 1:
[SLoop]: PieDataSet set = mChart.getData().getDataSetByIndex(indices[i].getDataSetIndex());
Hole 2:
[SLoop]: angle *= mAnimator.getPhaseY();

Edit A:
Hole 1:
[SLoop]: IPieDataSet set = mChart.getData().getDataSetByIndex(indices[i].getDataSetIndex());
Hole 2:
[SLoop]: angle *= mAnimator.getPhaseY();

Edit B:
Hole 1:
[SLoop]: PieDataSet set = mChart.getData().getDataSetByIndex(indices[i].getDataSetIndex());
Hole 2:
[SLoop]: angle *= mAnimator.getPhaseX();

Edit M:
Hole 1:
[SLoop]: IPieDataSet set = mChart.getData().getDataSetByIndex(indices[i].getDataSetIndex());
Hole 2:
[SLoop]: angle *= mAnimator.getPhaseX();

Merge Instance for method (Ident "PieChartRenderer",Ident "drawRoundedSlices",[RefType (ClassRefType (ClassType [(Ident "Canvas",[])]))])
protected void drawRoundedSlices (Canvas c)
{
  if (!mChart.isDrawRoundedSlicesEnabled())
    return;
  <?HOLE?>
  if (!dataSet.isVisible())
    return;
  PointF center = mChart.getCenterCircleBox();
  float r = mChart.getRadius();
  float circleRadius = (r - r * mChart.getHoleRadius() / 100.0F) / 2.0F;
  <?HOLE?>
  float[] drawAngles = mChart.getDrawAngles();
  float angle = mChart.getRotationAngle();
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: PieDataSet dataSet = mChart.getData().getDataSet();
Hole 2:
[]: List<Entry> entries = dataSet.getYVals();
Hole 3:
[SLoop]: for (int j = 0 ; j < entries.size() ; j++)
{
  float newangle = drawAngles[j];
  Entry e = entries.get(j);
  if (Math.abs(e.getVal()) > 1.0e-6)
  {
    float x = (float) ((r - circleRadius) * Math.cos(Math.toRadians(((angle + newangle) * mAnimator.getPhaseY()))) + center.x);
    float y = (float) ((r - circleRadius) * Math.sin(Math.toRadians(((angle + newangle) * mAnimator.getPhaseY()))) + center.y);
    mRenderPaint.setColor(dataSet.getColor(j));
    mBitmapCanvas.drawCircle(x, y, circleRadius, mRenderPaint);
  }
  angle += newangle * mAnimator.getPhaseX();
}

Edit A:
Hole 1:
[]: IPieDataSet dataSet = mChart.getData().getDataSet();
Hole 2:
[]: <SKIP>
Hole 3:
[SLoop]: for (int j = 0 ; j < dataSet.getEntryCount() ; j++)
{
  float newangle = drawAngles[j];
  Entry e = dataSet.getEntryForIndex(j);
  if (Math.abs(e.getVal()) > 1.0e-6)
  {
    float x = (float) ((r - circleRadius) * Math.cos(Math.toRadians(((angle + newangle) * mAnimator.getPhaseY()))) + center.x);
    float y = (float) ((r - circleRadius) * Math.sin(Math.toRadians(((angle + newangle) * mAnimator.getPhaseY()))) + center.y);
    mRenderPaint.setColor(dataSet.getColor(j));
    mBitmapCanvas.drawCircle(x, y, circleRadius, mRenderPaint);
  }
  angle += newangle * mAnimator.getPhaseX();
}

Edit B:
Hole 1:
[]: PieDataSet dataSet = mChart.getData().getDataSet();
Hole 2:
[]: List<Entry> entries = dataSet.getYVals();
Hole 3:
[]: for (int j = 0 ; j < entries.size() ; j++)
{
  float newangle = drawAngles[j];
  Entry e = entries.get(j);
  if (Math.abs(e.getVal()) > 1.0e-6)
  {
    float x = (float) ((r - circleRadius) * Math.cos(Math.toRadians(((angle + newangle) * mAnimator.getPhaseY()))) + center.x);
    float y = (float) ((r - circleRadius) * Math.sin(Math.toRadians(((angle + newangle) * mAnimator.getPhaseY()))) + center.y);
    mRenderPaint.setColor(dataSet.getColor(j));
    mBitmapCanvas.drawCircle(x, y, circleRadius, mRenderPaint);
  }
  angle += newangle * mAnimator.getPhaseX();
}

Edit M:
Hole 1:
[]: IPieDataSet dataSet = mChart.getData().getDataSet();
Hole 2:
[]: <SKIP>
Hole 3:
[]: for (int j = 0 ; j < dataSet.getEntryCount() ; j++)
{
  float newangle = drawAngles[j];
  Entry e = dataSet.getEntryForIndex(j);
  if (Math.abs(e.getVal()) > 1.0e-6)
  {
    float x = (float) ((r - circleRadius) * Math.cos(Math.toRadians(((angle + newangle) * mAnimator.getPhaseY()))) + center.x);
    float y = (float) ((r - circleRadius) * Math.sin(Math.toRadians(((angle + newangle) * mAnimator.getPhaseY()))) + center.y);
    mRenderPaint.setColor(dataSet.getColor(j));
    mBitmapCanvas.drawCircle(x, y, circleRadius, mRenderPaint);
  }
  angle += newangle * mAnimator.getPhaseX();
}

Merge Instance for method (Ident "PieChartRenderer",Ident "drawValues",[RefType (ClassRefType (ClassType [(Ident "Canvas",[])]))])
@Override
 public void drawValues (Canvas c)
{
  PointF center = mChart.getCenterCircleBox();
  float r = mChart.getRadius();
  float rotationAngle = mChart.getRotationAngle();
  float[] drawAngles = mChart.getDrawAngles();
  float[] absoluteAngles = mChart.getAbsoluteAngles();
  float off = r / 10.0F * 3.6F;
  if (mChart.isDrawHoleEnabled())
  {
    off = (r - r / 100.0F * mChart.getHoleRadius()) / 2.0F;
  }
  r -= off;
  PieData data = mChart.getData();
  <?HOLE?>
  boolean drawXVals = mChart.isDrawSliceTextEnabled();
  int cnt = 0;
  for (int i = 0 ; i < dataSets.size() ; i++)
  {
    <?HOLE?>
    if (!dataSet.isDrawValuesEnabled() && !drawXVals)
      continue;
    applyValueTextStyle(dataSet);
    float lineHeight = Utils.calcTextHeight(mValuePaint, "Q") + Utils.convertDpToPixel(4.0F);
    <?HOLE?>
    <?HOLE?>
  }
}
Edit Base:
Hole 1:
[]: List<PieDataSet> dataSets = data.getDataSets();
Hole 2:
[SLoop]: PieDataSet dataSet = dataSets.get(i);
Hole 3:
[SLoop]: List<Entry> entries = dataSet.getYVals();
Hole 4:
[SLoop,SLoop]: for (int j = 0, maxEntry = Math.min(((int) Math.ceil((entries.size() * mAnimator.getPhaseX()))), entries.size()) ; j < maxEntry ; j++)
{
  Entry entry = entries.get(j);
  float offset = drawAngles[cnt] / 2;
  float x = (float) (r * Math.cos(Math.toRadians(((rotationAngle + absoluteAngles[cnt] - offset) * mAnimator.getPhaseY()))) + center.x);
  float y = (float) (r * Math.sin(Math.toRadians(((rotationAngle + absoluteAngles[cnt] - offset) * mAnimator.getPhaseY()))) + center.y);
  float value = mChart.isUsePercentValuesEnabled() ? entry.getVal() / data.getYValueSum() * 100.0F : entry.getVal();
  ValueFormatter formatter = dataSet.getValueFormatter();
  boolean drawYVals = dataSet.isDrawValuesEnabled();
  if (drawXVals && drawYVals)
  {
    drawValue(c, formatter, value, entry, 0, x, y);
    if (j < data.getXValCount())
      c.drawText(data.getXVals().get(j), x, (y + lineHeight), mValuePaint);
  }
  else
    if (drawXVals && !drawYVals)
    {
      if (j < data.getXValCount())
        c.drawText(data.getXVals().get(j), x, ((y + lineHeight) / 2.0F), mValuePaint);
    }
    else
      if (!drawXVals && drawYVals)
      {
        drawValue(c, formatter, value, entry, 0, x, ((y + lineHeight) / 2.0F));
      }
  cnt++;
}

Edit A:
Hole 1:
[]: List<IPieDataSet> dataSets = data.getDataSets();
Hole 2:
[SLoop]: IPieDataSet dataSet = dataSets.get(i);
Hole 3:
[SLoop]: int entryCount = dataSet.getEntryCount();
Hole 4:
[SLoop,SLoop]: for (int j = 0, maxEntry = Math.min(((int) Math.ceil((entryCount * mAnimator.getPhaseX()))), entryCount) ; j < maxEntry ; j++)
{
  Entry entry = dataSet.getEntryForIndex(j);
  float offset = drawAngles[cnt] / 2;
  float x = (float) (r * Math.cos(Math.toRadians(((rotationAngle + absoluteAngles[cnt] - offset) * mAnimator.getPhaseY()))) + center.x);
  float y = (float) (r * Math.sin(Math.toRadians(((rotationAngle + absoluteAngles[cnt] - offset) * mAnimator.getPhaseY()))) + center.y);
  float value = mChart.isUsePercentValuesEnabled() ? entry.getVal() / data.getYValueSum() * 100.0F : entry.getVal();
  ValueFormatter formatter = dataSet.getValueFormatter();
  boolean drawYVals = dataSet.isDrawValuesEnabled();
  if (drawXVals && drawYVals)
  {
    drawValue(c, formatter, value, entry, 0, x, y);
    if (j < data.getXValCount())
      c.drawText(data.getXVals().get(j), x, (y + lineHeight), mValuePaint);
  }
  else
    if (drawXVals && !drawYVals)
    {
      if (j < data.getXValCount())
        c.drawText(data.getXVals().get(j), x, ((y + lineHeight) / 2.0F), mValuePaint);
    }
    else
      if (!drawXVals && drawYVals)
      {
        drawValue(c, formatter, value, entry, 0, x, ((y + lineHeight) / 2.0F));
      }
  cnt++;
}

Edit B:
Hole 1:
[]: List<PieDataSet> dataSets = data.getDataSets();
Hole 2:
[SLoop]: PieDataSet dataSet = dataSets.get(i);
Hole 3:
[SLoop]: List<Entry> entries = dataSet.getYVals();
Hole 4:
[SLoop]: for (int j = 0, maxEntry = Math.min(((int) Math.ceil((entries.size() * mAnimator.getPhaseX()))), entries.size()) ; j < maxEntry ; j++)
{
  Entry entry = entries.get(j);
  float offset = drawAngles[cnt] / 2;
  float x = (float) (r * Math.cos(Math.toRadians(((rotationAngle + absoluteAngles[cnt] - offset) * mAnimator.getPhaseY()))) + center.x);
  float y = (float) (r * Math.sin(Math.toRadians(((rotationAngle + absoluteAngles[cnt] - offset) * mAnimator.getPhaseY()))) + center.y);
  float value = mChart.isUsePercentValuesEnabled() ? entry.getVal() / data.getYValueSum() * 100.0F : entry.getVal();
  ValueFormatter formatter = dataSet.getValueFormatter();
  boolean drawYVals = dataSet.isDrawValuesEnabled();
  if (drawXVals && drawYVals)
  {
    drawValue(c, formatter, value, entry, 0, x, y);
    if (j < data.getXValCount())
      c.drawText(data.getXVals().get(j), x, (y + lineHeight), mValuePaint);
  }
  else
    if (drawXVals && !drawYVals)
    {
      if (j < data.getXValCount())
        c.drawText(data.getXVals().get(j), x, ((y + lineHeight) / 2.0F), mValuePaint);
    }
    else
      if (!drawXVals && drawYVals)
      {
        drawValue(c, formatter, value, entry, 0, x, ((y + lineHeight) / 2.0F));
      }
  cnt++;
}

Edit M:
Hole 1:
[]: List<IPieDataSet> dataSets = data.getDataSets();
Hole 2:
[SLoop]: IPieDataSet dataSet = dataSets.get(i);
Hole 3:
[SLoop]: int entryCount = dataSet.getEntryCount();
Hole 4:
[SLoop]: for (int j = 0, maxEntry = Math.min(((int) Math.ceil((entryCount * mAnimator.getPhaseX()))), entryCount) ; j < maxEntry ; j++)
{
  Entry entry = dataSet.getEntryForIndex(j);
  float offset = drawAngles[cnt] / 2;
  float x = (float) (r * Math.cos(Math.toRadians(((rotationAngle + absoluteAngles[cnt] - offset) * mAnimator.getPhaseY()))) + center.x);
  float y = (float) (r * Math.sin(Math.toRadians(((rotationAngle + absoluteAngles[cnt] - offset) * mAnimator.getPhaseY()))) + center.y);
  float value = mChart.isUsePercentValuesEnabled() ? entry.getVal() / data.getYValueSum() * 100.0F : entry.getVal();
  ValueFormatter formatter = dataSet.getValueFormatter();
  boolean drawYVals = dataSet.isDrawValuesEnabled();
  if (drawXVals && drawYVals)
  {
    drawValue(c, formatter, value, entry, 0, x, y);
    if (j < data.getXValCount())
      c.drawText(data.getXVals().get(j), x, (y + lineHeight), mValuePaint);
  }
  else
    if (drawXVals && !drawYVals)
    {
      if (j < data.getXValCount())
        c.drawText(data.getXVals().get(j), x, ((y + lineHeight) / 2.0F), mValuePaint);
    }
    else
      if (!drawXVals && drawYVals)
      {
        drawValue(c, formatter, value, entry, 0, x, ((y + lineHeight) / 2.0F));
      }
  cnt++;
}


