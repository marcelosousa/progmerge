Parsing files...
Merge Instance for method (Ident "LineChartRenderer",Ident "drawCircles",[RefType (ClassRefType (ClassType [(Ident "Canvas",[])]))])
protected void drawCircles (Canvas c)
{
  mRenderPaint.setStyle(Paint.Style.FILL);
  float phaseX = mAnimator.getPhaseX();
  float phaseY = mAnimator.getPhaseY();
  <?HOLE?>
  for (int i = 0 ; i < dataSets.size() ; i++)
  {
    <?HOLE?>
    <?HOLE?>
    mCirclePaintInner.setColor(dataSet.getCircleHoleColor());
    Transformer trans = mChart.getTransformer(dataSet.getAxisDependency());
    List<Entry> entries = dataSet.getYVals();
    Entry entryFrom = dataSet.getEntryForXIndex((mMinX < 0 ? 0 : mMinX));
    Entry entryTo = dataSet.getEntryForXIndex(mMaxX);
    int diff = entryFrom == entryTo ? 1 : 0;
    int minx = Math.max((dataSet.getEntryPosition(entryFrom) - diff), 0);
    int maxx = Math.min(Math.max((minx + 2), (dataSet.getEntryPosition(entryTo) + 1)), entries.size());
    CircleBuffer buffer = mCircleBuffers[i];
    buffer.setPhases(phaseX, phaseY);
    buffer.limitFrom(minx);
    buffer.limitTo(maxx);
    buffer.feed(entries);
    trans.pointValuesToPixel(buffer.buffer);
    float halfsize = dataSet.getCircleSize() / 2.0F;
    for (int j = 0, count = (int) Math.ceil(((maxx - minx) * phaseX + minx)) * 2 ; j < count ; j += 2)
    {
      float x = buffer.buffer[j];
      float y = buffer.buffer[(j + 1)];
      if (!mViewPortHandler.isInBoundsRight(x))
        break;
      if (!mViewPortHandler.isInBoundsLeft(x) || !mViewPortHandler.isInBoundsY(y))
        continue;
      int circleColor = dataSet.getCircleColor((j / 2 + minx));
      mRenderPaint.setColor(circleColor);
      c.drawCircle(x, y, dataSet.getCircleSize(), mRenderPaint);
      if ((dataSet.isDrawCircleHoleEnabled() && circleColor) != mCirclePaintInner.getColor())
        c.drawCircle(x, y, halfsize, mCirclePaintInner);
    }
  }
}
Edit Base:
Hole 1:
[]: List<LineDataSet> dataSets = mChart.getLineData().getDataSets();
Hole 2:
[SLoop]: LineDataSet dataSet = dataSets.get(i);
Hole 3:
[SCond,SLoop]: if (!dataSet.isVisible() || !dataSet.isDrawCirclesEnabled())
  continue;

Edit A:
Hole 1:
[]: List<ILineDataSet> dataSets = mChart.getLineData().getDataSets();
Hole 2:
[SLoop]: ILineDataSet dataSet = dataSets.get(i);
Hole 3:
[SCond,SLoop]: if (!dataSet.isVisible() || !dataSet.isDrawCirclesEnabled())
  continue;

Edit B:
Hole 1:
[]: List<LineDataSet> dataSets = mChart.getLineData().getDataSets();
Hole 2:
[SLoop]: LineDataSet dataSet = dataSets.get(i);
Hole 3:
[SCond,SLoop]: if ((!dataSet.isVisible() || !dataSet.isDrawCirclesEnabled() || dataSet.getEntryCount()) == 0)
  continue;

Edit M:
Hole 1:
[]: List<ILineDataSet> dataSets = mChart.getLineData().getDataSets();
Hole 2:
[SLoop]: ILineDataSet dataSet = dataSets.get(i);
Hole 3:
[SLoop]: if ((!dataSet.isVisible() || !dataSet.isDrawCirclesEnabled() || dataSet.getEntryCount()) == 0)
  continue;

Merge Instance for method (Ident "LineChartRenderer",Ident "drawData",[RefType (ClassRefType (ClassType [(Ident "Canvas",[])]))])
@Override
 public void drawData (Canvas c)
{
  int width = (int) mViewPortHandler.getChartWidth();
  int height = (int) mViewPortHandler.getChartHeight();
  if (mDrawBitmap == null || mDrawBitmap.getWidth() != width || mDrawBitmap.getHeight() != height)
  {
    if ((width > 0 && height) > 0)
    {
      mDrawBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_4444);
      mBitmapCanvas = new Canvas(mDrawBitmap);
    }
    else
      return;
  }
  mDrawBitmap.eraseColor(Color.TRANSPARENT);
  LineData lineData = mChart.getLineData();
  <?HOLE?>
  c.drawBitmap(mDrawBitmap, 0, 0, mRenderPaint);
}
Edit Base:
Hole 1:
[SLoop]: for (LineDataSet set : lineData.getDataSets()) {
                                                 if ((set.isVisible() && set.getEntryCount()) > 0)
                                                   drawDataSet(c, set);
                                               }

Edit A:
Hole 1:
[SLoop]: for (ILineDataSet set : lineData.getDataSets()) {
                                                  if ((set.isVisible() && set.getEntryCount()) > 0)
                                                    drawDataSet(c, set);
                                                }

Edit B:
Hole 1:
[]: for (LineDataSet set : lineData.getDataSets()) {
                                                 if ((set.isVisible() && set.getEntryCount()) > 0)
                                                   drawDataSet(c, set);
                                               }

Edit M:
Hole 1:
[]: for (ILineDataSet set : lineData.getDataSets()) {
                                                  if ((set.isVisible() && set.getEntryCount()) > 0)
                                                    drawDataSet(c, set);
                                                }


