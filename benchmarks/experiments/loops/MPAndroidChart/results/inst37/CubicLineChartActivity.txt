Parsing files...
Merge Instance for method (Ident "CubicLineChartActivity",Ident "setData",[PrimType IntT,PrimType FloatT])
private void setData (int count, float range)
{
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  for (int i = 0 ; i < count ; i++)
  {
    float mult = range + 1;
    float val = (float) (Math.random() * mult) + 20;
    <?HOLE?>
  }
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: ArrayList<String> xVals = new ArrayList<String>();
Hole 2:
[]: for (int i = 0 ; i < count ; i++)
{
  xVals.add((1990 + i + ""));
}
Hole 3:
[]: ArrayList<Entry> vals1 = new ArrayList<Entry>();
Hole 4:
[SLoop]: vals1.add(new Entry(val, i));
Hole 5:
[]: LineDataSet set1 = new LineDataSet(vals1, "DataSet 1");
Hole 6:
[]: set1.setDrawCubic(true);
Hole 7:
[]: set1.setCubicIntensity(0.2F);
Hole 8:
[]: set1.setDrawCircles(false);
Hole 9:
[]: set1.setLineWidth(1.8F);
Hole 10:
[]: set1.setCircleRadius(4.0F);
Hole 11:
[]: set1.setCircleColor(Color.WHITE);
Hole 12:
[]: set1.setHighLightColor(Color.rgb(244, 117, 117));
Hole 13:
[]: set1.setColor(Color.WHITE);
Hole 14:
[]: set1.setFillColor(Color.WHITE);
Hole 15:
[]: set1.setFillAlpha(100);
Hole 16:
[]: set1.setDrawHorizontalHighlightIndicator(false);
Hole 17:
[]: set1.setFillFormatter(new FillFormatter()
                      {
                        @Override
                        public float getFillLinePosition (ILineDataSet dataSet, LineDataProvider dataProvider)
                        {
                          return (-10);
                        }
                      });
Hole 18:
[]: LineData data = new LineData(xVals, set1);
Hole 19:
[]: data.setValueTypeface(tf);
Hole 20:
[]: data.setValueTextSize(9.0F);
Hole 21:
[]: data.setDrawValues(false);
Hole 22:
[]: mChart.setData(data);

Edit A:
Hole 1:
[]: <SKIP>
Hole 2:
[]: <SKIP>
Hole 3:
[]: ArrayList<Entry> vals1 = new ArrayList<Entry>();
Hole 4:
[SLoop]: vals1.add(new Entry(val, i));
Hole 5:
[]: LineDataSet set1 = new LineDataSet(vals1, "DataSet 1");
Hole 6:
[]: set1.setDrawCubic(true);
Hole 7:
[]: set1.setCubicIntensity(0.2F);
Hole 8:
[]: set1.setDrawCircles(false);
Hole 9:
[]: set1.setLineWidth(1.8F);
Hole 10:
[]: set1.setCircleRadius(4.0F);
Hole 11:
[]: set1.setCircleColor(Color.WHITE);
Hole 12:
[]: set1.setHighLightColor(Color.rgb(244, 117, 117));
Hole 13:
[]: set1.setColor(Color.WHITE);
Hole 14:
[]: set1.setFillColor(Color.WHITE);
Hole 15:
[]: set1.setFillAlpha(100);
Hole 16:
[]: set1.setDrawHorizontalHighlightIndicator(false);
Hole 17:
[]: set1.setFillFormatter(new FillFormatter()
                      {
                        @Override
                        public float getFillLinePosition (ILineDataSet dataSet, LineDataProvider dataProvider)
                        {
                          return (-10);
                        }
                      });
Hole 18:
[]: LineData data = new LineData(set1);
Hole 19:
[]: data.setValueTypeface(tf);
Hole 20:
[]: data.setValueTextSize(9.0F);
Hole 21:
[]: data.setDrawValues(false);
Hole 22:
[]: mChart.setData(data);

Edit B:
Hole 1:
[]: ArrayList<String> xVals = new ArrayList<String>();
Hole 2:
[]: for (int i = 0 ; i < count ; i++)
{
  xVals.add((1990 + i + ""));
}
Hole 3:
[]: ArrayList<Entry> yVals = new ArrayList<Entry>();
Hole 4:
[SLoop]: yVals.add(new Entry(val, i));
Hole 5:
[]: LineDataSet set1;
Hole 6:
[]: if ((mChart.getData() != null && mChart.getData().getDataSetCount()) > 0)
{
  set1 = (LineDataSet) mChart.getData().getDataSetByIndex(0);
  set1.setYVals(yVals);
  mChart.notifyDataSetChanged();
}
else
{
  set1 = new LineDataSet(yVals, "DataSet 1");
  set1.setDrawCubic(true);
  set1.setCubicIntensity(0.2F);
  set1.setDrawCircles(false);
  set1.setLineWidth(1.8F);
  set1.setCircleRadius(4.0F);
  set1.setCircleColor(Color.WHITE);
  set1.setHighLightColor(Color.rgb(244, 117, 117));
  set1.setColor(Color.WHITE);
  set1.setFillColor(Color.WHITE);
  set1.setFillAlpha(100);
  set1.setDrawHorizontalHighlightIndicator(false);
  set1.setFillFormatter(new FillFormatter()
                        {
                          @Override
                          public float getFillLinePosition (ILineDataSet dataSet, LineDataProvider dataProvider)
                          {
                            return (-10);
                          }
                        });
  LineData data = new LineData(xVals, set1);
  data.setValueTypeface(tf);
  data.setValueTextSize(9.0F);
  data.setDrawValues(false);
  mChart.setData(data);
}
Hole 7:
[]: <SKIP>
Hole 8:
[]: <SKIP>
Hole 9:
[]: <SKIP>
Hole 10:
[]: <SKIP>
Hole 11:
[]: <SKIP>
Hole 12:
[]: <SKIP>
Hole 13:
[]: <SKIP>
Hole 14:
[]: <SKIP>
Hole 15:
[]: <SKIP>
Hole 16:
[]: <SKIP>
Hole 17:
[]: <SKIP>
Hole 18:
[]: <SKIP>
Hole 19:
[]: <SKIP>
Hole 20:
[]: <SKIP>
Hole 21:
[]: <SKIP>
Hole 22:
[]: <SKIP>

Edit M:
Hole 1:
[]: ArrayList<XAxisValue> xVals = new ArrayList<XAxisValue>();
Hole 2:
[]: for (int i = 0 ; i < count ; i++)
{
  xVals.add(new XAxisValue((1990 + i), (1990 + i + "")));
}
Hole 3:
[]: ArrayList<Entry> yVals = new ArrayList<Entry>();
Hole 4:
[SLoop]: yVals.add(new Entry(val, i));
Hole 5:
[]: LineDataSet set1;
Hole 6:
[]: if ((mChart.getData() != null && mChart.getData().getDataSetCount()) > 0)
{
  set1 = (LineDataSet) mChart.getData().getDataSetByIndex(0);
  set1.setYVals(yVals);
  mChart.notifyDataSetChanged();
}
else
{
  set1 = new LineDataSet(yVals, "DataSet 1");
  set1.setDrawCubic(true);
  set1.setCubicIntensity(0.2F);
  set1.setDrawCircles(false);
  set1.setLineWidth(1.8F);
  set1.setCircleRadius(4.0F);
  set1.setCircleColor(Color.WHITE);
  set1.setHighLightColor(Color.rgb(244, 117, 117));
  set1.setColor(Color.WHITE);
  set1.setFillColor(Color.WHITE);
  set1.setFillAlpha(100);
  set1.setDrawHorizontalHighlightIndicator(false);
  set1.setFillFormatter(new FillFormatter()
                        {
                          @Override
                          public float getFillLinePosition (ILineDataSet dataSet, LineDataProvider dataProvider)
                          {
                            return (-10);
                          }
                        });
  LineData data = new LineData(xVals, set1);
  data.setValueTypeface(tf);
  data.setValueTextSize(9.0F);
  data.setDrawValues(false);
  mChart.setData(data);
}
Hole 7:
[]: <SKIP>
Hole 8:
[]: <SKIP>
Hole 9:
[]: <SKIP>
Hole 10:
[]: <SKIP>
Hole 11:
[]: <SKIP>
Hole 12:
[]: <SKIP>
Hole 13:
[]: <SKIP>
Hole 14:
[]: <SKIP>
Hole 15:
[]: <SKIP>
Hole 16:
[]: <SKIP>
Hole 17:
[]: <SKIP>
Hole 18:
[]: <SKIP>
Hole 19:
[]: <SKIP>
Hole 20:
[]: <SKIP>
Hole 21:
[]: <SKIP>
Hole 22:
[]: <SKIP>


