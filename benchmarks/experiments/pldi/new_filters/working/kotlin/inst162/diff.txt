Parsing files...
Parsing o...
Parsing a...
Parsing b...
Parsing m...
Merge Instance for method (Ident "JetFunctionParameterInfoHandler",Ident "findCall",[RefType (ClassRefType (ClassType [(Ident "CreateParameterInfoContext",[])]))])
private static JetValueArgumentList findCall (CreateParameterInfoContext context)
{
  PsiFile file = context.getFile();
  if (!(file instanceof JetFile))
    return null;
  PsiElement element = file.findElementAt(context.getOffset());
  while (element != null && !(element instanceof JetValueArgumentList))
  {
    element = element.getParent();
  }
  if (element == null)
    return null;
  JetValueArgumentList argumentList = (JetValueArgumentList) element;
  JetCallElement callExpression;
  if (element.getParent() instanceof JetCallElement)
  {
    callExpression = (JetCallElement) element.getParent();
  }
  else
    <?HOLE?>
  <?HOLE?>
  JetExpression calleeExpression = callExpression.getCalleeExpression();
  if (calleeExpression == null)
    return null;
  JetSimpleNameExpression refExpression = null;
  if (calleeExpression instanceof JetSimpleNameExpression)
  {
    refExpression = (JetSimpleNameExpression) calleeExpression;
  }
  else
    if (calleeExpression instanceof JetConstructorCalleeExpression)
    {
      JetConstructorCalleeExpression constructorCalleeExpression = (JetConstructorCalleeExpression) calleeExpression;
      if (constructorCalleeExpression.getConstructorReferenceExpression() instanceof JetSimpleNameExpression)
      {
        refExpression = (JetSimpleNameExpression) constructorCalleeExpression.getConstructorReferenceExpression();
      }
    }
  if (refExpression != null)
  {
    JetScope scope = bindingContext.get(BindingContext.RESOLUTION_SCOPE, refExpression);
    DeclarationDescriptor placeDescriptor = null;
    if (scope != null)
    {
      placeDescriptor = scope.getContainingDeclaration();
    }
    Collection<DeclarationDescriptor> variants = TipsManager.getReferenceVariants(refExpression, bindingContext);
    String refName = refExpression.getReferencedName();
    PsiReference[] references = refExpression.getReferences();
    if (references.length == 0)
      return null;
    ArrayList<DeclarationDescriptor> itemsToShow = new ArrayList<DeclarationDescriptor>();
    for (DeclarationDescriptor variant : variants) {
                                                     if (variant instanceof FunctionDescriptor)
                                                     {
                                                       FunctionDescriptor functionDescriptor = (FunctionDescriptor) variant;
                                                       if (functionDescriptor.getName().equals(refName))
                                                       {
                                                         if (placeDescriptor != null && !JetVisibilityChecker.isVisible(placeDescriptor, functionDescriptor))
                                                           continue;
                                                         itemsToShow.add(functionDescriptor);
                                                       }
                                                     }
                                                     else
                                                       if (variant instanceof ClassDescriptor)
                                                       {
                                                         ClassDescriptor classDescriptor = (ClassDescriptor) variant;
                                                         if (classDescriptor.getName().equals(refName))
                                                         {
                                                           for (ConstructorDescriptor constructorDescriptor : classDescriptor.getConstructors()) {
                                                                                                                                                   if (placeDescriptor != null && !JetVisibilityChecker.isVisible(placeDescriptor, constructorDescriptor))
                                                                                                                                                     <?HOLE?>
                                                                                                                                                   itemsToShow.add(constructorDescriptor);
                                                                                                                                                 }
                                                         }
                                                       }
                                                   }
    context.setItemsToShow(ArrayUtil.toObjectArray(itemsToShow));
    return argumentList;
  }
  return null;
}
Edit Base:
Hole 1:
[SCond]: return null;
Hole 2:
[]: BindingContext bindingContext = AnalyzerFacadeForJVM.analyzeFileWithCache(((JetFile) file), AnalyzerFacadeForJVM.SINGLE_DECLARATION_PROVIDER).getBindingContext();
Hole 3:
[SCond,SLoop,SCond,SCond,SCond,SLoop,SCond]: continue;

Edit A:
Hole 1:
[SCond]: return null;
Hole 2:
[]: BindingContext bindingContext = AnalyzerFacadeForJVM.analyzeFileWithCache(((JetFile) file), AnalyzerFacadeForJVM.SINGLE_DECLARATION_PROVIDER, CompilerSpecialMode.REGULAR, CompilerDependencies.compilerDependenciesForProduction(CompilerSpecialMode.REGULAR)).getBindingContext();
Hole 3:
[SCond,SLoop,SCond,SCond,SCond,SLoop,SCond]: continue;

Edit B:
Hole 1:
[SCond]: {
  return null;
}
Hole 2:
[]: BindingContext bindingContext = AnalyzeSingleFileUtil.getContextForSingleFile(((JetFile) file));
Hole 3:
[SCond,SLoop,SCond,SCond,SCond,SLoop,SCond]: {
  continue;
}

Edit M:
Hole 1:
[SCond]: {
  return null;
}
Hole 2:
[]: BindingContext bindingContext = AnalyzeSingleFileUtil.getContextForSingleFile(((JetFile) file));
Hole 3:
[SCond,SLoop,SCond,SCond,SCond,SLoop,SCond]: continue;

Merge Instance for method (Ident "JetFunctionParameterInfoHandler",Ident "updateUI",[RefType (ClassRefType (ClassType [(Ident "Object",[])])),RefType (ClassRefType (ClassType [(Ident "ParameterInfoUIContext",[])]))])
@Override
 public void updateUI (Object descriptor, ParameterInfoUIContext context)
{
  if ((context == null || context.getParameterOwner()) == null || !context.getParameterOwner().isValid())
  {
    return;
  }
  PsiElement parameterOwner = context.getParameterOwner();
  if (parameterOwner instanceof JetValueArgumentList)
  {
    JetValueArgumentList argumentList = (JetValueArgumentList) parameterOwner;
    if (descriptor instanceof FunctionDescriptor)
    {
      JetFile file = (JetFile) argumentList.getContainingFile();
      <?HOLE?>
      FunctionDescriptor functionDescriptor = (FunctionDescriptor) descriptor;
      StringBuilder builder = new StringBuilder();
      List<ValueParameterDescriptor> valueParameters = functionDescriptor.getValueParameters();
      List<JetValueArgument> valueArguments = argumentList.getArguments();
      int currentParameterIndex = context.getCurrentParameterIndex();
      int boldStartOffset = -1;
      int boldEndOffset = -1;
      boolean isGrey = false;
      boolean isDeprecated = false;
      Color color = context.getDefaultParameterColor();
      PsiElement parent = argumentList.getParent();
      if (parent instanceof JetCallElement)
      {
        JetCallElement callExpression = (JetCallElement) parent;
        JetExpression calleeExpression = callExpression.getCalleeExpression();
        JetSimpleNameExpression refExpression = null;
        if (calleeExpression instanceof JetSimpleNameExpression)
        {
          refExpression = (JetSimpleNameExpression) calleeExpression;
        }
        else
          if (calleeExpression instanceof JetConstructorCalleeExpression)
          {
            JetConstructorCalleeExpression constructorCalleeExpression = (JetConstructorCalleeExpression) calleeExpression;
            if (constructorCalleeExpression.getConstructorReferenceExpression() instanceof JetSimpleNameExpression)
            {
              refExpression = (JetSimpleNameExpression) constructorCalleeExpression.getConstructorReferenceExpression();
            }
          }
        if (refExpression != null)
        {
          DeclarationDescriptor declarationDescriptor = bindingContext.get(BindingContext.REFERENCE_TARGET, refExpression);
          if (declarationDescriptor != null)
          {
            if (declarationDescriptor == functionDescriptor)
            {
              color = GREEN_BACKGROUND;
            }
          }
        }
      }
      boolean[] usedIndexes = new boolean[valueParameters.size()];
      boolean namedMode = false;
      Arrays.fill(usedIndexes, false);
      if (currentParameterIndex >= valueParameters.size() && (valueParameters.size() > 0 || currentParameterIndex) > 0 && (valueParameters.size() == 0 || valueParameters.get((valueParameters.size() - 1)).getVarargElementType()) == null)
      {
        isGrey = true;
      }
      if (valueParameters.size() == 0)
        builder.append(CodeInsightBundle.message("parameter.info.no.parameters"));
      for (int i = 0 ; i < valueParameters.size() ; ++i)
      {
        if (i != 0)
          builder.append(", ");
        boolean highlightParameter = i == currentParameterIndex || ((!namedMode && i) < currentParameterIndex && valueParameters.get((valueParameters.size() - 1)).getVarargElementType()) != null;
        if (highlightParameter)
          boldStartOffset = builder.length();
        if (!namedMode)
        {
          if (valueArguments.size() > i)
          {
            JetValueArgument argument = valueArguments.get(i);
            if (argument.isNamed())
            {
              namedMode = true;
            }
            else
            {
              ValueParameterDescriptor param = valueParameters.get(i);
              builder.append(renderParameter(param, false, bindingContext));
              if (i < currentParameterIndex)
              {
                if (argument.getArgumentExpression() != null)
                {
                  JetType paramType = getActualParameterType(param);
                  JetType exprType = bindingContext.get(BindingContext.EXPRESSION_TYPE, argument.getArgumentExpression());
                  if (exprType != null && !JetTypeChecker.INSTANCE.isSubtypeOf(exprType, paramType))
                    isGrey = true;
                }
                else
                  <?HOLE?>
              }
              usedIndexes[i] = true;
            }
          }
          else
          {
            ValueParameterDescriptor param = valueParameters.get(i);
            builder.append(renderParameter(param, false, bindingContext));
          }
        }
        if (namedMode)
        {
          boolean takeAnyArgument = true;
          if (valueArguments.size() > i)
          {
            JetValueArgument argument = valueArguments.get(i);
            if (argument.isNamed())
            {
              for (int j = 0 ; j < valueParameters.size() ; ++j)
              {
                JetSimpleNameExpression referenceExpression = argument.getArgumentName().getReferenceExpression();
                ValueParameterDescriptor param = valueParameters.get(j);
                if (referenceExpression != null && !usedIndexes[j] && param.getName().equals(referenceExpression.getReferencedName()))
                {
                  takeAnyArgument = false;
                  usedIndexes[j] = true;
                  builder.append(renderParameter(param, true, bindingContext));
                  if (i < currentParameterIndex)
                  {
                    if (argument.getArgumentExpression() != null)
                    {
                      JetType paramType = getActualParameterType(param);
                      JetType exprType = bindingContext.get(BindingContext.EXPRESSION_TYPE, argument.getArgumentExpression());
                      if (exprType != null && !JetTypeChecker.INSTANCE.isSubtypeOf(exprType, paramType))
                        <?HOLE?>
                    }
                    else
                      <?HOLE?>
                  }
                  break;
                }
              }
            }
          }
          if (takeAnyArgument)
          {
            if (i < currentParameterIndex)
              isGrey = true;
            for (int j = 0 ; j < valueParameters.size() ; ++j)
            {
              ValueParameterDescriptor param = valueParameters.get(j);
              if (!usedIndexes[j])
              {
                usedIndexes[j] = true;
                builder.append(renderParameter(param, true, bindingContext));
                break;
              }
            }
          }
        }
        if (highlightParameter)
          boldEndOffset = builder.length();
      }
      if (builder.toString().isEmpty())
        <?HOLE?>
      else
        <?HOLE?>
    }
    else
      <?HOLE?>
  }
}
Edit Base:
Hole 1:
[SCond,SCond]: BindingContext bindingContext = AnalyzerFacadeForJVM.analyzeFileWithCache(file, AnalyzerFacadeForJVM.SINGLE_DECLARATION_PROVIDER).getBindingContext();
Hole 2:
[SCond,SCond,SCond,SCond,SCond,SLoop,SCond,SCond]: isGrey = true;
Hole 3:
[SCond,SCond,SCond,SCond,SLoop,SCond,SCond,SCond,SLoop,SCond,SCond]: isGrey = true;
Hole 4:
[SCond,SCond,SCond,SLoop,SCond,SCond,SCond,SLoop,SCond,SCond]: isGrey = true;
Hole 5:
[SCond,SCond,SCond]: context.setUIComponentEnabled(false);
Hole 6:
[SCond,SCond,SCond]: context.setupUIComponentPresentation(builder.toString(), boldStartOffset, boldEndOffset, isGrey, isDeprecated, false, color);
Hole 7:
[SCond,SCond]: context.setUIComponentEnabled(false);

Edit A:
Hole 1:
[SCond,SCond]: BindingContext bindingContext = AnalyzerFacadeForJVM.analyzeFileWithCache(file, AnalyzerFacadeForJVM.SINGLE_DECLARATION_PROVIDER, CompilerSpecialMode.REGULAR, CompilerDependencies.compilerDependenciesForProduction(CompilerSpecialMode.REGULAR)).getBindingContext();
Hole 2:
[SCond,SCond,SCond,SCond,SCond,SLoop,SCond,SCond]: isGrey = true;
Hole 3:
[SCond,SCond,SCond,SCond,SLoop,SCond,SCond,SCond,SLoop,SCond,SCond]: isGrey = true;
Hole 4:
[SCond,SCond,SCond,SLoop,SCond,SCond,SCond,SLoop,SCond,SCond]: isGrey = true;
Hole 5:
[SCond,SCond,SCond]: context.setUIComponentEnabled(false);
Hole 6:
[SCond,SCond,SCond]: context.setupUIComponentPresentation(builder.toString(), boldStartOffset, boldEndOffset, isGrey, isDeprecated, false, color);
Hole 7:
[SCond,SCond]: context.setUIComponentEnabled(false);

Edit B:
Hole 1:
[SCond,SCond]: BindingContext bindingContext = AnalyzeSingleFileUtil.getContextForSingleFile(file);
Hole 2:
[SCond,SCond,SCond,SCond,SCond,SLoop,SCond,SCond]: {
  isGrey = true;
}
Hole 3:
[SCond,SCond,SCond,SCond,SLoop,SCond,SCond,SCond,SLoop,SCond,SCond]: {
  isGrey = true;
}
Hole 4:
[SCond,SCond,SCond,SLoop,SCond,SCond,SCond,SLoop,SCond,SCond]: {
  isGrey = true;
}
Hole 5:
[SCond,SCond,SCond]: {
  context.setUIComponentEnabled(false);
}
Hole 6:
[SCond,SCond,SCond]: {
  context.setupUIComponentPresentation(builder.toString(), boldStartOffset, boldEndOffset, isGrey, isDeprecated, false, color);
}
Hole 7:
[SCond,SCond]: {
  context.setUIComponentEnabled(false);
}

Edit M:
Hole 1:
[SCond,SCond]: BindingContext bindingContext = AnalyzeSingleFileUtil.getContextForSingleFile(file);
Hole 2:
[SCond,SCond,SCond,SCond,SCond,SLoop,SCond,SCond]: isGrey = true;
Hole 3:
[SCond,SCond,SCond,SCond,SLoop,SCond,SCond,SCond,SLoop,SCond,SCond]: isGrey = true;
Hole 4:
[SCond,SCond,SCond,SLoop,SCond,SCond,SCond,SLoop,SCond,SCond]: isGrey = true;
Hole 5:
[SCond,SCond,SCond]: context.setUIComponentEnabled(false);
Hole 6:
[SCond,SCond,SCond]: context.setupUIComponentPresentation(builder.toString(), boldStartOffset, boldEndOffset, isGrey, isDeprecated, false, color);
Hole 7:
[SCond,SCond]: context.setUIComponentEnabled(false);


