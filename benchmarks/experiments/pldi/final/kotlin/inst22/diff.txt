Parsing files...
Parsing o...
Parsing a...
Parsing b...
Parsing m...
Merge Instance for method (Ident "KotlinAndroidTestCase",Ident "setUp",[])
@Override
 protected void setUp () throws Exception
{
  System.setProperty(KotlinAndroidTestCaseBase.SDK_PATH_PROPERTY, (PathManager.getHomePath() + "/../dependencies/androidSDK"));
  System.setProperty(KotlinAndroidTestCaseBase.PLATFORM_DIR_PROPERTY, "android-21");
  super.setUp();
  String sdkPath = getTestSdkPath();
  final TestFixtureBuilder<IdeaProjectTestFixture> projectBuilder = IdeaTestFixtureFactory.getFixtureFactory().createFixtureBuilder(getName());
  myFixture = JavaTestFixtureFactory.getFixtureFactory().createCodeInsightFixture(projectBuilder.getFixture());
  final JavaModuleFixtureBuilder moduleFixtureBuilder = projectBuilder.addModule(JavaModuleFixtureBuilder.class);
  final String dirPath = myFixture.getTempDirPath() + getContentRootPath();
  final File dir = new File(dirPath);
  if (!dir.exists())
  {
    assertTrue(dir.mkdirs());
  }
  tuneModule(moduleFixtureBuilder, dirPath);
  final ArrayList<MyAdditionalModuleData> modules = new ArrayList<MyAdditionalModuleData>();
  configureAdditionalModules(projectBuilder, modules);
  myFixture.setUp();
  myFixture.setTestDataPath(getTestDataPath());
  myModule = moduleFixtureBuilder.getFixture().getModule();
  createManifest();
  androidSdk = createAndroidSdk(getTestSdkPath(), getPlatformDir());
  myFacet = addAndroidFacet(myModule, sdkPath, getPlatformDir(), isToAddSdk());
  if (new File(getResDir()).exists())
  {
    myFixture.copyDirectoryToProject(getResDir(), "res");
  }
  else
  {
    TestLogger.getInstance(this.getClass()).info("No res directory found in test");
  }
  myAdditionalModules = new ArrayList<Module>();
  for (MyAdditionalModuleData data : modules) {
                                                final Module additionalModule = data.myModuleFixtureBuilder.getFixture().getModule();
                                                myAdditionalModules.add(additionalModule);
                                                final AndroidFacet facet = addAndroidFacet(additionalModule, sdkPath, getPlatformDir());
                                                facet.setLibraryProject(data.myLibrary);
                                                final String rootPath = getContentRootPath(data.myDirName);
                                                myFixture.copyDirectoryToProject("res", (rootPath + "/res"));
                                                myFixture.copyFileToProject(SdkConstants.FN_ANDROID_MANIFEST_XML, (rootPath + '/' + SdkConstants.FN_ANDROID_MANIFEST_XML));
                                                ModuleRootModificationUtil.addDependency(myModule, additionalModule);
                                              }
  if (!myCreateManifest)
  {
    deleteManifest();
  }
  if (RenderSecurityManager.RESTRICT_READS)
  {
    RenderSecurityManager.sEnabled = false;
  }
  ((StartupManagerImpl) StartupManager.getInstance(getProject())).runPostStartupActivities();
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: VfsRootAccess.allowRootAccess(JetTestUtils.getHomeDirectory());
Hole 2:
[]: kotlinInternalModeOriginalValue = KotlinInternalMode.OBJECT$.getEnabled();
Hole 3:
[]: KotlinInternalMode.OBJECT$.setEnabled(true);

Edit A:
Hole 1:
[]: VirtualDirectoryImpl.allowRootAccess(JetTestUtils.getHomeDirectory());
Hole 2:
[]: kotlinInternalModeOriginalValue = KotlinInternalMode.OBJECT$.getEnabled();
Hole 3:
[]: KotlinInternalMode.OBJECT$.setEnabled(true);

Edit B:
Hole 1:
[]: VfsRootAccess.allowRootAccess(JetTestUtils.getHomeDirectory());
Hole 2:
[]: kotlinInternalModeOriginalValue = KotlinInternalMode.Instance.getEnabled();
Hole 3:
[]: KotlinInternalMode.Instance.setEnabled(true);

Edit M:
Hole 1:
[]: VirtualDirectoryImpl.allowRootAccess(JetTestUtils.getHomeDirectory());
Hole 2:
[]: kotlinInternalModeOriginalValue = KotlinInternalMode.Instance.getEnabled();
Hole 3:
[]: KotlinInternalMode.Instance.setEnabled(true);

Merge Instance for method (Ident "KotlinAndroidTestCase",Ident "tearDown",[])
@Override
 public void tearDown () throws Exception
{
  <?HOLE?>
  <?HOLE?>
  Set<JetFile> builtInsSources = getProject().getComponent(BuiltInsReferenceResolver.class).getBuiltInsSources();
  FileManager fileManager = ((PsiManagerEx) PsiManager.getInstance(getProject())).getFileManager();
  myModule = null;
  myAdditionalModules = null;
  myFixture.tearDown();
  myFixture = null;
  myFacet = null;
  if (RenderSecurityManager.RESTRICT_READS)
  {
    RenderSecurityManager.sEnabled = true;
  }
  super.tearDown();
  for (JetFile source : builtInsSources) {
                                           FileViewProvider provider = source.getViewProvider();
                                           fileManager.setViewProvider(provider.getVirtualFile(), provider);
                                         }
}
Edit Base:
Hole 1:
[]: KotlinInternalMode.OBJECT$.setEnabled(kotlinInternalModeOriginalValue);
Hole 2:
[]: VfsRootAccess.disallowRootAccess(JetTestUtils.getHomeDirectory());

Edit A:
Hole 1:
[]: KotlinInternalMode.OBJECT$.setEnabled(kotlinInternalModeOriginalValue);
Hole 2:
[]: VirtualDirectoryImpl.disallowRootAccess(JetTestUtils.getHomeDirectory());

Edit B:
Hole 1:
[]: KotlinInternalMode.Instance.setEnabled(kotlinInternalModeOriginalValue);
Hole 2:
[]: VfsRootAccess.disallowRootAccess(JetTestUtils.getHomeDirectory());

Edit M:
Hole 1:
[]: KotlinInternalMode.Instance.setEnabled(kotlinInternalModeOriginalValue);
Hole 2:
[]: VirtualDirectoryImpl.disallowRootAccess(JetTestUtils.getHomeDirectory());


