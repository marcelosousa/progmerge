Merge Instance for method (Ident "TestScheduler",Ident "triggerActions",[PrimType LongT])
@SuppressWarnings("unchecked")
 private void triggerActions (long targetTimeInNanos)
{
  while (!queue.isEmpty())
  {
    TimedAction<?> current = queue.peek();
    if (current.time > targetTimeInNanos)
    {
      <?HOLE?>
      break;
    }
    time = current.time;
    queue.remove();
    <?HOLE?>
  }
  <?HOLE?>
}
Edit Base:
Hole 1:
[SCond,SLoop]: time = targetTimeInNanos;
Hole 2:
[SLoop]: ((Func2<Scheduler, Object, Subscription>) current.action).call(current.scheduler, current.state);
Hole 3:
[]: <SKIP>

Edit A:
Hole 1:
[SCond,SLoop]: <SKIP>
Hole 2:
[SLoop]: ((Func2<Scheduler, Object, Subscription>) current.action).call(current.scheduler, current.state);
Hole 3:
[]: time = targetTimeInNanos;

Edit B:
Hole 1:
[SCond,SLoop]: time = targetTimeInNanos;
Hole 2:
[SLoop]: if (!current.isCancelled.get())
{
  ((Func2<Scheduler, Object, Subscription>) current.action).call(current.scheduler, current.state);
}
Hole 3:
[]: <SKIP>

Edit M:
Hole 1:
[SCond,SLoop]: <SKIP>
Hole 2:
[SLoop]: if (!current.isCancelled.get())
{
  ((Func2<Scheduler, Object, Subscription>) current.action).call(current.scheduler, current.state);
}
Hole 3:
[]: time = targetTimeInNanos;

