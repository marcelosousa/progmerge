private static final int KEEP_ALIVE_DURATION_MS = 5000;
private Connection httpA;
private Address httpAddress;
private Connection httpB;
private Connection httpC;
private Connection httpD;
private Connection httpE;
private MockWebServer httpServer;
private InetSocketAddress httpSocketAddress;
private Object owner;
private ConnectionPool pool;
private Connection spdyA;
private Address spdyAddress;
private MockWebServer spdyServer;
private InetSocketAddress spdySocketAddress;
private static final SSLContext sslContext = SslContextBuilder.localhost();
private FakeExecutor cleanupExecutor;
@Test
 public void maxConnections () throws IOException, InterruptedException
{
  assertEquals(0, pool.getConnectionCount());
  pool.recycle(httpA);
  assertEquals(1, pool.getConnectionCount());
  assertEquals(1, pool.getHttpConnectionCount());
  assertEquals(0, pool.getMultiplexedConnectionCount());
  pool.recycle(httpB);
  assertEquals(2, pool.getConnectionCount());
  assertEquals(2, pool.getHttpConnectionCount());
  assertEquals(0, pool.getMultiplexedConnectionCount());
  pool.recycle(httpC);
  assertEquals(3, pool.getConnectionCount());
  assertEquals(3, pool.getHttpConnectionCount());
  assertEquals(0, pool.getSpdyConnectionCount());
  pool.performCleanup();
  assertEquals(2, pool.getConnectionCount());
  assertEquals(2, pool.getHttpConnectionCount());
  assertEquals(0, pool.getMultiplexedConnectionCount());
  pool.share(spdyA);
  assertEquals(3, pool.getConnectionCount());
  assertEquals(2, pool.getHttpConnectionCount());
  assertEquals(1, pool.getSpdyConnectionCount());
  pool.performCleanup();
  assertEquals(2, pool.getConnectionCount());
  assertEquals(1, pool.getHttpConnectionCount());
  assertEquals(1, pool.getMultiplexedConnectionCount());
  Connection recycledHttpConnection = pool.get(httpAddress);
  recycledHttpConnection.setOwner(owner);
  assertNotNull(recycledHttpConnection);
  assertTrue(recycledHttpConnection.isAlive());
  assertEquals(1, pool.getConnectionCount());
  assertEquals(0, pool.getHttpConnectionCount());
  assertEquals(1, pool.getMultiplexedConnectionCount());
  Connection sharedSpdyConnection = pool.get(spdyAddress);
  assertNotNull(sharedSpdyConnection);
  assertEquals(spdyA, sharedSpdyConnection);
  assertEquals(1, pool.getConnectionCount());
  assertEquals(0, pool.getHttpConnectionCount());
  assertEquals(1, pool.getMultiplexedConnectionCount());
  pool.recycle(httpC);
  assertEquals(2, pool.getConnectionCount());
  assertEquals(1, pool.getHttpConnectionCount());
  assertEquals(1, pool.getMultiplexedConnectionCount());
  recycledHttpConnection = pool.get(httpAddress);
  assertNotNull(recycledHttpConnection);
  assertTrue(recycledHttpConnection.isAlive());
  assertEquals(1, pool.getConnectionCount());
  assertEquals(0, pool.getHttpConnectionCount());
  assertEquals(1, pool.getMultiplexedConnectionCount());
  sharedSpdyConnection = pool.get(spdyAddress);
  assertEquals(spdyA, sharedSpdyConnection);
  assertNotNull(sharedSpdyConnection);
  assertEquals(1, pool.getConnectionCount());
  assertEquals(0, pool.getHttpConnectionCount());
  assertEquals(1, pool.getMultiplexedConnectionCount());
  pool.recycle(httpD);
  assertEquals(2, pool.getConnectionCount());
  assertEquals(1, pool.getHttpConnectionCount());
  assertEquals(1, pool.getMultiplexedConnectionCount());
  pool.recycle(httpE);
  assertEquals(3, pool.getConnectionCount());
  assertEquals(2, pool.getHttpConnectionCount());
  assertEquals(1, pool.getSpdyConnectionCount());
  pool.performCleanup();
  assertEquals(2, pool.getConnectionCount());
  assertEquals(2, pool.getHttpConnectionCount());
  assertEquals(0, pool.getMultiplexedConnectionCount());
  return;
}
