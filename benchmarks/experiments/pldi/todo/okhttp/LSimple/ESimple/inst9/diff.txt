Merge Instance for method (Ident "ConnectionPoolTest",Ident "maxConnections",[])
@Test
 public void maxConnections () throws IOException, InterruptedException
{
  assertEquals(0, pool.getConnectionCount());
  pool.recycle(httpA);
  assertEquals(1, pool.getConnectionCount());
  assertEquals(1, pool.getHttpConnectionCount());
  <?HOLE?>
  pool.recycle(httpB);
  assertEquals(2, pool.getConnectionCount());
  assertEquals(2, pool.getHttpConnectionCount());
  <?HOLE?>
  pool.recycle(httpC);
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  assertEquals(2, pool.getConnectionCount());
  assertEquals(2, pool.getHttpConnectionCount());
  <?HOLE?>
  pool.share(spdyA);
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  assertEquals(2, pool.getConnectionCount());
  assertEquals(1, pool.getHttpConnectionCount());
  <?HOLE?>
  Connection recycledHttpConnection = pool.get(httpAddress);
  recycledHttpConnection.setOwner(owner);
  assertNotNull(recycledHttpConnection);
  assertTrue(recycledHttpConnection.isAlive());
  assertEquals(1, pool.getConnectionCount());
  assertEquals(0, pool.getHttpConnectionCount());
  <?HOLE?>
  Connection sharedSpdyConnection = pool.get(spdyAddress);
  assertNotNull(sharedSpdyConnection);
  assertEquals(spdyA, sharedSpdyConnection);
  assertEquals(1, pool.getConnectionCount());
  assertEquals(0, pool.getHttpConnectionCount());
  <?HOLE?>
  pool.recycle(httpC);
  <?HOLE?>
  assertEquals(2, pool.getConnectionCount());
  assertEquals(1, pool.getHttpConnectionCount());
  <?HOLE?>
  recycledHttpConnection = pool.get(httpAddress);
  assertNotNull(recycledHttpConnection);
  assertTrue(recycledHttpConnection.isAlive());
  assertEquals(1, pool.getConnectionCount());
  assertEquals(0, pool.getHttpConnectionCount());
  <?HOLE?>
  sharedSpdyConnection = pool.get(spdyAddress);
  assertEquals(spdyA, sharedSpdyConnection);
  assertNotNull(sharedSpdyConnection);
  assertEquals(1, pool.getConnectionCount());
  assertEquals(0, pool.getHttpConnectionCount());
  <?HOLE?>
  pool.recycle(httpD);
  <?HOLE?>
  assertEquals(2, pool.getConnectionCount());
  assertEquals(1, pool.getHttpConnectionCount());
  <?HOLE?>
  pool.recycle(httpE);
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  assertEquals(2, pool.getConnectionCount());
  assertEquals(2, pool.getHttpConnectionCount());
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: assertEquals(0, pool.getSpdyConnectionCount());
Hole 2:
[]: assertEquals(0, pool.getSpdyConnectionCount());
Hole 3:
[]: Thread.sleep(50);
Hole 4:
[]: <SKIP>
Hole 5:
[]: <SKIP>
Hole 6:
[]: <SKIP>
Hole 7:
[]: assertEquals(0, pool.getSpdyConnectionCount());
Hole 8:
[]: Thread.sleep(50);
Hole 9:
[]: <SKIP>
Hole 10:
[]: <SKIP>
Hole 11:
[]: <SKIP>
Hole 12:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 13:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 14:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 15:
[]: Thread.sleep(50);
Hole 16:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 17:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 18:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 19:
[]: Thread.sleep(50);
Hole 20:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 21:
[]: Thread.sleep(50);
Hole 22:
[]: <SKIP>
Hole 23:
[]: <SKIP>
Hole 24:
[]: <SKIP>
Hole 25:
[]: assertEquals(0, pool.getSpdyConnectionCount());

Edit A:
Hole 1:
[]: assertEquals(0, pool.getMultiplexedConnectionCount());
Hole 2:
[]: assertEquals(0, pool.getMultiplexedConnectionCount());
Hole 3:
[]: Thread.sleep(50);
Hole 4:
[]: <SKIP>
Hole 5:
[]: <SKIP>
Hole 6:
[]: <SKIP>
Hole 7:
[]: assertEquals(0, pool.getMultiplexedConnectionCount());
Hole 8:
[]: Thread.sleep(50);
Hole 9:
[]: <SKIP>
Hole 10:
[]: <SKIP>
Hole 11:
[]: <SKIP>
Hole 12:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 13:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 14:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 15:
[]: Thread.sleep(50);
Hole 16:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 17:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 18:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 19:
[]: Thread.sleep(50);
Hole 20:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 21:
[]: Thread.sleep(50);
Hole 22:
[]: <SKIP>
Hole 23:
[]: <SKIP>
Hole 24:
[]: <SKIP>
Hole 25:
[]: assertEquals(0, pool.getMultiplexedConnectionCount());

Edit B:
Hole 1:
[]: assertEquals(0, pool.getSpdyConnectionCount());
Hole 2:
[]: assertEquals(0, pool.getSpdyConnectionCount());
Hole 3:
[]: assertEquals(3, pool.getConnectionCount());
Hole 4:
[]: assertEquals(3, pool.getHttpConnectionCount());
Hole 5:
[]: assertEquals(0, pool.getSpdyConnectionCount());
Hole 6:
[]: pool.performCleanup();
Hole 7:
[]: assertEquals(0, pool.getSpdyConnectionCount());
Hole 8:
[]: assertEquals(3, pool.getConnectionCount());
Hole 9:
[]: assertEquals(2, pool.getHttpConnectionCount());
Hole 10:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 11:
[]: pool.performCleanup();
Hole 12:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 13:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 14:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 15:
[]: <SKIP>
Hole 16:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 17:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 18:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 19:
[]: <SKIP>
Hole 20:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 21:
[]: assertEquals(3, pool.getConnectionCount());
Hole 22:
[]: assertEquals(2, pool.getHttpConnectionCount());
Hole 23:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 24:
[]: pool.performCleanup();
Hole 25:
[]: assertEquals(0, pool.getSpdyConnectionCount());

Edit M:
Hole 1:
[]: assertEquals(0, pool.getMultiplexedConnectionCount());
Hole 2:
[]: assertEquals(0, pool.getMultiplexedConnectionCount());
Hole 3:
[]: assertEquals(3, pool.getConnectionCount());
Hole 4:
[]: assertEquals(3, pool.getHttpConnectionCount());
Hole 5:
[]: assertEquals(0, pool.getSpdyConnectionCount());
Hole 6:
[]: pool.performCleanup();
Hole 7:
[]: assertEquals(0, pool.getMultiplexedConnectionCount());
Hole 8:
[]: assertEquals(3, pool.getConnectionCount());
Hole 9:
[]: assertEquals(2, pool.getHttpConnectionCount());
Hole 10:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 11:
[]: pool.performCleanup();
Hole 12:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 13:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 14:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 15:
[]: <SKIP>
Hole 16:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 17:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 18:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 19:
[]: <SKIP>
Hole 20:
[]: assertEquals(1, pool.getMultiplexedConnectionCount());
Hole 21:
[]: assertEquals(3, pool.getConnectionCount());
Hole 22:
[]: assertEquals(2, pool.getHttpConnectionCount());
Hole 23:
[]: assertEquals(1, pool.getSpdyConnectionCount());
Hole 24:
[]: pool.performCleanup();
Hole 25:
[]: assertEquals(0, pool.getMultiplexedConnectionCount());

