Merge Instance for method (Ident "ClosureCodegen",Ident "gen",[RefType (ClassRefType (ClassType [(Ident "JetFunctionLiteralExpression",[])]))])
public GeneratedClosureDescriptor gen (JetFunctionLiteralExpression fun)
{
  JetNamedDeclaration container = PsiTreeUtil.getParentOfType(fun, JetNamespace.class, JetClass.class, JetObjectDeclaration.class);
  final Pair<String, ClassVisitor> nameAndVisitor;
  if (container instanceof JetNamespace)
  {
    <?HOLE?>
  }
  else
  {
    <?HOLE?>
  }
  <?HOLE?>
  final ClassVisitor cv = nameAndVisitor.getSecond();
  final String name = nameAndVisitor.getFirst();
  SignatureWriter signatureWriter = new SignatureWriter();
  final List<ValueParameterDescriptor> parameters = funDescriptor.getUnsubstitutedValueParameters();
  final String funClass = getInternalClassName(funDescriptor);
  signatureWriter.visitClassType(funClass);
  for (ValueParameterDescriptor parameter : parameters) {
                                                          appendType(signatureWriter, parameter.getOutType(), '=');
                                                        }
  appendType(signatureWriter, funDescriptor.getUnsubstitutedReturnType(), '=');
  signatureWriter.visitEnd();
  cv.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC, name, null, funClass, new String[0]);
  final Method constructor = generateConstructor(cv, funClass);
  generateBridge(name, funDescriptor, cv);
  <?HOLE?>
  cv.visitEnd();
  return new GeneratedClosureDescriptor(name, constructor);
}
Edit Base:
Hole 1:
[SCond]: nameAndVisitor = factory.forClosureIn(((JetNamespace) container));
Hole 2:
[SCond]: nameAndVisitor = factory.forClosureIn(bindingContext.getClassDescriptor(((JetClassOrObject) container)));
Hole 3:
[]: final FunctionDescriptor funDescriptor = (FunctionDescriptor) bindingContext.getDeclarationDescriptor(fun);
Hole 4:
[]: generateBody(name, funDescriptor, cv, container.getProject(), fun.getBody());

Edit A:
Hole 1:
[SCond]: nameAndVisitor = factory.forClosureIn(((JetNamespace) container));
Hole 2:
[SCond]: nameAndVisitor = factory.forClosureIn(bindingContext.getClassDescriptor(((JetClassOrObject) container)));
Hole 3:
[]: final FunctionDescriptor funDescriptor = (FunctionDescriptor) bindingContext.getDeclarationDescriptor(fun);
Hole 4:
[]: generateBody(name, funDescriptor, cv, container.getProject(), fun.getFunctionLiteral().getBodyExpression().getStatements());

Edit B:
Hole 1:
[SCond]: nameAndVisitor = state.forClosureIn(((JetNamespace) container));
Hole 2:
[SCond]: nameAndVisitor = state.forClosureIn(state.getBindingContext().getClassDescriptor(((JetClassOrObject) container)));
Hole 3:
[]: final FunctionDescriptor funDescriptor = (FunctionDescriptor) state.getBindingContext().getDeclarationDescriptor(fun);
Hole 4:
[]: generateBody(name, funDescriptor, cv, container.getProject(), fun.getBody());

Edit M:
Hole 1:
[SCond]: nameAndVisitor = state.forClosureIn(((JetNamespace) container));
Hole 2:
[SCond]: nameAndVisitor = state.forClosureIn(state.getBindingContext().getClassDescriptor(((JetClassOrObject) container)));
Hole 3:
[]: final FunctionDescriptor funDescriptor = (FunctionDescriptor) state.getBindingContext().getDeclarationDescriptor(fun);
Hole 4:
[]: generateBody(name, funDescriptor, cv, container.getProject(), fun.getFunctionLiteral().getBodyExpression().getStatements());

