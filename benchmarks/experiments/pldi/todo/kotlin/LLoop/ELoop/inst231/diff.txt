Merge Instance for method (Ident "JavaPackageScope",Ident "getAllDescriptors",[])
@NotNull
 @Override
 public Collection<DeclarationDescriptor> getAllDescriptors ()
{
  if (allDescriptors == null)
  {
    <?HOLE?>
    <?HOLE?>
    final PsiPackage javaPackage = semanticServices.getDescriptorResolver().findPackage(packageFQN);
    if (javaPackage != null)
    {
      <?HOLE?>
      final JavaDescriptorResolver descriptorResolver = semanticServices.getDescriptorResolver();
      for (PsiPackage psiSubPackage : javaPackage.getSubPackages()) {
                                                                      <?HOLE?>
                                                                    }
      for (PsiClass psiClass : javaPackage.getClasses()) {
                                                           if (isKotlinNamespace && JvmAbi.PACKAGE_CLASS.equals(psiClass.getName()))
                                                           {
                                                             continue;
                                                           }
                                                           <?HOLE?>
                                                           if (kotlinClassDescriptor != null)
                                                           {
                                                             continue;
                                                           }
                                                           if (JvmAbi.PACKAGE_CLASS.equals(psiClass.getName()))
                                                           {
                                                             <?HOLE?>
                                                             <?HOLE?>
                                                             <?HOLE?>
                                                           }
                                                           if (psiClass.hasModifierProperty(PsiModifier.PUBLIC))
                                                           {
                                                             ClassDescriptor classDescriptor = descriptorResolver.resolveClass(psiClass);
                                                             if (classDescriptor != null)
                                                             {
                                                               allDescriptors.add(classDescriptor);
                                                             }
                                                           }
                                                         }
    }
  }
  return allDescriptors;
}
Edit Base:
Hole 1:
[SCond]: allDescriptors = Sets.newHashSet();
Hole 2:
[SCond]: <SKIP>
Hole 3:
[SCond,SCond]: boolean isKotlinNamespace = semanticServices.getKotlinNamespaceDescriptor(javaPackage.getQualifiedName()) != null;
Hole 4:
[SCond,SLoop,SCond,SCond]: if (semanticServices.getKotlinNamespaceDescriptor(psiSubPackage.getQualifiedName()) == null)
{
  allDescriptors.add(descriptorResolver.resolveNamespace(psiSubPackage.getQualifiedName()));
}
Hole 5:
[SLoop,SCond,SCond]: ClassDescriptor kotlinClassDescriptor = semanticServices.getKotlinClassDescriptor(psiClass.getQualifiedName());
Hole 6:
[SCond,SLoop,SCond,SCond]: HashSet<String> methodNames = new HashSet<String>();
Hole 7:
[SCond,SLoop,SCond,SCond]: for (PsiMethod psiMethod : psiClass.getMethods()) {
                                                    methodNames.add(psiMethod.getName());
                                                  }
Hole 8:
[SCond,SLoop,SCond,SCond]: for (String methodName : methodNames) {
                                        try
                                        {
                                          allDescriptors.addAll(getFunctions(methodName));
                                        }
                                        catch (ProcessCanceledException cancelException)
                                        {
                                          throw cancelException;
                                        }
                                        catch (RuntimeException ex)
                                        {
                                          LOG.error(ex);
                                        }
                                      }

Edit A:
Hole 1:
[SCond]: allDescriptors = Sets.newHashSet();
Hole 2:
[SCond]: if (psiClass != null)
{
  allDescriptors.addAll(semanticServices.getDescriptorResolver().resolveMethods(psiClass, descriptor));
  allDescriptors.addAll(semanticServices.getDescriptorResolver().resolveFieldGroup(descriptor, psiClass, staticMembers()));
}
Hole 3:
[SCond,SCond]: boolean isKotlinNamespace = semanticServices.getKotlinNamespaceDescriptor(new FqName(javaPackage.getQualifiedName())) != null;
Hole 4:
[SCond,SLoop,SCond,SCond]: if (semanticServices.getKotlinNamespaceDescriptor(new FqName(psiSubPackage.getQualifiedName())) == null)
{
  allDescriptors.add(descriptorResolver.resolveNamespace(new FqName(psiSubPackage.getQualifiedName())));
}
Hole 5:
[SLoop,SCond,SCond]: ClassDescriptor kotlinClassDescriptor = semanticServices.getKotlinClassDescriptor(new FqName(psiClass.getQualifiedName()));
Hole 6:
[SCond,SLoop,SCond,SCond]: continue;
Hole 7:
[SCond,SLoop,SCond,SCond]: <SKIP>
Hole 8:
[SCond,SLoop,SCond,SCond]: <SKIP>

Edit B:
Hole 1:
[SCond]: allDescriptors = Sets.newLinkedHashSet();
Hole 2:
[SCond]: <SKIP>
Hole 3:
[SCond,SCond]: boolean isKotlinNamespace = semanticServices.getKotlinNamespaceDescriptor(javaPackage.getQualifiedName()) != null;
Hole 4:
[SLoop,SCond,SCond]: if (semanticServices.getKotlinNamespaceDescriptor(psiSubPackage.getQualifiedName()) == null)
{
  allDescriptors.add(descriptorResolver.resolveNamespace(psiSubPackage.getQualifiedName()));
}
Hole 5:
[SLoop,SCond,SCond]: ClassDescriptor kotlinClassDescriptor = semanticServices.getKotlinClassDescriptor(psiClass.getQualifiedName());
Hole 6:
[SCond,SLoop,SCond,SCond]: LinkedHashSet<String> methodNames = new LinkedHashSet<String>();
Hole 7:
[SCond,SLoop,SCond,SCond]: for (PsiMethod psiMethod : psiClass.getMethods()) {
                                                    methodNames.add(psiMethod.getName());
                                                  }
Hole 8:
[SCond,SLoop,SCond,SCond]: for (String methodName : methodNames) {
                                        try
                                        {
                                          allDescriptors.addAll(getFunctions(methodName));
                                        }
                                        catch (ProcessCanceledException cancelException)
                                        {
                                          throw cancelException;
                                        }
                                        catch (RuntimeException ex)
                                        {
                                          LOG.error(ex);
                                        }
                                      }

Edit M:
Hole 1:
[SCond]: allDescriptors = Sets.newLinkedHashSet();
Hole 2:
[SCond]: if (psiClass != null)
{
  allDescriptors.addAll(semanticServices.getDescriptorResolver().resolveMethods(psiClass, descriptor));
  allDescriptors.addAll(semanticServices.getDescriptorResolver().resolveFieldGroup(descriptor, psiClass, staticMembers()));
}
Hole 3:
[SCond,SCond]: boolean isKotlinNamespace = semanticServices.getKotlinNamespaceDescriptor(new FqName(javaPackage.getQualifiedName())) != null;
Hole 4:
[SLoop,SCond,SCond]: if (semanticServices.getKotlinNamespaceDescriptor(new FqName(psiSubPackage.getQualifiedName())) == null)
{
  allDescriptors.add(descriptorResolver.resolveNamespace(new FqName(psiSubPackage.getQualifiedName())));
}
Hole 5:
[SLoop,SCond,SCond]: ClassDescriptor kotlinClassDescriptor = semanticServices.getKotlinClassDescriptor(new FqName(psiClass.getQualifiedName()));
Hole 6:
[SCond,SLoop,SCond,SCond]: continue;
Hole 7:
[SCond,SLoop,SCond,SCond]: <SKIP>
Hole 8:
[SCond,SLoop,SCond,SCond]: <SKIP>

