Merge Instance for method (Ident "JetChangeSignatureUsageProcessor",Ident "findConflicts",[RefType (ClassRefType (ClassType [(Ident "ChangeInfo",[])])),RefType (ClassRefType (ClassType [(Ident "Ref",[ActualType (ArrayType (RefType (ClassRefType (ClassType [(Ident "UsageInfo",[])]))))])]))])
@Override
 public MultiMap<PsiElement, String> findConflicts (ChangeInfo info, Ref<UsageInfo[]> refUsages)
{
  MultiMap<PsiElement, String> result = new MultiMap<PsiElement, String>();
  UsageInfo[] usageInfos = refUsages.get();
  <?HOLE?>
  List<UsageInfo> adjustedUsages = ArraysKt.filterNot(usageInfos, new Function1<UsageInfo, Boolean>()
                                                                  {
                                                                    @Override
                                                                    public Boolean invoke (UsageInfo info)
                                                                    {
                                                                      return (getOverriderOrCaller(info) instanceof KotlinLightMethod);
                                                                    }
                                                                  });
  if (adjustedUsages.size() < usageInfos.length)
  {
    refUsages.set(adjustedUsages.toArray(new UsageInfo[adjustedUsages.size()]));
  }
  if (!(info instanceof JetChangeInfo))
    return result;
  Set<String> parameterNames = new HashSet<String>();
  JetChangeInfo changeInfo = (JetChangeInfo) info;
  PsiElement function = info.getMethod();
  PsiElement element = function != null ? function : changeInfo.getContext();
  <?HOLE?>
  CallableDescriptor oldDescriptor = JetChangeInfoKt.getOriginalBaseFunctionDescriptor(changeInfo);
  DeclarationDescriptor containingDeclaration = oldDescriptor.getContainingDeclaration();
  <?HOLE?>
  if ((oldDescriptor instanceof ConstructorDescriptor && containingDeclaration) instanceof ClassDescriptorWithResolutionScopes)
    parametersScope = ScopeUtilsKt.asJetScope(((ClassDescriptorWithResolutionScopes) containingDeclaration).getScopeForInitializerResolution());
  else
    <?HOLE?>
  <?HOLE?>
  JetMethodDescriptor.Kind kind = JetChangeInfoKt.getKind(changeInfo);
  if ((!kind.isConstructor() && callableScope) != null && !info.getNewName().isEmpty())
  {
    Name newName = Name.identifier(info.getNewName());
    Collection<? extends CallableDescriptor> conflicts = oldDescriptor instanceof FunctionDescriptor ? ScopeUtils.getAllAccessibleFunctions(callableScope, newName) : ScopeUtils.getAllAccessibleVariables(callableScope, newName);
    for (CallableDescriptor conflict : conflicts) {
                                                    if (conflict == oldDescriptor)
                                                      continue;
                                                    PsiElement conflictElement = DescriptorToSourceUtils.descriptorToDeclaration(conflict);
                                                    if (conflictElement == changeInfo.getMethod())
                                                      continue;
                                                    if (getCallableParameterTypes(conflict).equals(getCallableParameterTypes(oldDescriptor)))
                                                    {
                                                      result.putValue(conflictElement, ("Function already exists: '" + DescriptorRenderer.SHORT_NAMES_IN_TYPES.render(conflict) + "'"));
                                                      break;
                                                    }
                                                  }
  }
  for (JetParameterInfo parameter : changeInfo.getNonReceiverParameters()) {
                                                                             JetValVar valOrVar = parameter.getValOrVar();
                                                                             String parameterName = parameter.getName();
                                                                             if (!parameterNames.add(parameterName))
                                                                             {
                                                                               result.putValue(element, ("Duplicating parameter '" + parameterName + "'"));
                                                                             }
                                                                             if (parametersScope != null)
                                                                             {
                                                                               if ((kind == JetMethodDescriptor.Kind.PRIMARY_CONSTRUCTOR && valOrVar) != JetValVar.None)
                                                                               {
                                                                                 for (VariableDescriptor property : ScopeUtils.getVariablesFromImplicitReceivers(parametersScope, Name.identifier(parameterName))) {
                                                                                                                                                                                                                     PsiElement propertyDeclaration = DescriptorToSourceUtils.descriptorToDeclaration(property);
                                                                                                                                                                                                                     <?HOLE?>
                                                                                                                                                                                                                   }
                                                                               }
                                                                               else
                                                                                 <?HOLE?>
                                                                             }
                                                                           }
  JetParameterInfo newReceiverInfo = changeInfo.getReceiverParameterInfo();
  JetParameterInfo originalReceiverInfo = changeInfo.getMethodDescriptor().getReceiver();
  <?HOLE?>
  for (UsageInfo usageInfo : usageInfos) {
                                           if (!(usageInfo instanceof KotlinCallerUsage))
                                             continue;
                                           <?HOLE?>
                                           DeclarationDescriptor callerDescriptor = ResolutionUtils.resolveToDescriptor(caller);
                                           findParameterDuplicationInCaller(result, changeInfo, caller, callerDescriptor);
                                         }
  return result;
}
Edit Base:
Hole 1:
[]: <SKIP>
Hole 2:
[]: BindingContext bindingContext = ResolutionUtils.analyze(((JetElement) element), BodyResolveMode.FULL);
Hole 3:
[]: JetScope parametersScope = null;
Hole 4:
[SCond,SCond]: if (function instanceof JetFunction)
  parametersScope = CallableRefactoringKt.getBodyScope(((JetFunction) function), bindingContext);
Hole 5:
[]: JetScope callableScope = CallableRefactoringKt.getContainingScope(oldDescriptor);
Hole 6:
[SCond,SLoop,SCond,SCond,SLoop]: if (propertyDeclaration != null && !(propertyDeclaration.getParent() instanceof JetParameterList))
{
  result.putValue(propertyDeclaration, ("Duplicating property '" + parameterName + "'"));
  break;
}
Hole 7:
[SCond,SCond,SCond,SLoop]: if (function instanceof JetFunction)
{
  VariableDescriptor variable = parametersScope.getLocalVariable(Name.identifier(parameterName));
  if (variable != null && !(variable instanceof ValueParameterDescriptor))
  {
    PsiElement conflictElement = DescriptorToSourceUtils.descriptorToDeclaration(variable);
    result.putValue(conflictElement, ("Duplicating local variable '" + parameterName + "'"));
  }
}
Hole 8:
[SCond]: if ((function instanceof JetCallableDeclaration && newReceiverInfo) != originalReceiverInfo)
{
  findReceiverIntroducingConflicts(result, function, newReceiverInfo);
  findInternalExplicitReceiverConflicts(refUsages.get(), result, originalReceiverInfo);
  findThisLabelConflicts(refUsages, result, changeInfo, ((JetCallableDeclaration) function));
}
Hole 9:
[SLoop]: JetNamedDeclaration caller = (JetNamedDeclaration) usageInfo.getElement();

Edit A:
Hole 1:
[]: for (UsageInfo usageInfo : usageInfos) {
                                         if (usageInfo instanceof KotlinWrapperForJavaUsageInfos)
                                         {
                                           KotlinWrapperForJavaUsageInfos wrapperForJavaUsageInfos = (KotlinWrapperForJavaUsageInfos) usageInfo;
                                           UsageInfo[] infos = wrapperForJavaUsageInfos.getJavaUsageInfos();
                                           for (int i = 0 ; i < infos.length ; i++)
                                           {
                                             UsageInfo javaUsageInfo = infos[i];
                                             if (javaUsageInfo instanceof OverriderUsageInfo)
                                             {
                                               PsiMethod method = ((OverriderUsageInfo) javaUsageInfo).getOverridingMethod();
                                               if (method instanceof KotlinLightMethod)
                                               {
                                                 infos[i] = new UsageInfo(((KotlinLightMethod) method).getOrigin());
                                               }
                                             }
                                           }
                                         }
                                       }
Hole 2:
[]: BindingContext bindingContext = ResolutionUtils.analyze(((JetElement) element), BodyResolveMode.FULL);
Hole 3:
[]: JetScope parametersScope = null;
Hole 4:
[SCond,SCond]: if (function instanceof JetFunction)
  parametersScope = CallableRefactoringKt.getBodyScope(((JetFunction) function), bindingContext);
Hole 5:
[]: JetScope callableScope = CallableRefactoringKt.getContainingScope(oldDescriptor);
Hole 6:
[SCond,SLoop,SCond,SCond,SLoop]: if (propertyDeclaration != null && !(propertyDeclaration.getParent() instanceof JetParameterList))
{
  result.putValue(propertyDeclaration, ("Duplicating property '" + parameterName + "'"));
  break;
}
Hole 7:
[SCond,SCond,SCond,SLoop]: if (function instanceof JetFunction)
{
  VariableDescriptor variable = parametersScope.getLocalVariable(Name.identifier(parameterName));
  if (variable != null && !(variable instanceof ValueParameterDescriptor))
  {
    PsiElement conflictElement = DescriptorToSourceUtils.descriptorToDeclaration(variable);
    result.putValue(conflictElement, ("Duplicating local variable '" + parameterName + "'"));
  }
}
Hole 8:
[SCond]: if ((function instanceof JetCallableDeclaration && newReceiverInfo) != originalReceiverInfo)
{
  findReceiverIntroducingConflicts(result, function, newReceiverInfo);
  findInternalExplicitReceiverConflicts(refUsages.get(), result, originalReceiverInfo);
  findThisLabelConflicts(refUsages, result, changeInfo, ((JetCallableDeclaration) function));
}
Hole 9:
[SLoop]: JetNamedDeclaration caller = (JetNamedDeclaration) usageInfo.getElement();

Edit B:
Hole 1:
[]: <SKIP>
Hole 2:
[]: BindingContext bindingContext = ResolutionUtils.analyze(((KtElement) element), BodyResolveMode.FULL);
Hole 3:
[]: KtScope parametersScope = null;
Hole 4:
[SCond,SCond]: if (function instanceof KtFunction)
  parametersScope = CallableRefactoringKt.getBodyScope(((KtFunction) function), bindingContext);
Hole 5:
[]: KtScope callableScope = CallableRefactoringKt.getContainingScope(oldDescriptor);
Hole 6:
[SCond,SLoop,SCond,SCond,SLoop]: if (propertyDeclaration != null && !(propertyDeclaration.getParent() instanceof KtParameterList))
{
  result.putValue(propertyDeclaration, ("Duplicating property '" + parameterName + "'"));
  break;
}
Hole 7:
[SCond,SCond,SCond,SLoop]: if (function instanceof KtFunction)
{
  VariableDescriptor variable = parametersScope.getLocalVariable(Name.identifier(parameterName));
  if (variable != null && !(variable instanceof ValueParameterDescriptor))
  {
    PsiElement conflictElement = DescriptorToSourceUtils.descriptorToDeclaration(variable);
    result.putValue(conflictElement, ("Duplicating local variable '" + parameterName + "'"));
  }
}
Hole 8:
[SCond]: if ((function instanceof KtCallableDeclaration && newReceiverInfo) != originalReceiverInfo)
{
  findReceiverIntroducingConflicts(result, function, newReceiverInfo);
  findInternalExplicitReceiverConflicts(refUsages.get(), result, originalReceiverInfo);
  findThisLabelConflicts(refUsages, result, changeInfo, ((KtCallableDeclaration) function));
}
Hole 9:
[SLoop]: KtNamedDeclaration caller = (KtNamedDeclaration) usageInfo.getElement();

Edit M:
Hole 1:
[]: for (UsageInfo usageInfo : usageInfos) {
                                         if (usageInfo instanceof KotlinWrapperForJavaUsageInfos)
                                         {
                                           KotlinWrapperForJavaUsageInfos wrapperForJavaUsageInfos = (KotlinWrapperForJavaUsageInfos) usageInfo;
                                           UsageInfo[] infos = wrapperForJavaUsageInfos.getJavaUsageInfos();
                                           for (int i = 0 ; i < infos.length ; i++)
                                           {
                                             UsageInfo javaUsageInfo = infos[i];
                                             if (javaUsageInfo instanceof OverriderUsageInfo)
                                             {
                                               PsiMethod method = ((OverriderUsageInfo) javaUsageInfo).getOverridingMethod();
                                               if (method instanceof KotlinLightMethod)
                                               {
                                                 infos[i] = new UsageInfo(((KotlinLightMethod) method).getOrigin());
                                               }
                                             }
                                           }
                                         }
                                       }
Hole 2:
[]: BindingContext bindingContext = ResolutionUtils.analyze(((KtElement) element), BodyResolveMode.FULL);
Hole 3:
[]: KtScope parametersScope = null;
Hole 4:
[SCond]: if (function instanceof KtFunction)
  parametersScope = CallableRefactoringKt.getBodyScope(((KtFunction) function), bindingContext);
Hole 5:
[]: KtScope callableScope = CallableRefactoringKt.getContainingScope(oldDescriptor);
Hole 6:
[SLoop,SCond,SCond,SLoop]: if (propertyDeclaration != null && !(propertyDeclaration.getParent() instanceof KtParameterList))
{
  result.putValue(propertyDeclaration, ("Duplicating property '" + parameterName + "'"));
  break;
}
Hole 7:
[SCond,SCond,SLoop]: if (function instanceof KtFunction)
{
  VariableDescriptor variable = parametersScope.getLocalVariable(Name.identifier(parameterName));
  if (variable != null && !(variable instanceof ValueParameterDescriptor))
  {
    PsiElement conflictElement = DescriptorToSourceUtils.descriptorToDeclaration(variable);
    result.putValue(conflictElement, ("Duplicating local variable '" + parameterName + "'"));
  }
}
Hole 8:
[]: if ((function instanceof KtCallableDeclaration && newReceiverInfo) != originalReceiverInfo)
{
  findReceiverIntroducingConflicts(result, function, newReceiverInfo);
  findInternalExplicitReceiverConflicts(refUsages.get(), result, originalReceiverInfo);
  findThisLabelConflicts(refUsages, result, changeInfo, ((KtCallableDeclaration) function));
}
Hole 9:
[SLoop]: KtNamedDeclaration caller = (KtNamedDeclaration) usageInfo.getElement();

