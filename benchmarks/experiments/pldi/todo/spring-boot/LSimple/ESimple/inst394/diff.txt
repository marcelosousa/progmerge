Merge Instance for method (Ident "SpringApplicationBuilderTests",Ident "parentContextCreationThatIsBuiltThenRun",[])
@Test
 public void parentContextCreationThatIsBuiltThenRun () throws Exception
{
  SpringApplicationBuilder application = new SpringApplicationBuilder(ChildConfig.class).contextClass(SpyApplicationContext.class);
  application.parent(ExampleConfig.class);
  <?HOLE?>
  verify(((SpyApplicationContext) this.context).getApplicationContext()).setParent(any(ApplicationContext.class));
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: this.context = application.build().run();
Hole 2:
[]: assertThat(((SpyApplicationContext) this.context).getRegisteredShutdownHook(), equalTo(false));
Hole 3:
[]: <SKIP>
Hole 4:
[]: <SKIP>

Edit A:
Hole 1:
[]: this.context = application.build().run();
Hole 2:
[]: assertThat(((SpyApplicationContext) this.context).getRegisteredShutdownHook()).isFalse();
Hole 3:
[]: <SKIP>
Hole 4:
[]: <SKIP>

Edit B:
Hole 1:
[]: this.context = application.build("a=alpha").run("b=bravo");
Hole 2:
[]: assertThat(((SpyApplicationContext) this.context).getRegisteredShutdownHook(), equalTo(false));
Hole 3:
[]: assertThat(this.context.getParent().getBean(ApplicationArguments.class).getNonOptionArgs(), contains("a=alpha"));
Hole 4:
[]: assertThat(this.context.getBean(ApplicationArguments.class).getNonOptionArgs(), contains("b=bravo"));

Edit M:
Hole 1:
[]: this.context = application.build("a=alpha").run("b=bravo");
Hole 2:
[]: assertThat(((SpyApplicationContext) this.context).getRegisteredShutdownHook()).isFalse();
Hole 3:
[]: assertThat(this.context.getParent().getBean(ApplicationArguments.class).getNonOptionArgs()).contains("a=alpha");
Hole 4:
[]: assertThat(this.context.getBean(ApplicationArguments.class).getNonOptionArgs()).contains("b=bravo");

