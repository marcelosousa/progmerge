Merge Instance for method (Ident "BaseImageDownloader",Ident "getStreamFromContent",[RefType (ClassRefType (ClassType [(Ident "String",[])])),RefType (ClassRefType (ClassType [(Ident "Object",[])]))])
protected InputStream getStreamFromContent (String imageUri, Object extra) throws FileNotFoundException
{
  ContentResolver res = context.getContentResolver();
  Uri uri = Uri.parse(imageUri);
  <?HOLE?>
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: return res.openInputStream(uri);
Hole 2:
[]: <SKIP>

Edit A:
Hole 1:
[]: if (imageUri.startsWith(CONTENT_CONTACTS_URI_PREFIX))
{
  return ContactsContract.Contacts.openContactPhotoInputStream(res, uri);
}
else
{
  return res.openInputStream(uri);
}
Hole 2:
[]: <SKIP>

Edit B:
Hole 1:
[]: if (isVideoUri(uri))
{
  Bitmap bitmap = MediaStore.Video.Thumbnails.getThumbnail(res, Long.valueOf(uri.getLastPathSegment()), MediaStore.Images.Thumbnails.MINI_KIND, null);
  ByteArrayOutputStream bos = new ByteArrayOutputStream();
  bitmap.compress(CompressFormat.PNG, 0, bos);
  byte[] bitmapdata = bos.toByteArray();
  return new ByteArrayInputStream(bitmapdata);
}
Hole 2:
[]: return res.openInputStream(uri);

Edit M:
Hole 1:
[]: if (isVideoUri(uri))
{
  Long origId = Long.valueOf(uri.getLastPathSegment());
  Bitmap bitmap = MediaStore.Video.Thumbnails.getThumbnail(res, origId, MediaStore.Images.Thumbnails.MINI_KIND, null);
  if (bitmap != null)
  {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    bitmap.compress(CompressFormat.PNG, 0, bos);
    byte[] bmpData = bos.toByteArray();
    return new ByteArrayInputStream(bmpData);
  }
}
Hole 2:
[]: return res.openInputStream(uri);

