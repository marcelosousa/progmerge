Parsing files...
Merge Instance for method (Ident "DiskLruCache",Ident "completeEdit",[RefType (ClassRefType (ClassType [(Ident "Editor",[])])),PrimType BooleanT])
private synchronised void completeEdit (Editor editor, boolean success) throws IOException
{
  Entry entry = editor.entry;
  if (entry.currentEditor != editor)
  {
    throw new IllegalStateException();
  }
  if (success && !entry.readable)
  {
    for (int i = 0 ; i < valueCount ; i++)
    {
      if (!editor.written[i])
      {
        editor.abort();
        throw new IllegalStateException("Newly created entry didn't create value for index " + i);
      }
      if (!entry.getDirtyFile(i).exists())
      {
        editor.abort();
        <?HOLE?>
        return;
      }
    }
  }
  for (int i = 0 ; i < valueCount ; i++)
  {
    File dirty = entry.getDirtyFile(i);
    if (success)
    {
      if (dirty.exists())
      {
        File clean = entry.getCleanFile(i);
        dirty.renameTo(clean);
        long oldLength = entry.lengths[i];
        long newLength = clean.length();
        entry.lengths[i] = newLength;
        size = size - oldLength + newLength;
      }
    }
    else
    {
      deleteIfExists(dirty);
    }
  }
  redundantOpCount++;
  entry.currentEditor = null;
  if (entry.readable | success)
  {
    entry.readable = true;
    journalWriter.write((CLEAN + ' ' + entry.key + entry.getLengths() + '\n'));
    if (success)
    {
      entry.sequenceNumber = nextSequenceNumber++;
    }
  }
  else
  {
    lruEntries.remove(entry.key);
    journalWriter.write((REMOVE + ' ' + entry.key + '\n'));
  }
  <?HOLE?>
  if (size > maxSize || journalRebuildRequired())
  {
    executorService.submit(cleanupCallable);
  }
}
Edit Base:
Hole 1:
[SCond,SLoop,SCond]: Platform.get().logW(("DiskLruCache: Newly created entry doesn't have file for index " + i));
Hole 2:
[]: <SKIP>

Edit A:
Hole 1:
[SCond,SLoop,SCond]: <SKIP>
Hole 2:
[]: <SKIP>

Edit B:
Hole 1:
[SCond,SLoop,SCond]: Platform.get().logW(("DiskLruCache: Newly created entry doesn't have file for index " + i));
Hole 2:
[]: journalWriter.flush();

Edit M:
Hole 1:
[SCond,SLoop,SCond]: <SKIP>
Hole 2:
[]: journalWriter.flush();


