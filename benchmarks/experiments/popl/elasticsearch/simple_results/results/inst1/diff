Parsing files...
Merge Instance for method (Ident "PainlessParser",Ident "funcref",[])
public final FuncrefContext funcref () throws RecognitionException
{
  FuncrefContext _localctx = new FuncrefContext(_ctx, getState());
  <?HOLE?>
  int _la;
  <?HOLE?>
  return _localctx;
}
Edit Base:
Hole 1:
[]: enterRule(_localctx, 22, RULE_funcref);
Hole 2:
[]: try
{
  enterOuterAlt(_localctx, 1);
  {
    setState(201);
    match(TYPE);
    setState(202);
    match(REF);
    setState(203);
    _la = _input.LA(1);
    if (!((_la == NEW || _la) == ID))
    {
      _errHandler.recoverInline(this);
    }
    else
    {
      consume();
    }
  }
}
catch (RecognitionException re)
{
  _localctx.exception = re;
  _errHandler.reportError(this, re);
  _errHandler.recover(this, re);
}
finally {
          exitRule();
        }

Edit A:
Hole 1:
[]: enterRule(_localctx, 50, RULE_funcref);
Hole 2:
[]: try
{
  enterOuterAlt(_localctx, 1);
  {
    setState(437);
    match(TYPE);
    setState(438);
    match(REF);
    setState(439);
    _la = _input.LA(1);
    if (!((_la == NEW || _la) == ID))
    {
      _errHandler.recoverInline(this);
    }
    else
    {
      consume();
    }
  }
}
catch (RecognitionException re)
{
  _localctx.exception = re;
  _errHandler.reportError(this, re);
  _errHandler.recover(this, re);
}
finally {
          exitRule();
        }

Edit B:
Hole 1:
[]: enterRule(_localctx, 22, RULE_funcref);
Hole 2:
[]: try
{
  setState(207);
  switch (_input.LA(1))
  {
    case TYPE:
      enterOuterAlt(_localctx, 1);
      {
        setState(201);
        match(TYPE);
        setState(202);
        match(REF);
        setState(203);
        _la = _input.LA(1);
        if (!((_la == NEW || _la) == ID))
        {
          _errHandler.recoverInline(this);
        }
        else
        {
          consume();
        }
      }
      break;
    case ID:
      enterOuterAlt(_localctx, 2);
      {
        setState(204);
        match(ID);
        setState(205);
        match(REF);
        setState(206);
        match(ID);
      }
      break;
    default:
      throw new NoViableAltException(this);
  }
}
catch (RecognitionException re)
{
  _localctx.exception = re;
  _errHandler.reportError(this, re);
  _errHandler.recover(this, re);
}
finally {
          exitRule();
        }

Edit M:
Hole 1:
[]: enterRule(_localctx, 50, RULE_funcref);
Hole 2:
[]: try
{
  setState(443);
  switch (_input.LA(1))
  {
    case TYPE:
      enterOuterAlt(_localctx, 1);
      {
        setState(437);
        match(TYPE);
        setState(438);
        match(REF);
        setState(439);
        _la = _input.LA(1);
        if (!((_la == NEW || _la) == ID))
        {
          _errHandler.recoverInline(this);
        }
        else
        {
          consume();
        }
      }
      break;
    case ID:
      enterOuterAlt(_localctx, 2);
      {
        setState(440);
        match(ID);
        setState(441);
        match(REF);
        setState(442);
        match(ID);
      }
      break;
    default:
      throw new NoViableAltException(this);
  }
}
catch (RecognitionException re)
{
  _localctx.exception = re;
  _errHandler.reportError(this, re);
  _errHandler.recover(this, re);
}
finally {
          exitRule();
        }


