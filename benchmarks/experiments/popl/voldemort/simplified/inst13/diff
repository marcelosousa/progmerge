Parsing files...
Merge Instance for method (Ident "AdminServiceBasicTest",Ident "testRebalanceNode",[])
@Test
 public void testRebalanceNode ()
{
  HashMap<ByteArray, byte[]> entrySet = ServerTestUtils.createRandomKeyValuePairs(TEST_STREAM_KEYS_SIZE);
  List<Integer> fetchAndUpdatePartitionsList = Arrays.asList(0, 2);
  int fetchPartitionKeyCount = 0;
  <?HOLE?>
  for (Entry<ByteArray, byte[]> entry : entrySet.entrySet()) {
                                                               <?HOLE?>
                                                               if (isKeyPartition(entry.getKey(), 0, testStoreName, fetchAndUpdatePartitionsList))
                                                               {
                                                                 fetchPartitionKeyCount++;
                                                               }
                                                             }
  List<Integer> rebalancePartitionList = Arrays.asList(1, 3);
  <?HOLE?>
  int asyncId = adminClient.rebalanceNode(stealInfo);
  assertNotSame("Got a valid rebalanceAsyncId", (-1), asyncId);
  getAdminClient().waitForCompletion(1, asyncId, 120, TimeUnit.SECONDS);
  store = getStore(1, testStoreName);
  for (Entry<ByteArray, byte[]> entry : entrySet.entrySet()) {
                                                               if (isKeyPartition(entry.getKey(), 1, testStoreName, rebalancePartitionList))
                                                               {
                                                                 <?HOLE?>
                                                                 <?HOLE?>
                                                               }
                                                             }
}
Edit Base:
Hole 1:
[]: Store<ByteArray, byte[]> store = getStore(0, testStoreName);
Hole 2:
[SLoop]: store.put(entry.getKey(), new Versioned<byte[]>(entry.getValue()));
Hole 3:
[]: RebalancePartitionsInfo stealInfo = new RebalancePartitionsInfo(1, 0, rebalancePartitionList, new ArrayList<Integer>(0), Arrays.asList(testStoreName), 0);
Hole 4:
[SCond,SLoop]: assertSame("entry should be present at store", 1, store.get(entry.getKey()).size());
Hole 5:
[SCond,SLoop]: assertEquals("entry value should match", new String(entry.getValue()), new String(store.get(entry.getKey()).get(0).getValue()));

Edit A:
Hole 1:
[]: Store<ByteArray, byte[], byte[]> store = getStore(0, testStoreName);
Hole 2:
[SLoop]: store.put(entry.getKey(), new Versioned<byte[]>(entry.getValue()), null);
Hole 3:
[]: RebalancePartitionsInfo stealInfo = new RebalancePartitionsInfo(1, 0, rebalancePartitionList, new ArrayList<Integer>(0), Arrays.asList(testStoreName), 0);
Hole 4:
[SCond,SLoop]: assertSame("entry should be present at store", 1, store.get(entry.getKey(), null).size());
Hole 5:
[SCond,SLoop]: assertEquals("entry value should match", new String(entry.getValue()), new String(store.get(entry.getKey(), null).get(0).getValue()));

Edit B:
Hole 1:
[]: Store<ByteArray, byte[]> store = getStore(0, testStoreName);
Hole 2:
[SLoop]: store.put(entry.getKey(), new Versioned<byte[]>(entry.getValue()));
Hole 3:
[]: RebalancePartitionsInfo stealInfo = new RebalancePartitionsInfo(1, 0, rebalancePartitionList, rebalancePartitionList, rebalancePartitionList, Arrays.asList(testStoreName), new HashMap<String, String>(), new HashMap<String, String>(), 0);
Hole 4:
[SCond,SLoop]: assertSame("entry should be present at store", 1, store.get(entry.getKey()).size());
Hole 5:
[SCond,SLoop]: assertEquals("entry value should match", new String(entry.getValue()), new String(store.get(entry.getKey()).get(0).getValue()));

Edit M:
Hole 1:
[]: Store<ByteArray, byte[], byte[]> store = getStore(0, testStoreName);
Hole 2:
[SLoop]: store.put(entry.getKey(), new Versioned<byte[]>(entry.getValue()), null);
Hole 3:
[]: RebalancePartitionsInfo stealInfo = new RebalancePartitionsInfo(1, 0, rebalancePartitionList, rebalancePartitionList, rebalancePartitionList, Arrays.asList(testStoreName), new HashMap<String, String>(), new HashMap<String, String>(), 0);
Hole 4:
[SCond,SLoop]: assertSame("entry should be present at store", 1, store.get(entry.getKey(), null).size());
Hole 5:
[SCond,SLoop]: assertEquals("entry value should match", new String(entry.getValue()), new String(store.get(entry.getKey(), null).get(0).getValue()));


