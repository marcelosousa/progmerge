Merge Instance for method (Ident "CrshAutoConfigurationTests",Ident "testDisabledPlugins",[])
@Test
 public void testDisabledPlugins () throws Exception
{
  MockEnvironment env = new MockEnvironment();
  <?HOLE?>
  load(env);
  PluginLifeCycle lifeCycle = this.context.getBean(PluginLifeCycle.class);
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: env.setProperty("shell.disabled_plugins", "GroovyREPL, termIOHandler, org.crsh.auth.AuthenticationPlugin");
Hole 2:
[]: assertNotNull(lifeCycle);
Hole 3:
[]: assertNull(lifeCycle.getContext().getPlugin(GroovyRepl.class));
Hole 4:
[]: assertNull(lifeCycle.getContext().getPlugin(ProcessorIOHandler.class));
Hole 5:
[]: assertNull(lifeCycle.getContext().getPlugin(JaasAuthenticationPlugin.class));

Edit A:
Hole 1:
[]: env.setProperty("shell.disabled_plugins", "GroovyREPL, termIOHandler, org.crsh.auth.AuthenticationPlugin");
Hole 2:
[]: assertThat(lifeCycle).isNotNull();
Hole 3:
[]: assertThat(lifeCycle.getContext().getPlugin(GroovyRepl.class)).isNull();
Hole 4:
[]: assertThat(lifeCycle.getContext().getPlugin(ProcessorIOHandler.class)).isNull();
Hole 5:
[]: assertThat(lifeCycle.getContext().getPlugin(JaasAuthenticationPlugin.class)).isNull();

Edit B:
Hole 1:
[]: env.setProperty("shell.disabled_plugins", "termIOHandler, org.crsh.auth.AuthenticationPlugin, javaLanguage");
Hole 2:
[]: assertNotNull(lifeCycle);
Hole 3:
[]: assertThat(lifeCycle.getContext().getPlugins(TermIOHandler.class), not(hasItem(isA(ProcessorIOHandler.class))));
Hole 4:
[]: assertThat(lifeCycle.getContext().getPlugins(AuthenticationPlugin.class), not(hasItem(isA(JaasAuthenticationPlugin.class))));
Hole 5:
[]: assertThat(lifeCycle.getContext().getPlugins(Language.class), not(hasItem(isA(JavaLanguage.class))));

Edit M:
Hole 1:
[]: env.setProperty("shell.disabled_plugins", "termIOHandler, org.crsh.auth.AuthenticationPlugin, javaLanguage");
Hole 2:
[]: assertThat(lifeCycle).isNotNull();
Hole 3:
[]: assertThat(lifeCycle.getContext().getPlugins(TermIOHandler.class)).filteredOn(when(isA(ProcessorIOHandler.class))).isEmpty();
Hole 4:
[]: assertThat(lifeCycle.getContext().getPlugins(AuthenticationPlugin.class)).filteredOn(when(isA(JaasAuthenticationPlugin.class))).isEmpty();
Hole 5:
[]: assertThat(lifeCycle.getContext().getPlugins(Language.class)).filteredOn(when(isA(JavaLanguage.class))).isEmpty();

