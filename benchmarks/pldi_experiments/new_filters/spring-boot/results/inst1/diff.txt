Merge Instance for method (Ident "ChangeableUrlsTests",Ident "urlsFromJarClassPathAreConsidered",[])
@Test
 public void urlsFromJarClassPathAreConsidered () throws Exception
{
  File relative = this.temporaryFolder.newFolder();
  <?HOLE?>
  URL absoluteUrl = this.temporaryFolder.newFolder().toURI().toURL();
  <?HOLE?>
  new File(jarWithClassPath.getParentFile(), "project-core/target/classes").mkdirs();
  new File(jarWithClassPath.getParentFile(), "project-web/target/classes").mkdirs();
  <?HOLE?>
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: File absoluteFile = this.temporaryFolder.newFolder();
Hole 2:
[]: File jarWithClassPath = makeJarFileWithUrlsInManifestClassPath("project-core/target/classes/", "project-web/target/classes/", "does-not-exist/target/classes", (relative.getName() + "/"), (absoluteFile.getAbsolutePath() + "/"), absoluteUrl);
Hole 3:
[]: ChangeableUrls urls = ChangeableUrls.fromUrlClassLoader(new URLClassLoader(new URL[] {
                                                                                       jarWithClassPath.toURI().toURL(),
                                                                                       makeJarFileWithNoManifest(),
                                                                                     }));
Hole 4:
[]: assertThat(urls.toList()).containsExactly(new URL(jarWithClassPath.toURI().toURL(), "project-core/target/classes/"), new URL(jarWithClassPath.toURI().toURL(), "project-web/target/classes/"), relative.toURI().toURL(), absoluteFile.toURI().toURL(), absoluteUrl);

Edit A:
Hole 1:
[]: File absoluteFile = this.temporaryFolder.newFolder();
Hole 2:
[]: File jarWithClassPath = makeJarFileWithUrlsInManifestClassPath("project-core/target/classes/", "project-web/target/classes/", "does-not-exist/target/classes", (relative.getName() + "/"), (absoluteFile.getAbsolutePath() + "/"), absoluteUrl);
Hole 3:
[]: ChangeableUrls urls = ChangeableUrls.fromClassLoader(new URLClassLoader(new URL[] {
                                                                                    jarWithClassPath.toURI().toURL(),
                                                                                    makeJarFileWithNoManifest(),
                                                                                  }));
Hole 4:
[]: assertThat(urls.toList()).containsExactly(new URL(jarWithClassPath.toURI().toURL(), "project-core/target/classes/"), new URL(jarWithClassPath.toURI().toURL(), "project-web/target/classes/"), relative.toURI().toURL(), absoluteFile.toURI().toURL(), absoluteUrl);

Edit B:
Hole 1:
[]: <SKIP>
Hole 2:
[]: File jarWithClassPath = makeJarFileWithUrlsInManifestClassPath("project-core/target/classes/", "project-web/target/classes/", "does-not-exist/target/classes", (relative.getName() + "/"), absoluteUrl);
Hole 3:
[]: ChangeableUrls urls = ChangeableUrls.fromUrlClassLoader(new URLClassLoader(new URL[] {
                                                                                       jarWithClassPath.toURI().toURL(),
                                                                                       makeJarFileWithNoManifest(),
                                                                                     }));
Hole 4:
[]: assertThat(urls.toList()).containsExactly(new URL(jarWithClassPath.toURI().toURL(), "project-core/target/classes/"), new URL(jarWithClassPath.toURI().toURL(), "project-web/target/classes/"), relative.toURI().toURL(), absoluteUrl);

Edit M:
Hole 1:
[]: <SKIP>
Hole 2:
[]: File jarWithClassPath = makeJarFileWithUrlsInManifestClassPath("project-core/target/classes/", "project-web/target/classes/", "does-not-exist/target/classes", (relative.getName() + "/"), absoluteUrl);
Hole 3:
[]: ChangeableUrls urls = ChangeableUrls.fromClassLoader(new URLClassLoader(new URL[] {
                                                                                    jarWithClassPath.toURI().toURL(),
                                                                                    makeJarFileWithNoManifest(),
                                                                                  }));
Hole 4:
[]: assertThat(urls.toList()).containsExactly(new URL(jarWithClassPath.toURI().toURL(), "project-core/target/classes/"), new URL(jarWithClassPath.toURI().toURL(), "project-web/target/classes/"), relative.toURI().toURL(), absoluteUrl);

