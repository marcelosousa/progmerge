Merge Instance for method (Ident "CacheAutoConfigurationTests",Ident "hazelcastCacheExplicit",[])
@Test
 public void hazelcastCacheExplicit ()
{
  load(DefaultCacheConfiguration.class, "spring.cache.type=hazelcast");
  HazelcastCacheManager cacheManager = validateCacheManager(HazelcastCacheManager.class);
  cacheManager.getCache("defaultCache");
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: assertThat(cacheManager.getCacheNames(), containsInAnyOrder("defaultCache"));
Hole 2:
[]: assertThat(cacheManager.getCacheNames(), hasSize(1));
Hole 3:
[]: assertThat(this.context.getBean(HazelcastInstance.class), equalTo(new DirectFieldAccessor(cacheManager).getPropertyValue("hazelcastInstance")));

Edit A:
Hole 1:
[]: assertThat(cacheManager.getCacheNames()).containsOnly("defaultCache");
Hole 2:
[]: assertThat(this.context.getBean(HazelcastInstance.class)).isEqualTo(new DirectFieldAccessor(cacheManager).getPropertyValue("hazelcastInstance"));
Hole 3:
[]: <SKIP>

Edit B:
Hole 1:
[]: assertThat(cacheManager.getCacheNames(), containsInAnyOrder("defaultCache"));
Hole 2:
[]: assertThat(cacheManager.getCacheNames(), hasSize(1));
Hole 3:
[]: assertThat(this.context.getBean(HazelcastInstance.class), equalTo(getHazelcastInstance(cacheManager)));

Edit M:
Hole 1:
[]: assertThat(cacheManager.getCacheNames()).containsOnly("defaultCache");
Hole 2:
[]: assertThat(this.context.getBean(HazelcastInstance.class)).isEqualTo(getHazelcastInstance(cacheManager));
Hole 3:
[]: <SKIP>

