Merge Instance for method (Ident "ClassPathChangeUploaderTests",Ident "sendsClassLoaderFiles",[])
@Test
 public void sendsClassLoaderFiles () throws Exception
{
  File sourceFolder = this.temp.newFolder();
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  this.requestFactory.willRespond(HttpStatus.OK);
  this.uploader.onApplicationEvent(event);
  <?HOLE?>
  MockClientHttpRequest request = this.requestFactory.getExecutedRequests().get(0);
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: Set<ChangedFile> files = new LinkedHashSet<ChangedFile>();
Hole 2:
[]: File file1 = createFile(sourceFolder, "File1");
Hole 3:
[]: File file2 = createFile(sourceFolder, "File2");
Hole 4:
[]: File file3 = createFile(sourceFolder, "File3");
Hole 5:
[]: files.add(new ChangedFile(sourceFolder, file1, Type.ADD));
Hole 6:
[]: files.add(new ChangedFile(sourceFolder, file2, Type.MODIFY));
Hole 7:
[]: files.add(new ChangedFile(sourceFolder, file3, Type.DELETE));
Hole 8:
[]: Set<ChangedFiles> changeSet = new LinkedHashSet<ChangedFiles>();
Hole 9:
[]: changeSet.add(new ChangedFiles(sourceFolder, files));
Hole 10:
[]: ClassPathChangedEvent event = new ClassPathChangedEvent(this, changeSet, false);
Hole 11:
[]: <SKIP>
Hole 12:
[]: ClassLoaderFiles classLoaderFiles = deserialize(request.getBodyAsBytes());
Hole 13:
[]: Collection<SourceFolder> sourceFolders = classLoaderFiles.getSourceFolders();
Hole 14:
[]: assertThat(sourceFolders.size(), equalTo(1));
Hole 15:
[]: SourceFolder classSourceFolder = sourceFolders.iterator().next();
Hole 16:
[]: assertThat(classSourceFolder.getName(), equalTo(sourceFolder.getAbsolutePath()));
Hole 17:
[]: Iterator<ClassLoaderFile> classFiles = classSourceFolder.getFiles().iterator();
Hole 18:
[]: assertClassFile(classFiles.next(), "File1", ClassLoaderFile.Kind.ADDED);
Hole 19:
[]: assertClassFile(classFiles.next(), "File2", ClassLoaderFile.Kind.MODIFIED);
Hole 20:
[]: assertClassFile(classFiles.next(), null, ClassLoaderFile.Kind.DELETED);
Hole 21:
[]: assertThat(classFiles.hasNext(), equalTo(false));

Edit A:
Hole 1:
[]: Set<ChangedFile> files = new LinkedHashSet<ChangedFile>();
Hole 2:
[]: File file1 = createFile(sourceFolder, "File1");
Hole 3:
[]: File file2 = createFile(sourceFolder, "File2");
Hole 4:
[]: File file3 = createFile(sourceFolder, "File3");
Hole 5:
[]: files.add(new ChangedFile(sourceFolder, file1, Type.ADD));
Hole 6:
[]: files.add(new ChangedFile(sourceFolder, file2, Type.MODIFY));
Hole 7:
[]: files.add(new ChangedFile(sourceFolder, file3, Type.DELETE));
Hole 8:
[]: Set<ChangedFiles> changeSet = new LinkedHashSet<ChangedFiles>();
Hole 9:
[]: changeSet.add(new ChangedFiles(sourceFolder, files));
Hole 10:
[]: ClassPathChangedEvent event = new ClassPathChangedEvent(this, changeSet, false);
Hole 11:
[]: <SKIP>
Hole 12:
[]: ClassLoaderFiles classLoaderFiles = deserialize(request.getBodyAsBytes());
Hole 13:
[]: Collection<SourceFolder> sourceFolders = classLoaderFiles.getSourceFolders();
Hole 14:
[]: assertThat(sourceFolders.size()).isEqualTo(1);
Hole 15:
[]: SourceFolder classSourceFolder = sourceFolders.iterator().next();
Hole 16:
[]: assertThat(classSourceFolder.getName()).isEqualTo(sourceFolder.getAbsolutePath());
Hole 17:
[]: Iterator<ClassLoaderFile> classFiles = classSourceFolder.getFiles().iterator();
Hole 18:
[]: assertClassFile(classFiles.next(), "File1", ClassLoaderFile.Kind.ADDED);
Hole 19:
[]: assertClassFile(classFiles.next(), "File2", ClassLoaderFile.Kind.MODIFIED);
Hole 20:
[]: assertClassFile(classFiles.next(), null, ClassLoaderFile.Kind.DELETED);
Hole 21:
[]: assertThat(classFiles.hasNext()).isFalse();

Edit B:
Hole 1:
[]: ClassPathChangedEvent event = createClassPathChangedEvent(sourceFolder);
Hole 2:
[]: <SKIP>
Hole 3:
[]: <SKIP>
Hole 4:
[]: <SKIP>
Hole 5:
[]: <SKIP>
Hole 6:
[]: <SKIP>
Hole 7:
[]: <SKIP>
Hole 8:
[]: <SKIP>
Hole 9:
[]: <SKIP>
Hole 10:
[]: <SKIP>
Hole 11:
[]: assertThat(this.requestFactory.getExecutedRequests().size(), is(1));
Hole 12:
[]: verifyUploadRequest(sourceFolder, request);
Hole 13:
[]: <SKIP>
Hole 14:
[]: <SKIP>
Hole 15:
[]: <SKIP>
Hole 16:
[]: <SKIP>
Hole 17:
[]: <SKIP>
Hole 18:
[]: <SKIP>
Hole 19:
[]: <SKIP>
Hole 20:
[]: <SKIP>
Hole 21:
[]: <SKIP>

Edit M:
Hole 1:
[]: ClassPathChangedEvent event = createClassPathChangedEvent(sourceFolder);
Hole 2:
[]: <SKIP>
Hole 3:
[]: <SKIP>
Hole 4:
[]: <SKIP>
Hole 5:
[]: <SKIP>
Hole 6:
[]: <SKIP>
Hole 7:
[]: <SKIP>
Hole 8:
[]: <SKIP>
Hole 9:
[]: <SKIP>
Hole 10:
[]: <SKIP>
Hole 11:
[]: assertThat(this.requestFactory.getExecutedRequests()).hasSize(1);
Hole 12:
[]: verifyUploadRequest(sourceFolder, request);
Hole 13:
[]: <SKIP>
Hole 14:
[]: <SKIP>
Hole 15:
[]: <SKIP>
Hole 16:
[]: <SKIP>
Hole 17:
[]: <SKIP>
Hole 18:
[]: <SKIP>
Hole 19:
[]: <SKIP>
Hole 20:
[]: <SKIP>
Hole 21:
[]: <SKIP>

