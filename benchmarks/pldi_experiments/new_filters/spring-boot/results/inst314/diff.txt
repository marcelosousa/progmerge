Merge Instance for method (Ident "WebRequestTraceFilterTests",Ident "filterAddsTraceWithDefaultIncludes",[])
@Test
 @SuppressWarnings("unchecked")
 public void filterAddsTraceWithDefaultIncludes ()
{
  <?HOLE?>
  request.addHeader("Accept", "application/json");
  Map<String, Object> trace = this.filter.getTrace(request);
  <?HOLE?>
  <?HOLE?>
  Map<String, Object> map = (Map<String, Object>) trace.get("headers");
  <?HOLE?>
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo");
Hole 2:
[]: assertEquals("GET", trace.get("method"));
Hole 3:
[]: assertEquals("/foo", trace.get("path"));
Hole 4:
[]: assertEquals("{Accept=application/json}", map.get("request").toString());
Hole 5:
[]: <SKIP>

Edit A:
Hole 1:
[]: MockHttpServletRequest request = new MockHttpServletRequest("GET", "/foo");
Hole 2:
[]: assertThat(trace.get("method")).isEqualTo("GET");
Hole 3:
[]: assertThat(trace.get("path")).isEqualTo("/foo");
Hole 4:
[]: assertThat(map.get("request").toString()).isEqualTo("{Accept=application/json}");
Hole 5:
[]: <SKIP>

Edit B:
Hole 1:
[]: MockHttpServletRequest request = spy(new MockHttpServletRequest("GET", "/foo"));
Hole 2:
[]: assertEquals("GET", trace.get("method"));
Hole 3:
[]: assertEquals("/foo", trace.get("path"));
Hole 4:
[]: assertEquals("{Accept=application/json}", map.get("request").toString());
Hole 5:
[]: verify(request, times(0)).getParameterMap();

Edit M:
Hole 1:
[]: MockHttpServletRequest request = spy(new MockHttpServletRequest("GET", "/foo"));
Hole 2:
[]: assertThat(trace.get("method")).isEqualTo("GET");
Hole 3:
[]: assertThat(trace.get("path")).isEqualTo("/foo");
Hole 4:
[]: assertThat(map.get("request").toString()).isEqualTo("{Accept=application/json}");
Hole 5:
[]: verify(request, times(0)).getParameterMap();

