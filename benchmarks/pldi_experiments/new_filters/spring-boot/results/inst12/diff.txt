Merge Instance for method (Ident "CorsSampleActuatorApplicationTests",Ident "preflightRequestForInsensitiveShouldReturnOk",[])
@Test
 public void preflightRequestForInsensitiveShouldReturnOk () throws Exception
{
  <?HOLE?>
  <?HOLE?>
  assertThat(exchange.getStatusCode()).isEqualTo(HttpStatus.OK);
}
Edit Base:
Hole 1:
[]: RequestEntity<?> healthRequest = RequestEntity.options(new URI("/health")).header("Origin", "http://localhost:8080").header("Access-Control-Request-Method", "GET").build();
Hole 2:
[]: ResponseEntity<Map> exchange = this.testRestTemplate.exchange(healthRequest, Map.class);

Edit A:
Hole 1:
[]: RequestEntity<?> healthRequest = RequestEntity.options(new URI("/application/health")).header("Origin", "http://localhost:8080").header("Access-Control-Request-Method", "GET").build();
Hole 2:
[]: ResponseEntity<Map> exchange = this.testRestTemplate.exchange(healthRequest, Map.class);

Edit B:
Hole 1:
[]: RequestEntity<?> healthRequest = RequestEntity.options(new URI("/health")).header("Origin", "http://localhost:8080").header("Access-Control-Request-Method", "GET").build();
Hole 2:
[]: ResponseEntity<?> exchange = this.testRestTemplate.exchange(healthRequest, Map.class);

Edit M:
Hole 1:
[]: RequestEntity<?> healthRequest = RequestEntity.options(new URI("/application/health")).header("Origin", "http://localhost:8080").header("Access-Control-Request-Method", "GET").build();
Hole 2:
[]: ResponseEntity<?> exchange = this.testRestTemplate.exchange(healthRequest, Map.class);

