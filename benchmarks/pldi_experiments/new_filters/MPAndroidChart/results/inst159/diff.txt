Merge Instance for method (Ident "BarLineChartBase",Ident "calculateOffsets",[])
@Override
 public void calculateOffsets ()
{
  <?HOLE?>
  <?HOLE?>
  prepareContentRect();
  float scaleX = (float) ((getWidth() - mOffsetLeft - mOffsetRight) / mDeltaX);
  float scaleY = (float) ((getHeight() - mOffsetBottom - mOffsetTop) / mDeltaY);
  Matrix val = new Matrix();
  val.postTranslate(0, (-mYChartMin));
  val.postScale(scaleX, (-scaleY));
  mMatrixValueToPx.set(val);
  Matrix offset = new Matrix();
  offset.postTranslate(mOffsetLeft, (getHeight() - mOffsetBottom));
  mMatrixOffset.set(offset);
}
Edit Base:
Hole 1:
[]: if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART)
{
  mOffsetRight = mLegend.getMaximumEntryLength(mLegendLabelPaint);
  mLegendLabelPaint.setTextAlign(Align.LEFT);
}
else
  if ((mLegend.getPosition() == LegendPosition.BELOW_CHART_LEFT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_RIGHT)
  {
    mOffsetBottom = (int) (mLegendLabelPaint.getTextSize() * 3.5F);
  }
Hole 2:
[]: mOffsetLeft = Utils.calcTextWidth(mYLabelPaint, ((int) mDeltaY + ".0000" + mUnit));

Edit A:
Hole 1:
[]: if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART)
{
  mOffsetRight = mLegend.getMaximumEntryLength(mLegendLabelPaint);
  mLegendLabelPaint.setTextAlign(Align.LEFT);
}
else
  if ((mLegend.getPosition() == LegendPosition.BELOW_CHART_LEFT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_RIGHT)
  {
    mOffsetBottom = (int) (mLegendLabelPaint.getTextSize() * 3.5F);
  }
Hole 2:
[]: if (mYLabels.getPosition() == YLabelPosition.LEFT)
{
  mOffsetLeft = Utils.calcTextWidth(mYLabelPaint, ((int) mDeltaY + ".0000" + mUnit));
  mYLabelPaint.setTextAlign(Align.RIGHT);
}
else
  if (mYLabels.getPosition() == YLabelPosition.RIGHT)
  {
    mOffsetRight = Utils.calcTextWidth(mYLabelPaint, ((int) mDeltaY + ".0000" + mUnit));
    mYLabelPaint.setTextAlign(Align.LEFT);
  }
  else
    if (mYLabels.getPosition() == YLabelPosition.BOTH_SIDED)
    {
      mOffsetRight = Utils.calcTextWidth(mYLabelPaint, ((int) mDeltaY + ".0000" + mUnit));
      mOffsetLeft = Utils.calcTextWidth(mYLabelPaint, ((int) mDeltaY + ".0000" + mUnit));
    }

Edit B:
Hole 1:
[]: if (mDrawLegend)
{
  if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART)
  {
    mOffsetRight = mLegend.getMaximumEntryLength(mLegendLabelPaint);
    mLegendLabelPaint.setTextAlign(Align.LEFT);
  }
  else
    if ((mLegend.getPosition() == LegendPosition.BELOW_CHART_LEFT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_RIGHT)
    {
      mOffsetBottom = (int) (mLegendLabelPaint.getTextSize() * 3.5F);
    }
}
Hole 2:
[]: mOffsetLeft = Utils.calcTextWidth(mYLabelPaint, ((int) mDeltaY + ".0000" + mUnit));

Edit M:
Hole 1:
[]: if (mDrawLegend)
{
  if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART)
  {
    mOffsetRight = mLegend.getMaximumEntryLength(mLegendLabelPaint);
    mLegendLabelPaint.setTextAlign(Align.LEFT);
  }
  else
    if ((mLegend.getPosition() == LegendPosition.BELOW_CHART_LEFT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_RIGHT)
    {
      mOffsetBottom = (int) (mLegendLabelPaint.getTextSize() * 3.5F);
    }
}
Hole 2:
[]: if (mYLabels.getPosition() == YLabelPosition.LEFT)
{
  mOffsetLeft = Utils.calcTextWidth(mYLabelPaint, ((int) mDeltaY + ".0000" + mUnit));
  mYLabelPaint.setTextAlign(Align.RIGHT);
}
else
  if (mYLabels.getPosition() == YLabelPosition.RIGHT)
  {
    mOffsetRight = Utils.calcTextWidth(mYLabelPaint, ((int) mDeltaY + ".0000" + mUnit));
    mYLabelPaint.setTextAlign(Align.LEFT);
  }
  else
    if (mYLabels.getPosition() == YLabelPosition.BOTH_SIDED)
    {
      mOffsetRight = Utils.calcTextWidth(mYLabelPaint, ((int) mDeltaY + ".0000" + mUnit));
      mOffsetLeft = Utils.calcTextWidth(mYLabelPaint, ((int) mDeltaY + ".0000" + mUnit));
    }

