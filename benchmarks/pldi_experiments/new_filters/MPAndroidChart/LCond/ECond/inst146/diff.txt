Merge Instance for method (Ident "BarLineChartBase",Ident "calculateOffsets",[])
@Override
 protected void calculateOffsets ()
{
  if (!mCustomViewPortEnabled)
  {
    float offsetLeft = 0.0F, offsetRight = 0.0F, offsetTop = 0.0F, offsetBottom = 0.0F;
    if (mLegend != null && mLegend.isEnabled())
    {
      if ((mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART || mLegend.getPosition()) == LegendPosition.RIGHT_OF_CHART_CENTER)
      {
        <?HOLE?>
      }
      else
        if ((mLegend.getPosition() == LegendPosition.LEFT_OF_CHART || mLegend.getPosition()) == LegendPosition.LEFT_OF_CHART_CENTER)
        {
          <?HOLE?>
        }
        else
          if (((mLegend.getPosition() == LegendPosition.BELOW_CHART_LEFT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_RIGHT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_CENTER)
          {
            <?HOLE?>
            <?HOLE?>
          }
    }
    if (mAxisLeft.needsOffset())
    {
      offsetLeft += mAxisLeft.getRequiredWidthSpace(mAxisRendererLeft.getPaintAxisLabels());
    }
    if (mAxisRight.needsOffset())
    {
      offsetRight += mAxisRight.getRequiredWidthSpace(mAxisRendererRight.getPaintAxisLabels());
    }
    <?HOLE?>
    <?HOLE?>
    <?HOLE?>
    <?HOLE?>
    <?HOLE?>
    <?HOLE?>
    float min = Utils.convertDpToPixel(10.0F);
    mViewPortHandler.restrainViewPort(Math.max(min, offsetLeft), Math.max(min, offsetTop), Math.max(min, offsetRight), Math.max(min, offsetBottom));
    if (mLogEnabled)
    {
      Log.i(LOG_TAG, ("offsetLeft: " + offsetLeft + ", offsetTop: " + offsetTop + ", offsetRight: " + offsetRight + ", offsetBottom: " + offsetBottom));
      Log.i(LOG_TAG, ("Content: " + mViewPortHandler.getContentRect().toString()));
    }
  }
  prepareOffsetMatrix();
  prepareValuePxMatrix();
}
Edit Base:
Hole 1:
[SCond,SCond,SCond]: offsetRight += (mLegend.mTextWidthMax + mLegend.getXOffset()) * 2.0F;
Hole 2:
[SCond,SCond,SCond,SCond]: offsetLeft += (mLegend.mTextWidthMax + mLegend.getXOffset()) * 2.0F;
Hole 3:
[SCond,SCond,SCond,SCond,SCond]: offsetBottom += mLegend.mTextHeightMax * 3.0F;
Hole 4:
[SCond,SCond,SCond,SCond,SCond]: <SKIP>
Hole 5:
[SCond]: float xlabelheight = mXAxis.mLabelHeight * 2.0F;
Hole 6:
[SCond]: if (mXAxis.isEnabled())
{
  if (mXAxis.getPosition() == XAxisPosition.BOTTOM)
  {
    offsetBottom += xlabelheight;
  }
  else
    if (mXAxis.getPosition() == XAxisPosition.TOP)
    {
      offsetTop += xlabelheight;
    }
    else
      if (mXAxis.getPosition() == XAxisPosition.BOTH_SIDED)
      {
        offsetBottom += xlabelheight;
        offsetTop += xlabelheight;
      }
}
Hole 7:
[SCond]: <SKIP>
Hole 8:
[SCond]: <SKIP>
Hole 9:
[SCond]: <SKIP>
Hole 10:
[SCond]: <SKIP>

Edit A:
Hole 1:
[SCond,SCond,SCond]: offsetRight += (Math.min(mLegend.mNeededWidth, (mViewPortHandler.getChartWidth() * mLegend.getMaxSizePercent())) + mLegend.getXOffset()) * 2.0F;
Hole 2:
[SCond,SCond,SCond,SCond]: offsetLeft += (Math.min(mLegend.mNeededWidth, (mViewPortHandler.getChartWidth() * mLegend.getMaxSizePercent())) + mLegend.getXOffset()) * 2.0F;
Hole 3:
[SCond,SCond,SCond,SCond,SCond]: float yOffset = mLegend.mTextHeightMax * 2.0F;
Hole 4:
[SCond,SCond,SCond,SCond,SCond]: offsetBottom += Math.min((mLegend.mNeededHeight + yOffset), (mViewPortHandler.getChartHeight() * mLegend.getMaxSizePercent()));
Hole 5:
[SCond]: if (mXAxis.isEnabled() && mXAxis.isDrawLabelsEnabled())
{
  float xlabelheight = mXAxis.mLabelHeight * 2.0F;
  if (mXAxis.getPosition() == XAxisPosition.BOTTOM)
  {
    offsetBottom += xlabelheight;
  }
  else
    if (mXAxis.getPosition() == XAxisPosition.TOP)
    {
      offsetTop += xlabelheight;
    }
    else
      if (mXAxis.getPosition() == XAxisPosition.BOTH_SIDED)
      {
        offsetBottom += xlabelheight;
        offsetTop += xlabelheight;
      }
}
Hole 6:
[SCond]: <SKIP>
Hole 7:
[SCond]: <SKIP>
Hole 8:
[SCond]: <SKIP>
Hole 9:
[SCond]: <SKIP>
Hole 10:
[SCond]: <SKIP>

Edit B:
Hole 1:
[SCond,SCond,SCond]: offsetRight += (mLegend.mTextWidthMax + mLegend.getXOffset()) * 2.0F;
Hole 2:
[SCond,SCond,SCond,SCond]: offsetLeft += (mLegend.mTextWidthMax + mLegend.getXOffset()) * 2.0F;
Hole 3:
[SCond,SCond,SCond,SCond,SCond]: offsetBottom += mLegend.mTextHeightMax * 3.0F;
Hole 4:
[SCond,SCond,SCond,SCond,SCond]: <SKIP>
Hole 5:
[SCond]: float xlabelheight = mXAxis.mLabelHeight * 2.0F;
Hole 6:
[SCond]: if (mXAxis.isEnabled())
{
  if (mXAxis.getPosition() == XAxisPosition.BOTTOM)
  {
    offsetBottom += xlabelheight;
  }
  else
    if (mXAxis.getPosition() == XAxisPosition.TOP)
    {
      offsetTop += xlabelheight;
    }
    else
      if (mXAxis.getPosition() == XAxisPosition.BOTH_SIDED)
      {
        offsetBottom += xlabelheight;
        offsetTop += xlabelheight;
      }
}
Hole 7:
[SCond]: offsetTop += getExtraTopOffset();
Hole 8:
[SCond]: offsetRight += getExtraRightOffset();
Hole 9:
[SCond]: offsetBottom += getExtraBottomOffset();
Hole 10:
[SCond]: offsetLeft += getExtraLeftOffset();

Edit M:
Hole 1:
[SCond,SCond,SCond]: offsetRight += (Math.min(mLegend.mNeededWidth, (mViewPortHandler.getChartWidth() * mLegend.getMaxSizePercent())) + mLegend.getXOffset()) * 2.0F;
Hole 2:
[SCond,SCond,SCond,SCond]: offsetLeft += (Math.min(mLegend.mNeededWidth, (mViewPortHandler.getChartWidth() * mLegend.getMaxSizePercent())) + mLegend.getXOffset()) * 2.0F;
Hole 3:
[SCond,SCond,SCond,SCond,SCond]: float yOffset = mLegend.mTextHeightMax * 2.0F;
Hole 4:
[SCond,SCond,SCond,SCond,SCond]: offsetBottom += Math.min((mLegend.mNeededHeight + yOffset), (mViewPortHandler.getChartHeight() * mLegend.getMaxSizePercent()));
Hole 5:
[SCond]: if (mXAxis.isEnabled() && mXAxis.isDrawLabelsEnabled())
{
  float xlabelheight = mXAxis.mLabelHeight * 2.0F;
  if (mXAxis.getPosition() == XAxisPosition.BOTTOM)
  {
    offsetBottom += xlabelheight;
  }
  else
    if (mXAxis.getPosition() == XAxisPosition.TOP)
    {
      offsetTop += xlabelheight;
    }
    else
      if (mXAxis.getPosition() == XAxisPosition.BOTH_SIDED)
      {
        offsetBottom += xlabelheight;
        offsetTop += xlabelheight;
      }
}
Hole 6:
[SCond]: offsetTop += getExtraTopOffset();
Hole 7:
[SCond]: offsetRight += getExtraRightOffset();
Hole 8:
[SCond]: offsetBottom += getExtraBottomOffset();
Hole 9:
[SCond]: offsetLeft += getExtraLeftOffset();
Hole 10:
[SCond]: <SKIP>

