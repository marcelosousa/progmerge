Merge Instance for method (Ident "FuzzyQueryBuilder",Ident "doXContent",[RefType (ClassRefType (ClassType [(Ident "XContentBuilder",[])])),RefType (ClassRefType (ClassType [(Ident "Params",[])]))])
@Override
 public void doXContent (XContentBuilder builder, Params params) throws IOException
{
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  builder.endObject();
}
Edit Base:
Hole 1:
[]: builder.startObject(FuzzyQueryParser.NAME);
Hole 2:
[]: if ((((boost == -1 && fuzziness) == null && prefixLength) == null && queryName) != null)
{
  builder.field(name, value);
}
else
{
  builder.startObject(name);
  builder.field("value", value);
  if (boost != -1)
  {
    builder.field("boost", boost);
  }
  if (transpositions != null)
  {
    builder.field("transpositions", transpositions);
  }
  if (fuzziness != null)
  {
    fuzziness.toXContent(builder, params);
  }
  if (prefixLength != null)
  {
    builder.field("prefix_length", prefixLength);
  }
  if (maxExpansions != null)
  {
    builder.field("max_expansions", maxExpansions);
  }
  if (rewrite != null)
  {
    builder.field("rewrite", rewrite);
  }
  if (queryName != null)
  {
    builder.field("_name", queryName);
  }
  builder.endObject();
}
Hole 3:
[]: <SKIP>
Hole 4:
[]: <SKIP>
Hole 5:
[]: <SKIP>
Hole 6:
[]: <SKIP>
Hole 7:
[]: <SKIP>
Hole 8:
[]: <SKIP>
Hole 9:
[]: <SKIP>
Hole 10:
[]: <SKIP>
Hole 11:
[]: <SKIP>

Edit A:
Hole 1:
[]: builder.startObject(NAME);
Hole 2:
[]: if ((((boost == -1 && fuzziness) == null && prefixLength) == null && queryName) != null)
{
  builder.field(name, value);
}
else
{
  builder.startObject(name);
  builder.field("value", value);
  if (boost != -1)
  {
    builder.field("boost", boost);
  }
  if (transpositions != null)
  {
    builder.field("transpositions", transpositions);
  }
  if (fuzziness != null)
  {
    fuzziness.toXContent(builder, params);
  }
  if (prefixLength != null)
  {
    builder.field("prefix_length", prefixLength);
  }
  if (maxExpansions != null)
  {
    builder.field("max_expansions", maxExpansions);
  }
  if (rewrite != null)
  {
    builder.field("rewrite", rewrite);
  }
  if (queryName != null)
  {
    builder.field("_name", queryName);
  }
  builder.endObject();
}
Hole 3:
[]: <SKIP>
Hole 4:
[]: <SKIP>
Hole 5:
[]: <SKIP>
Hole 6:
[]: <SKIP>
Hole 7:
[]: <SKIP>
Hole 8:
[]: <SKIP>
Hole 9:
[]: <SKIP>
Hole 10:
[]: <SKIP>
Hole 11:
[]: <SKIP>

Edit B:
Hole 1:
[]: builder.startObject(FuzzyQueryParser.NAME);
Hole 2:
[]: builder.startObject(name);
Hole 3:
[]: builder.field("value", value);
Hole 4:
[]: if (boost != -1)
{
  builder.field("boost", boost);
}
Hole 5:
[]: if (transpositions != null)
{
  builder.field("transpositions", transpositions);
}
Hole 6:
[]: if (fuzziness != null)
{
  fuzziness.toXContent(builder, params);
}
Hole 7:
[]: if (prefixLength != null)
{
  builder.field("prefix_length", prefixLength);
}
Hole 8:
[]: if (maxExpansions != null)
{
  builder.field("max_expansions", maxExpansions);
}
Hole 9:
[]: if (rewrite != null)
{
  builder.field("rewrite", rewrite);
}
Hole 10:
[]: if (queryName != null)
{
  builder.field("_name", queryName);
}
Hole 11:
[]: builder.endObject();

Edit M:
Hole 1:
[]: builder.startObject(NAME);
Hole 2:
[]: builder.startObject(name);
Hole 3:
[]: builder.field("value", value);
Hole 4:
[]: if (boost != -1)
{
  builder.field("boost", boost);
}
Hole 5:
[]: if (transpositions != null)
{
  builder.field("transpositions", transpositions);
}
Hole 6:
[]: if (fuzziness != null)
{
  fuzziness.toXContent(builder, params);
}
Hole 7:
[]: if (prefixLength != null)
{
  builder.field("prefix_length", prefixLength);
}
Hole 8:
[]: if (maxExpansions != null)
{
  builder.field("max_expansions", maxExpansions);
}
Hole 9:
[]: if (rewrite != null)
{
  builder.field("rewrite", rewrite);
}
Hole 10:
[]: if (queryName != null)
{
  builder.field("_name", queryName);
}
Hole 11:
[]: builder.endObject();

