Merge Instance for method (Ident "ParentFieldLoadingTest",Ident "testEagerParentFieldLoading",[])
@Test
 public void testEagerParentFieldLoading () throws Exception
{
  logger.info("testing lazy loading...");
  <?HOLE?>
  ensureGreen();
  client().prepareIndex("test", "parent", "1").setSource("{}").get();
  client().prepareIndex("test", "child", "1").setParent("1").setSource("{}").get();
  refresh();
  ClusterStatsResponse response = client().admin().cluster().prepareClusterStats().get();
  assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), equalTo(0L));
  logger.info("testing default loading...");
  assertAcked(client().admin().indices().prepareDelete("test").get());
  assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", "_parent", "type=parent"));
  ensureGreen();
  client().prepareIndex("test", "parent", "1").setSource("{}").get();
  client().prepareIndex("test", "child", "1").setParent("1").setSource("{}").get();
  refresh();
  response = client().admin().cluster().prepareClusterStats().get();
  <?HOLE?>
  <?HOLE?>
  logger.info("testing eager loading...");
  assertAcked(client().admin().indices().prepareDelete("test").get());
  <?HOLE?>
  ensureGreen();
  client().prepareIndex("test", "parent", "1").setSource("{}").get();
  client().prepareIndex("test", "child", "1").setParent("1").setSource("{}").get();
  refresh();
  response = client().admin().cluster().prepareClusterStats().get();
  <?HOLE?>
  logger.info("testing eager global ordinals loading...");
  assertAcked(client().admin().indices().prepareDelete("test").get());
  <?HOLE?>
  ensureGreen();
  client().prepareIndex("test", "parent", "1").setSource("{}").get();
  refresh();
  client().prepareIndex("test", "child", "1").setParent("1").setSource("{}").get();
  refresh();
  response = client().admin().cluster().prepareClusterStats().get();
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", childMapping(FieldMapper.Loading.LAZY)));
Hole 2:
[]: long fielddataSizeDefault = response.getIndicesStats().getFieldData().getMemorySizeInBytes();
Hole 3:
[]: assertThat(fielddataSizeDefault, greaterThan(0L));
Hole 4:
[]: assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", childMapping(FieldMapper.Loading.EAGER)));
Hole 5:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), equalTo(fielddataSizeDefault));
Hole 6:
[]: assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", childMapping(FieldMapper.Loading.EAGER_GLOBAL_ORDINALS)));
Hole 7:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), greaterThan(fielddataSizeDefault));

Edit A:
Hole 1:
[]: assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", childMapping(MappedFieldType.Loading.LAZY)));
Hole 2:
[]: long fielddataSizeDefault = response.getIndicesStats().getFieldData().getMemorySizeInBytes();
Hole 3:
[]: assertThat(fielddataSizeDefault, greaterThan(0L));
Hole 4:
[]: assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", childMapping(MappedFieldType.Loading.EAGER)));
Hole 5:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), equalTo(fielddataSizeDefault));
Hole 6:
[]: assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", childMapping(MappedFieldType.Loading.EAGER_GLOBAL_ORDINALS)));
Hole 7:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), greaterThan(fielddataSizeDefault));

Edit B:
Hole 1:
[]: assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", childMapping(FieldMapper.Loading.LAZY)));
Hole 2:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), equalTo(0L));
Hole 3:
[]: <SKIP>
Hole 4:
[]: assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", childMapping(FieldMapper.Loading.EAGER)));
Hole 5:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), equalTo(0L));
Hole 6:
[]: assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", childMapping(FieldMapper.Loading.EAGER_GLOBAL_ORDINALS)));
Hole 7:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), greaterThan(0L));

Edit M:
Hole 1:
[]: assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", childMapping(MappedFieldType.Loading.LAZY)));
Hole 2:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), equalTo(0L));
Hole 3:
[]: <SKIP>
Hole 4:
[]: assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", childMapping(MappedFieldType.Loading.EAGER)));
Hole 5:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), equalTo(0L));
Hole 6:
[]: assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", childMapping(MappedFieldType.Loading.EAGER_GLOBAL_ORDINALS)));
Hole 7:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), greaterThan(0L));

