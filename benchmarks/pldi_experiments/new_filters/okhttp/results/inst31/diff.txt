Merge Instance for method (Ident "GzipSource",Ident "consumeHeader",[RefType (ClassRefType (ClassType [(Ident "Deadline",[])]))])
private void consumeHeader (Deadline deadline) throws IOException
{
  require(10, deadline);
  <?HOLE?>
  boolean fhcrc = (flags >> FHCRC & 1) == 1;
  if (fhcrc)
    updateCrc(buffer, 0, 10);
  short id1id2 = buffer.readShort();
  checkEqual("ID1ID2", ((short) 8075), id1id2);
  buffer.skip(8);
  if ((flags >> FEXTRA & 1) == 1)
  {
    require(2, deadline);
    if (fhcrc)
      updateCrc(buffer, 0, 2);
    int xlen = buffer.readShortLe() & 65535;
    require(xlen, deadline);
    if (fhcrc)
      updateCrc(buffer, 0, xlen);
    buffer.skip(xlen);
  }
  if ((flags >> FNAME & 1) == 1)
  {
    <?HOLE?>
    if (fhcrc)
      updateCrc(buffer, 0, (index + 1));
    buffer.skip((index + 1));
  }
  if ((flags >> FCOMMENT & 1) == 1)
  {
    <?HOLE?>
    if (fhcrc)
      updateCrc(buffer, 0, (index + 1));
    buffer.skip((index + 1));
  }
  if (fhcrc)
  {
    checkEqual("FHCRC", buffer.readShortLe(), ((short) crc.getValue()));
    crc.reset();
  }
}
Edit Base:
Hole 1:
[]: byte flags = buffer.byteAt(3);
Hole 2:
[SCond]: long index = seek(((byte) 0), deadline);
Hole 3:
[SCond]: long index = seek(((byte) 0), deadline);

Edit A:
Hole 1:
[]: byte flags = buffer.getByte(3);
Hole 2:
[SCond]: long index = seek(((byte) 0), deadline);
Hole 3:
[SCond]: long index = seek(((byte) 0), deadline);

Edit B:
Hole 1:
[]: byte flags = buffer.byteAt(3);
Hole 2:
[SCond]: long index = OkBuffers.seek(buffer, ((byte) 0), source, deadline);
Hole 3:
[SCond]: long index = OkBuffers.seek(buffer, ((byte) 0), source, deadline);

Edit M:
Hole 1:
[]: byte flags = buffer.getByte(3);
Hole 2:
[SCond]: long index = OkBuffers.seek(buffer, ((byte) 0), source, deadline);
Hole 3:
[SCond]: long index = OkBuffers.seek(buffer, ((byte) 0), source, deadline);

