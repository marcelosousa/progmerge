Parsing files...
Parsing o...
Parsing a...
Parsing b...
Parsing m...
Merge Instance for method (Ident "KotlinBuilder",Ident "build",[RefType (ClassRefType (ClassType [(Ident "CompileContext",[])])),RefType (ClassRefType (ClassType [(Ident "ModuleChunk",[])])),RefType (ClassRefType (ClassType [(Ident "DirtyFilesHolder",[ActualType (ClassRefType (ClassType [(Ident "JavaSourceRootDescriptor",[])])),ActualType (ClassRefType (ClassType [(Ident "ModuleBuildTarget",[])]))])])),RefType (ClassRefType (ClassType [(Ident "OutputConsumer",[])]))])
@Override
 public ExitCode build (CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException
{
  MessageCollector messageCollector = new MessageCollectorAdapter(context);
  <?HOLE?>
  messageCollector.report(INFO, ("Kotlin JPS plugin version " + KotlinVersion.VERSION), CompilerMessageLocation.NO_LOCATION);
  if (chunk.getModules().size() > 1)
  {
    messageCollector.report(WARNING, ("Circular dependencies are not supported. " + "The following modules depend on each other: " + StringUtil.join(chunk.getModules(), MODULE_NAME, ", ") + ". " + "Kotlin is not compiled for these modules"), CompilerMessageLocation.NO_LOCATION);
    return ExitCode.NOTHING_DONE;
  }
  ModuleBuildTarget representativeTarget = chunk.representativeTarget();
  if (!dirtyFilesHolder.hasDirtyFiles())
  {
    return ExitCode.NOTHING_DONE;
  }
  List<File> sourceFiles = KotlinSourceFileCollector.getAllKotlinSourceFiles(representativeTarget);
  if (sourceFiles.isEmpty())
  {
    return ExitCode.NOTHING_DONE;
  }
  File outputDir = representativeTarget.getOutputDir();
  CompilerEnvironment environment = CompilerEnvironment.getEnvironmentFor(PathUtil.getKotlinPathsForJpsPluginOrJpsTests(), outputDir);
  if (!environment.success())
  {
    environment.reportErrorsTo(messageCollector);
    return ExitCode.ABORT;
  }
  assert outputDir != null :"CompilerEnvironment must have checked for outputDir to be not null, but it didn't";
  OutputItemsCollectorImpl outputItemCollector = new OutputItemsCollectorImpl(outputDir);
  <?HOLE?>
  for (SimpleOutputItem outputItem : outputItemCollector.getOutputs()) {
                                                                         outputConsumer.registerOutputFile(representativeTarget, outputItem.getOutputFile(), paths(outputItem.getSourceFiles()));
                                                                       }
  return ExitCode.OK;
}
Edit Base:
Hole 1:
[]: if (!isJavaPluginEnabled(context))
{
  messageCollector.report(INFO, "Kotlin JPS plugin is disabled", CompilerMessageLocation.NO_LOCATION);
  return ExitCode.NOTHING_DONE;
}
Hole 2:
[SCond]: if (isJsKotlinModule(representativeTarget))
{
  File outputFile = new File(outputDir, representativeTarget.getModule().getName() + ".js");
  KotlinCompilerRunner.runK2JsCompiler(messageCollector, environment, outputItemCollector, sourceFiles, getLibraryFilesAndDependencies(representativeTarget), outputFile);
}
else
{
  File moduleFile = KotlinBuilderModuleScriptGenerator.generateModuleDescription(context, representativeTarget, sourceFiles);
  KotlinCompilerRunner.runK2JvmCompiler(messageCollector, environment, moduleFile, outputItemCollector, false);
}

Edit A:
Hole 1:
[]: <SKIP>
Hole 2:
[SCond]: if (isJsKotlinModule(representativeTarget))
{
  File outputFile = new File(outputDir, representativeTarget.getModule().getName() + ".js");
  KotlinCompilerRunner.runK2JsCompiler(messageCollector, environment, outputItemCollector, sourceFiles, getLibraryFilesAndDependencies(representativeTarget), outputFile);
}
else
{
  File moduleFile = KotlinBuilderModuleScriptGenerator.generateModuleDescription(context, representativeTarget, sourceFiles);
  KotlinCompilerRunner.runK2JvmCompiler(messageCollector, environment, moduleFile, outputItemCollector, false);
}

Edit B:
Hole 1:
[]: if (!isJavaPluginEnabled(context))
{
  messageCollector.report(INFO, "Kotlin JPS plugin is disabled", CompilerMessageLocation.NO_LOCATION);
  return ExitCode.NOTHING_DONE;
}
Hole 2:
[SCond]: if (JpsUtils.isJsKotlinModule(representativeTarget))
{
  File outputFile = new File(outputDir, representativeTarget.getModule().getName() + ".js");
  KotlinCompilerRunner.runK2JsCompiler(messageCollector, environment, outputItemCollector, sourceFiles, JpsJsModuleUtils.getLibraryFilesAndDependencies(representativeTarget), outputFile);
}
else
{
  File moduleFile = KotlinBuilderModuleScriptGenerator.generateModuleDescription(context, representativeTarget, sourceFiles);
  KotlinCompilerRunner.runK2JvmCompiler(messageCollector, environment, moduleFile, outputItemCollector, false);
}

Edit M:
Hole 1:
[]: <SKIP>
Hole 2:
[]: if (JpsUtils.isJsKotlinModule(representativeTarget))
{
  File outputFile = new File(outputDir, representativeTarget.getModule().getName() + ".js");
  KotlinCompilerRunner.runK2JsCompiler(messageCollector, environment, outputItemCollector, sourceFiles, JpsJsModuleUtils.getLibraryFilesAndDependencies(representativeTarget), outputFile);
}
else
{
  File moduleFile = KotlinBuilderModuleScriptGenerator.generateModuleDescription(context, representativeTarget, sourceFiles);
  KotlinCompilerRunner.runK2JvmCompiler(messageCollector, environment, moduleFile, outputItemCollector, false);
}


