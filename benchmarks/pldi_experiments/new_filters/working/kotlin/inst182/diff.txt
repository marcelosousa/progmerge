Parsing files...
Parsing o...
Parsing a...
Parsing b...
Parsing m...
Merge Instance for method (Ident "DescriptorResolver",Ident "resolvePrimaryConstructorParameterToAProperty",[RefType (ClassRefType (ClassType [(Ident "ClassDescriptor",[])])),RefType (ClassRefType (ClassType [(Ident "JetScope",[])])),RefType (ClassRefType (ClassType [(Ident "JetParameter",[])]))])
@NotNull
 public PropertyDescriptor resolvePrimaryConstructorParameterToAProperty (@NotNull
                                                                         ClassDescriptor classDescriptor, @NotNull
                                                                                                          JetScope scope, @NotNull
                                                                                                                          JetParameter parameter)
{
  JetType type = resolveParameterType(scope, parameter);
  String name = parameter.getName();
  boolean isMutable = parameter.isMutable();
  JetModifierList modifierList = parameter.getModifierList();
  if (modifierList != null)
  {
    ASTNode abstractNode = modifierList.getModifierNode(JetTokens.ABSTRACT_KEYWORD);
    if (abstractNode != null)
    {
      trace.report(ABSTRACT_PROPERTY_IN_PRIMARY_CONSTRUCTOR_PARAMETERS.on(parameter, abstractNode));
    }
  }
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  JetType inType = isMutable ? type : null;
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  propertyDescriptor.initialize(getter, setter);
  getter.initialize(propertyDescriptor.getOutType());
  trace.record(BindingContext.PRIMARY_CONSTRUCTOR_PARAMETER, parameter, propertyDescriptor);
  return propertyDescriptor;
}
Edit Base:
Hole 1:
[]: PropertyDescriptor propertyDescriptor = new PropertyDescriptor(classDescriptor, annotationResolver.resolveAnnotations(scope, modifierList), resolveModalityFromModifiers(parameter.getModifierList(), Modality.FINAL), resolveVisibilityFromModifiers(parameter.getModifierList()), isMutable, DescriptorUtils.getExpectedThisObjectIfNeeded(classDescriptor), name == null ? "<no name>" : name);
Hole 2:
[]: PropertyGetterDescriptor getter = createDefaultGetter(propertyDescriptor);
Hole 3:
[]: PropertySetterDescriptor setter = createDefaultSetter(propertyDescriptor);
Hole 4:
[]: propertyDescriptor.setType(inType, type, Collections.<TypeParameterDescriptor>emptyList(), ReceiverDescriptor.NO_RECEIVER);
Hole 5:
[]: <SKIP>
Hole 6:
[]: <SKIP>

Edit A:
Hole 1:
[]: PropertyDescriptor propertyDescriptor = new PropertyDescriptor(classDescriptor, annotationResolver.resolveAnnotations(scope, modifierList), resolveModalityFromModifiers(parameter.getModifierList(), Modality.FINAL), resolveVisibilityFromModifiers(parameter.getModifierList()), isMutable, DescriptorUtils.getExpectedThisObjectIfNeeded(classDescriptor), name == null ? "<no name>" : name);
Hole 2:
[]: <SKIP>
Hole 3:
[]: <SKIP>
Hole 4:
[]: propertyDescriptor.setType(inType, type, Collections.<TypeParameterDescriptor>emptyList(), ReceiverDescriptor.NO_RECEIVER);
Hole 5:
[]: PropertyGetterDescriptor getter = createDefaultGetter(propertyDescriptor);
Hole 6:
[]: PropertySetterDescriptor setter = createDefaultSetter(propertyDescriptor);

Edit B:
Hole 1:
[]: PropertyDescriptor propertyDescriptor = new PropertyDescriptor(classDescriptor, annotationResolver.resolveAnnotations(scope, modifierList), resolveModalityFromModifiers(parameter.getModifierList(), Modality.FINAL), resolveVisibilityFromModifiers(parameter.getModifierList()), isMutable, name == null ? "<no name>" : name);
Hole 2:
[]: PropertyGetterDescriptor getter = createDefaultGetter(propertyDescriptor);
Hole 3:
[]: PropertySetterDescriptor setter = createDefaultSetter(propertyDescriptor);
Hole 4:
[]: propertyDescriptor.setType(inType, type, Collections.<TypeParameterDescriptor>emptyList(), DescriptorUtils.getExpectedThisObjectIfNeeded(classDescriptor), ReceiverDescriptor.NO_RECEIVER);
Hole 5:
[]: <SKIP>
Hole 6:
[]: <SKIP>

Edit M:
Hole 1:
[]: PropertyDescriptor propertyDescriptor = new PropertyDescriptor(classDescriptor, annotationResolver.resolveAnnotations(scope, modifierList), resolveModalityFromModifiers(parameter.getModifierList(), Modality.FINAL), resolveVisibilityFromModifiers(parameter.getModifierList()), isMutable, name == null ? "<no name>" : name);
Hole 2:
[]: <SKIP>
Hole 3:
[]: <SKIP>
Hole 4:
[]: propertyDescriptor.setType(inType, type, Collections.<TypeParameterDescriptor>emptyList(), ReceiverDescriptor.NO_RECEIVER);
Hole 5:
[]: PropertyGetterDescriptor getter = createDefaultGetter(propertyDescriptor);
Hole 6:
[]: PropertySetterDescriptor setter = createDefaultSetter(propertyDescriptor);


