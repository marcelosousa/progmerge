Parsing files...
Parsing o...
Parsing a...
Parsing b...
Parsing m...
Merge Instance for method (Ident "JetChangeSignatureUsageProcessor",Ident "findSAMUsages",[RefType (ClassRefType (ClassType [(Ident "ChangeInfo",[])])),RefType (ClassRefType (ClassType [(Ident "Set",[ActualType (ClassRefType (ClassType [(Ident "UsageInfo",[])]))])]))])
private static void findSAMUsages (ChangeInfo changeInfo, Set<UsageInfo> result)
{
  PsiElement method = changeInfo.getMethod();
  <?HOLE?>
  if (((PsiMethod) method).getContainingClass() == null)
    return;
  FunctionDescriptor methodDescriptor = JavaResolutionUtils.getJavaMethodDescriptor(((PsiMethod) method));
  assert methodDescriptor != null;
  DeclarationDescriptor containingDescriptor = methodDescriptor.getContainingDeclaration();
  if (!(containingDescriptor instanceof JavaClassDescriptor))
    return;
  if (((JavaClassDescriptor) containingDescriptor).getFunctionTypeForSamInterface() == null)
    return;
  PsiClass samClass = ((PsiMethod) method).getContainingClass();
  if (samClass == null)
    return;
  for (PsiReference ref : ReferencesSearch.search(samClass)) {
                                                               if (!(ref instanceof JetSimpleNameReference))
                                                                 continue;
                                                               JetSimpleNameExpression callee = ((JetSimpleNameReference) ref).getExpression();
                                                               JetCallExpression callExpression = PsiTreeUtil.getParentOfType(callee, JetCallExpression.class);
                                                               if ((callExpression == null || callExpression.getCalleeExpression()) != callee)
                                                                 continue;
                                                               List<? extends ValueArgument> arguments = callExpression.getValueArguments();
                                                               if (arguments.size() != 1)
                                                                 continue;
                                                               JetExpression argExpression = arguments.get(0).getArgumentExpression();
                                                               if (!(argExpression instanceof JetFunctionLiteralExpression))
                                                                 continue;
                                                               BindingContext context = ResolutionUtils.analyze(callExpression, BodyResolveMode.FULL);
                                                               JetFunctionLiteral functionLiteral = ((JetFunctionLiteralExpression) argExpression).getFunctionLiteral();
                                                               FunctionDescriptor functionDescriptor = context.get(BindingContext.FUNCTION, functionLiteral);
                                                               assert functionDescriptor != null :"No descriptor for " + functionLiteral.getText();
                                                               JetType samCallType = context.getType(callExpression);
                                                               if (samCallType == null)
                                                                 continue;
                                                               <?HOLE?>
                                                             }
}
Edit Base:
Hole 1:
[SCond]: if (!RefactoringPackage.isTrueJavaMethod(method))
  return;
Hole 2:
[SLoop]: result.add(new DeferredJavaMethodOverrideOrSAMUsage(functionLiteral, functionDescriptor, samCallType));

Edit A:
Hole 1:
[SCond]: if (!RefactoringPackage.isTrueJavaMethod(method))
  return;
Hole 2:
[SLoop]: result.add(new DeferredSAMUsage(functionLiteral, functionDescriptor, samCallType));

Edit B:
Hole 1:
[SCond]: if (!JetRefactoringUtilKt.isTrueJavaMethod(method))
  return;
Hole 2:
[SLoop]: result.add(new DeferredJavaMethodOverrideOrSAMUsage(functionLiteral, functionDescriptor, samCallType));

Edit M:
Hole 1:
[]: if (!JetRefactoringUtilKt.isTrueJavaMethod(method))
  return;
Hole 2:
[SLoop]: result.add(new DeferredSAMUsage(functionLiteral, functionDescriptor, samCallType));


