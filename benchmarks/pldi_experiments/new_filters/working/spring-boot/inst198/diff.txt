Parsing files...
Parsing o...
Parsing a...
Parsing b...
Parsing m...
Merge Instance for method (Ident "OnBeanCondition",Ident "getMatchOutcome",[RefType (ClassRefType (ClassType [(Ident "ConditionContext",[])])),RefType (ClassRefType (ClassType [(Ident "AnnotatedTypeMetadata",[])]))])
@Override
 public ConditionOutcome getMatchOutcome (ConditionContext context, AnnotatedTypeMetadata metadata)
{
  <?HOLE?>
  if (metadata.isAnnotated(ConditionalOnBean.class.getName()))
  {
    BeanSearchSpec spec = new BeanSearchSpec(context, metadata, ConditionalOnBean.class);
    List<String> matching = getMatchingBeans(context, spec);
    if (matching.isEmpty())
    {
      return ConditionOutcome.noMatch(("@ConditionalOnBean " + spec + " found no beans"));
    }
    <?HOLE?>
  }
  if (metadata.isAnnotated(ConditionalOnSingleCandidate.class.getName()))
  {
    BeanSearchSpec spec = new SingleCandidateBeanSearchSpec(context, metadata, ConditionalOnSingleCandidate.class);
    List<String> matching = getMatchingBeans(context, spec);
    if (matching.isEmpty())
    {
      return ConditionOutcome.noMatch(("@ConditionalOnSingleCandidate " + spec + " found no beans"));
    }
    else
      <?HOLE?>
    <?HOLE?>
  }
  if (metadata.isAnnotated(ConditionalOnMissingBean.class.getName()))
  {
    BeanSearchSpec spec = new BeanSearchSpec(context, metadata, ConditionalOnMissingBean.class);
    List<String> matching = getMatchingBeans(context, spec);
    if (!matching.isEmpty())
    {
      return ConditionOutcome.noMatch(("@ConditionalOnMissingBean " + spec + " found the following " + matching));
    }
    matchMessage.append((matchMessage.length() == 0 ? "" : " "));
    <?HOLE?>
  }
  return ConditionOutcome.match(matchMessage.toString());
}
Edit Base:
Hole 1:
[]: StringBuffer matchMessage = new StringBuffer();
Hole 2:
[SCond]: matchMessage.append(("@ConditionalOnBean " + spec + " found the following " + matching));
Hole 3:
[SCond,SCond,SCond]: if (!hasSingleAutowireCandidate(context.getBeanFactory(), matching))
{
  return ConditionOutcome.noMatch(("@ConditionalOnSingleCandidate " + spec + " found no primary candidate amongst the" + " following " + matching));
}
Hole 4:
[SCond]: matchMessage.append(("@ConditionalOnSingleCandidate " + spec + " found " + "a primary candidate amongst the following " + matching));
Hole 5:
[SCond]: matchMessage.append(("@ConditionalOnMissingBean " + spec + " found no beans"));

Edit A:
Hole 1:
[]: StringBuilder matchMessage = new StringBuilder();
Hole 2:
[SCond]: matchMessage.append("@ConditionalOnBean ").append(spec).append(" found the following ").append(matching);
Hole 3:
[SCond,SCond,SCond]: if (!hasSingleAutowireCandidate(context.getBeanFactory(), matching))
{
  return ConditionOutcome.noMatch(("@ConditionalOnSingleCandidate " + spec + " found no primary candidate amongst the" + " following " + matching));
}
Hole 4:
[SCond]: matchMessage.append("@ConditionalOnSingleCandidate ").append(spec).append(" found a primary candidate amongst the following ").append(matching);
Hole 5:
[SCond]: matchMessage.append("@ConditionalOnMissingBean ").append(spec).append(" found no beans");

Edit B:
Hole 1:
[]: StringBuffer matchMessage = new StringBuffer();
Hole 2:
[SCond]: matchMessage.append(("@ConditionalOnBean " + spec + " found the following " + matching));
Hole 3:
[SCond,SCond,SCond]: if (!hasSingleAutowireCandidate(context.getBeanFactory(), matching, (spec.getStrategy() == SearchStrategy.ALL)))
{
  return ConditionOutcome.noMatch(("@ConditionalOnSingleCandidate " + spec + " found no primary candidate amongst the" + " following " + matching));
}
Hole 4:
[SCond]: matchMessage.append(("@ConditionalOnSingleCandidate " + spec + " found " + "a primary candidate amongst the following " + matching));
Hole 5:
[SCond]: matchMessage.append(("@ConditionalOnMissingBean " + spec + " found no beans"));

Edit M:
Hole 1:
[]: StringBuilder matchMessage = new StringBuilder();
Hole 2:
[SCond]: matchMessage.append("@ConditionalOnBean ").append(spec).append(" found the following ").append(matching);
Hole 3:
[SCond,SCond]: if (!hasSingleAutowireCandidate(context.getBeanFactory(), matching, (spec.getStrategy() == SearchStrategy.ALL)))
{
  return ConditionOutcome.noMatch(("@ConditionalOnSingleCandidate " + spec + " found no primary candidate amongst the" + " following " + matching));
}
Hole 4:
[SCond]: matchMessage.append("@ConditionalOnSingleCandidate ").append(spec).append(" found a primary candidate amongst the following ").append(matching);
Hole 5:
[SCond]: matchMessage.append("@ConditionalOnMissingBean ").append(spec).append(" found no beans");


