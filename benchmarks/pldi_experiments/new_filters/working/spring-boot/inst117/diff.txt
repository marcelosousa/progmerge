Parsing files...
Parsing o...
Parsing a...
Parsing b...
Parsing m...
Merge Instance for method (Ident "SpringBootContextLoader",Ident "getInitializers",[RefType (ClassRefType (ClassType [(Ident "MergedContextConfiguration",[])])),RefType (ClassRefType (ClassType [(Ident "SpringApplication",[])]))])
private List<ApplicationContextInitializer<?>> getInitializers (MergedContextConfiguration config, SpringApplication application)
{
  List<ApplicationContextInitializer<?>> initializers = new ArrayList<ApplicationContextInitializer<?>>();
  for (ContextCustomizer contextCustomizer : config.getContextCustomizers()) {
                                                                               initializers.add(new ContextCustomizerAdapter(contextCustomizer, config));
                                                                             }
  initializers.addAll(application.getInitializers());
  for (Class<? extends ApplicationContextInitializer<?>> initializerClass : config.getContextInitializerClasses()) {
                                                                                                                     <?HOLE?>
                                                                                                                   }
  <?HOLE?>
  return initializers;
}
Edit Base:
Hole 1:
[SLoop]: initializers.add(BeanUtils.instantiate(initializerClass));
Hole 2:
[]: <SKIP>

Edit A:
Hole 1:
[SLoop]: initializers.add(BeanUtils.instantiateClass(initializerClass));
Hole 2:
[]: <SKIP>

Edit B:
Hole 1:
[SLoop]: initializers.add(BeanUtils.instantiate(initializerClass));
Hole 2:
[]: if (config.getParent() != null)
{
  initializers.add(new ParentContextApplicationContextInitializer(config.getParentApplicationContext()));
}

Edit M:
Hole 1:
[SLoop]: initializers.add(BeanUtils.instantiateClass(initializerClass));
Hole 2:
[]: if (config.getParent() != null)
{
  initializers.add(new ParentContextApplicationContextInitializer(config.getParentApplicationContext()));
}


