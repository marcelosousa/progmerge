Merge Instance for method (Ident "KotlinBuilder",Ident "build",[RefType (ClassRefType (ClassType [(Ident "CompileContext",[])])),RefType (ClassRefType (ClassType [(Ident "ModuleChunk",[])])),RefType (ClassRefType (ClassType [(Ident "DirtyFilesHolder",[ActualType (ClassRefType (ClassType [(Ident "JavaSourceRootDescriptor",[])])),ActualType (ClassRefType (ClassType [(Ident "ModuleBuildTarget",[])]))])])),RefType (ClassRefType (ClassType [(Ident "OutputConsumer",[])]))])
@Override
 public ExitCode build (CompileContext context, ModuleChunk chunk, DirtyFilesHolder<JavaSourceRootDescriptor, ModuleBuildTarget> dirtyFilesHolder, OutputConsumer outputConsumer) throws ProjectBuildException, IOException
{
  MessageCollector messageCollector = new MessageCollectorAdapter(context);
  <?HOLE?>
  <?HOLE?>
  ModuleBuildTarget representativeTarget = chunk.representativeTarget();
  if (!dirtyFilesHolder.hasDirtyFiles() && !dirtyFilesHolder.hasRemovedFiles())
  {
    return ExitCode.NOTHING_DONE;
  }
  File outputDir = representativeTarget.getOutputDir();
  CompilerEnvironment environment = CompilerEnvironment.getEnvironmentFor(PathUtil.getKotlinPathsForJpsPluginOrJpsTests(), outputDir);
  if (!environment.success())
  {
    if (!hasKotlinFiles(chunk))
    {
      return ExitCode.NOTHING_DONE;
    }
    environment.reportErrorsTo(messageCollector);
    return ExitCode.ABORT;
  }
  assert outputDir != null :"CompilerEnvironment must have checked for outputDir to be not null, but it didn't";
  OutputItemsCollectorImpl outputItemCollector = new OutputItemsCollectorImpl();
  JpsProject project = representativeTarget.getModule().getProject();
  CommonCompilerArguments commonArguments = JpsKotlinCompilerSettings.getCommonCompilerArguments(project);
  CompilerSettings compilerSettings = JpsKotlinCompilerSettings.getCompilerSettings(project);
  if (JpsUtils.isJsKotlinModule(representativeTarget))
  {
    if (chunk.getModules().size() > 1)
    {
      <?HOLE?>
      return ExitCode.NOTHING_DONE;
    }
    List<File> sourceFiles = KotlinSourceFileCollector.getAllKotlinSourceFiles(representativeTarget);
    if (sourceFiles.isEmpty())
    {
      return ExitCode.NOTHING_DONE;
    }
    File outputFile = new File(outputDir, representativeTarget.getModule().getName() + ".js");
    List<String> libraryFiles = JpsJsModuleUtils.getLibraryFilesAndDependencies(representativeTarget);
    K2JSCompilerArguments k2JsArguments = JpsKotlinCompilerSettings.getK2JsCompilerArguments(project);
    runK2JsCompiler(commonArguments, k2JsArguments, compilerSettings, messageCollector, environment, outputItemCollector, sourceFiles, libraryFiles, outputFile);
  }
  else
  {
    if (chunk.getModules().size() > 1)
    {
      <?HOLE?>
    }
    File moduleFile = KotlinBuilderModuleScriptGenerator.generateModuleDescription(context, chunk);
    if (moduleFile == null)
    {
      return ExitCode.NOTHING_DONE;
    }
    K2JVMCompilerArguments k2JvmArguments = JpsKotlinCompilerSettings.getK2JvmCompilerArguments(project);
    runK2JvmCompiler(commonArguments, k2JvmArguments, compilerSettings, messageCollector, environment, moduleFile, outputItemCollector);
  }
  Map<File, BuildTarget<?>> sourceToTarget = new HashMap<File, BuildTarget<?>>();
  if (chunk.getTargets().size() > 1)
  {
    for (ModuleBuildTarget target : chunk.getTargets()) {
                                                          for (File file : KotlinSourceFileCollector.getAllKotlinSourceFiles(target)) {
                                                                                                                                        sourceToTarget.put(file, target);
                                                                                                                                      }
                                                        }
  }
  for (SimpleOutputItem outputItem : outputItemCollector.getOutputs()) {
                                                                         <?HOLE?>
                                                                         <?HOLE?>
                                                                         <?HOLE?>
                                                                         <?HOLE?>
                                                                       }
  return ExitCode.OK;
}
Edit Base:
Hole 1:
[]: if (!isJavaPluginEnabled(context))
{
  messageCollector.report(INFO, "Kotlin JPS plugin is disabled", CompilerMessageLocation.NO_LOCATION);
  return ExitCode.NOTHING_DONE;
}
Hole 2:
[]: messageCollector.report(INFO, ("Kotlin JPS plugin version " + KotlinVersion.VERSION), CompilerMessageLocation.NO_LOCATION);
Hole 3:
[SCond,SCond]: messageCollector.report(WARNING, ("Circular dependencies are not supported. " + "The following JS modules depend on each other: " + StringUtil.join(chunk.getModules(), MODULE_NAME, ", ") + ". " + "Kotlin is not compiled for these modules"), CompilerMessageLocation.NO_LOCATION);
Hole 4:
[SCond,SCond]: messageCollector.report(WARNING, ("Circular dependencies are only partially supported. " + "The following modules depend on each other: " + StringUtil.join(chunk.getModules(), MODULE_NAME, ", ") + ". " + "Kotlin will compile them, but some strange effect may happen"), CompilerMessageLocation.NO_LOCATION);
Hole 5:
[SLoop]: BuildTarget<?> target = sourceToTarget.get(outputItem.getSourceFiles().iterator().next());
Hole 6:
[SLoop]: outputConsumer.registerOutputFile((target != null ? target : representativeTarget), outputItem.getOutputFile(), paths(outputItem.getSourceFiles()));
Hole 7:
[SLoop]: <SKIP>
Hole 8:
[SLoop]: <SKIP>

Edit A:
Hole 1:
[]: <SKIP>
Hole 2:
[]: messageCollector.report(INFO, ("Kotlin JPS plugin version " + KotlinVersion.VERSION), CompilerMessageLocation.NO_LOCATION);
Hole 3:
[SCond,SCond]: messageCollector.report(WARNING, ("Circular dependencies are not supported. " + "The following JS modules depend on each other: " + StringUtil.join(chunk.getModules(), MODULE_NAME, ", ") + ". " + "Kotlin is not compiled for these modules"), CompilerMessageLocation.NO_LOCATION);
Hole 4:
[SCond,SCond]: messageCollector.report(WARNING, ("Circular dependencies are only partially supported. " + "The following modules depend on each other: " + StringUtil.join(chunk.getModules(), MODULE_NAME, ", ") + ". " + "Kotlin will compile them, but some strange effect may happen"), CompilerMessageLocation.NO_LOCATION);
Hole 5:
[SLoop]: BuildTarget<?> target = sourceToTarget.get(outputItem.getSourceFiles().iterator().next());
Hole 6:
[SLoop]: outputConsumer.registerOutputFile((target != null ? target : representativeTarget), outputItem.getOutputFile(), paths(outputItem.getSourceFiles()));
Hole 7:
[SLoop]: <SKIP>
Hole 8:
[SLoop]: <SKIP>

Edit B:
Hole 1:
[]: if (!isJavaPluginEnabled(context))
{
  messageCollector.report(INFO, "Kotlin JPS plugin is disabled", NO_LOCATION);
  return ExitCode.NOTHING_DONE;
}
Hole 2:
[]: messageCollector.report(INFO, ("Kotlin JPS plugin version " + KotlinVersion.VERSION), NO_LOCATION);
Hole 3:
[SCond,SCond]: messageCollector.report(WARNING, ("Circular dependencies are not supported. " + "The following JS modules depend on each other: " + StringUtil.join(chunk.getModules(), MODULE_NAME, ", ") + ". " + "Kotlin is not compiled for these modules"), NO_LOCATION);
Hole 4:
[SCond,SCond]: messageCollector.report(WARNING, ("Circular dependencies are only partially supported. " + "The following modules depend on each other: " + StringUtil.join(chunk.getModules(), MODULE_NAME, ", ") + ". " + "Kotlin will compile them, but some strange effect may happen"), NO_LOCATION);
Hole 5:
[SLoop]: BuildTarget<?> target = null;
Hole 6:
[SLoop]: Collection<File> sourceFiles = outputItem.getSourceFiles();
Hole 7:
[SLoop]: if (sourceFiles != null && !sourceFiles.isEmpty())
{
  target = sourceToTarget.get(sourceFiles.iterator().next());
}
else
{
  messageCollector.report(EXCEPTION, ("KotlinBuilder: outputItem.sourceFiles is null or empty, outputItem = " + outputItem), NO_LOCATION);
}
Hole 8:
[SLoop]: outputConsumer.registerOutputFile((target != null ? target : representativeTarget), outputItem.getOutputFile(), paths(sourceFiles));

Edit M:
Hole 1:
[]: messageCollector.report(INFO, ("Kotlin JPS plugin version " + KotlinVersion.VERSION), CompilerMessageLocation.NO_LOCATION);
Hole 2:
[]: <SKIP>
Hole 3:
[SCond,SCond]: messageCollector.report(WARNING, ("Circular dependencies are not supported. " + "The following JS modules depend on each other: " + StringUtil.join(chunk.getModules(), MODULE_NAME, ", ") + ". " + "Kotlin is not compiled for these modules"), NO_LOCATION);
Hole 4:
[SCond,SCond]: messageCollector.report(WARNING, ("Circular dependencies are only partially supported. " + "The following modules depend on each other: " + StringUtil.join(chunk.getModules(), MODULE_NAME, ", ") + ". " + "Kotlin will compile them, but some strange effect may happen"), NO_LOCATION);
Hole 5:
[SLoop]: BuildTarget<?> target = null;
Hole 6:
[SLoop]: Collection<File> sourceFiles = outputItem.getSourceFiles();
Hole 7:
[SLoop]: if (sourceFiles != null && !sourceFiles.isEmpty())
{
  target = sourceToTarget.get(sourceFiles.iterator().next());
}
else
{
  messageCollector.report(EXCEPTION, ("KotlinBuilder: outputItem.sourceFiles is null or empty, outputItem = " + outputItem), NO_LOCATION);
}
Hole 8:
[SLoop]: outputConsumer.registerOutputFile((target != null ? target : representativeTarget), outputItem.getOutputFile(), paths(sourceFiles));

