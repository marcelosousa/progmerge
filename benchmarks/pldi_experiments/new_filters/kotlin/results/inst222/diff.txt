Merge Instance for method (Ident "TopDownAnalyzer",Ident "resolveAnonymousInitializers",[RefType (ClassRefType (ClassType [(Ident "JetClassOrObject",[])])),RefType (ClassRefType (ClassType [(Ident "MutableClassDescriptor",[])]))])
private void resolveAnonymousInitializers (JetClassOrObject jetClassOrObject, MutableClassDescriptor classDescriptor)
{
  List<JetClassInitializer> anonymousInitializers = jetClassOrObject.getAnonymousInitializers();
  if (jetClassOrObject.hasPrimaryConstructor())
  {
    ConstructorDescriptor primaryConstructor = classDescriptor.getUnsubstitutedPrimaryConstructor();
    assert primaryConstructor != null;
    final JetScope scopeForConstructor = getInnerScopeForConstructor(primaryConstructor, classDescriptor.getScopeForMemberResolution(), true);
    <?HOLE?>
    for (JetClassInitializer anonymousInitializer : anonymousInitializers) {
                                                                             <?HOLE?>
                                                                           }
  }
  else
  {
    for (JetClassInitializer anonymousInitializer : anonymousInitializers) {
                                                                             trace.getErrorHandler().genericError(anonymousInitializer.getNode(), "Anonymous initializers are only allowed in the presence of a primary constructor");
                                                                           }
  }
}
Edit Base:
Hole 1:
[SCond]: JetTypeInferrer.Services typeInferrer = semanticServices.getTypeInferrerServices(traceForConstructors, JetFlowInformationProvider.NONE);
Hole 2:
[SLoop,SCond]: typeInferrer.getType(scopeForConstructor, anonymousInitializer.getBody(), true, JetTypeInferrer.NO_EXPECTED_TYPE);

Edit A:
Hole 1:
[SCond]: JetTypeInferrer.Services typeInferrer = semanticServices.getTypeInferrerServices(traceForConstructors, JetFlowInformationProvider.NONE);
Hole 2:
[SLoop,SCond]: typeInferrer.getType(scopeForConstructor, anonymousInitializer.getBody(), NO_EXPECTED_TYPE);

Edit B:
Hole 1:
[SCond]: JetTypeInferrer.Services typeInferrer = semanticServices.getTypeInferrerServices(createFieldAssignTrackingTrace(), JetFlowInformationProvider.NONE);
Hole 2:
[SLoop,SCond]: typeInferrer.getType(scopeForConstructor, anonymousInitializer.getBody(), true, JetTypeInferrer.NO_EXPECTED_TYPE);

Edit M:
Hole 1:
[SCond]: JetTypeInferrer.Services typeInferrer = semanticServices.getTypeInferrerServices(createFieldAssignTrackingTrace(), JetFlowInformationProvider.NONE);
Hole 2:
[SLoop,SCond]: typeInferrer.getType(scopeForConstructor, anonymousInitializer.getBody(), NO_EXPECTED_TYPE);

