Merge Instance for method (Ident "BodyResolver",Ident "resolveAnonymousInitializers",[RefType (ClassRefType (ClassType [(Ident "JetClassOrObject",[])])),RefType (ClassRefType (ClassType [(Ident "MutableClassDescriptor",[])]))])
private void resolveAnonymousInitializers (JetClassOrObject jetClassOrObject, MutableClassDescriptor classDescriptor)
{
  <?HOLE?>
  List<JetClassInitializer> anonymousInitializers = jetClassOrObject.getAnonymousInitializers();
  if (jetClassOrObject.hasPrimaryConstructor())
  {
    ConstructorDescriptor primaryConstructor = classDescriptor.getUnsubstitutedPrimaryConstructor();
    assert primaryConstructor != null;
    final JetScope scopeForConstructor = getInnerScopeForConstructor(primaryConstructor, classDescriptor.getScopeForMemberResolution(), true);
    <?HOLE?>
    for (JetClassInitializer anonymousInitializer : anonymousInitializers) {
                                                                             typeInferrer.getType(scopeForConstructor, anonymousInitializer.getBody(), NO_EXPECTED_TYPE);
                                                                           }
  }
  else
  {
    for (JetClassInitializer anonymousInitializer : anonymousInitializers) {
                                                                             context.getTrace().report(ANONYMOUS_INITIALIZER_WITHOUT_CONSTRUCTOR.on(anonymousInitializer));
                                                                           }
  }
}
Edit Base:
Hole 1:
[]: <SKIP>
Hole 2:
[SCond]: ExpressionTypingServices typeInferrer = context.getSemanticServices().getTypeInferrerServices(createFieldAssignTrackingTrace());

Edit A:
Hole 1:
[]: <SKIP>
Hole 2:
[SCond]: ExpressionTypingServices typeInferrer = context.getSemanticServices().getTypeInferrerServices(traceForConstructors);

Edit B:
Hole 1:
[]: if (!context.completeAnalysisNeeded(jetClassOrObject))
  return;
Hole 2:
[SCond]: ExpressionTypingServices typeInferrer = context.getSemanticServices().getTypeInferrerServices(createFieldAssignTrackingTrace());

Edit M:
Hole 1:
[]: if (!context.completeAnalysisNeeded(jetClassOrObject))
  return;
Hole 2:
[SCond]: ExpressionTypingServices typeInferrer = context.getSemanticServices().getTypeInferrerServices(traceForConstructors);

