Merge Instance for method (Ident "HexagonalTiledMapRenderer",Ident "renderTileLayer",[RefType (ClassRefType (ClassType [(Ident "TiledMapTileLayer",[])]))])
@Override
 public void renderTileLayer (TiledMapTileLayer layer)
{
  final Color batchColor = batch.getColor();
  final float color = Color.toFloatBits(batchColor.r, batchColor.g, batchColor.b, (batchColor.a * layer.getOpacity()));
  final int layerWidth = layer.getWidth();
  final int layerHeight = layer.getHeight();
  final float layerTileWidth = layer.getTileWidth() * unitScale;
  final float layerTileHeight = layer.getTileHeight() * unitScale;
  <?HOLE?>
  <?HOLE?>
  final float layerHexLength = hexSideLength * unitScale;
  if (staggerAxisX)
  {
    final float tileWidthLowerCorner = (layerTileWidth - layerHexLength) / 2;
    final float tileWidthUpperCorner = (layerTileWidth + layerHexLength) / 2;
    final float layerTileHeight50 = layerTileHeight * 0.5F;
    <?HOLE?>
    <?HOLE?>
    <?HOLE?>
    <?HOLE?>
    final int colA = staggerIndexEven == col1 % 2 == 0 ? col1 + 1 : col1;
    final int colB = staggerIndexEven == col1 % 2 == 0 ? col1 : col1 + 1;
    for (int row = row2 - 1 ; row >= row1 ; row--)
    {
      for (int col = colA ; col < col2 ; col += 2)
      {
        <?HOLE?>
      }
      for (int col = colB ; col < col2 ; col += 2)
      {
        <?HOLE?>
      }
    }
  }
  else
  {
    final float tileHeightLowerCorner = (layerTileHeight - layerHexLength) / 2;
    final float tileHeightUpperCorner = (layerTileHeight + layerHexLength) / 2;
    final float layerTileWidth50 = layerTileWidth * 0.5F;
    <?HOLE?>
    <?HOLE?>
    <?HOLE?>
    <?HOLE?>
    float shiftX = 0;
    for (int row = row2 - 1 ; row >= row1 ; row--)
    {
      if (row % 2 == 0 == staggerIndexEven)
        <?HOLE?>
      else
        <?HOLE?>
      for (int col = col1 ; col < col2 ; col++)
      {
        <?HOLE?>
      }
    }
  }
}
Edit Base:
Hole 1:
[]: <SKIP>
Hole 2:
[]: <SKIP>
Hole 3:
[SCond]: final int row1 = Math.max(0, ((int) ((viewBounds.y - layerTileHeight50) / layerTileHeight)));
Hole 4:
[SCond]: final int row2 = Math.min(layerHeight, ((int) ((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight)));
Hole 5:
[SCond]: final int col1 = Math.max(0, ((int) ((viewBounds.x - tileWidthLowerCorner) / tileWidthUpperCorner)));
Hole 6:
[SCond]: final int col2 = Math.min(layerWidth, ((int) ((viewBounds.x + viewBounds.width + tileWidthUpperCorner) / tileWidthUpperCorner)));
Hole 7:
[SLoop,SLoop,SCond]: renderCell(layer.getCell(col, row), (tileWidthUpperCorner * col), (layerTileHeight50 + layerTileHeight * row), color);
Hole 8:
[SLoop,SLoop,SCond]: renderCell(layer.getCell(col, row), (tileWidthUpperCorner * col), (layerTileHeight * row), color);
Hole 9:
[SCond]: final int row1 = Math.max(0, ((int) ((viewBounds.y - tileHeightLowerCorner) / tileHeightUpperCorner)));
Hole 10:
[SCond]: final int row2 = Math.min(layerHeight, ((int) ((viewBounds.y + viewBounds.height + tileHeightUpperCorner) / tileHeightUpperCorner)));
Hole 11:
[SCond]: final int col1 = Math.max(0, ((int) ((viewBounds.x - layerTileWidth50) / layerTileWidth)));
Hole 12:
[SCond]: final int col2 = Math.min(layerWidth, ((int) ((viewBounds.x + viewBounds.width + layerTileWidth) / layerTileWidth)));
Hole 13:
[SCond,SLoop,SCond]: shiftX = 0;
Hole 14:
[SCond,SLoop,SCond]: shiftX = layerTileWidth50;
Hole 15:
[SLoop,SLoop,SCond]: renderCell(layer.getCell(col, row), (layerTileWidth * col + shiftX), (tileHeightUpperCorner * row), color);

Edit A:
Hole 1:
[]: <SKIP>
Hole 2:
[]: <SKIP>
Hole 3:
[SCond]: final int row1 = Math.max(0, ((int) ((viewBounds.y - layerTileHeight50) / layerTileHeight)));
Hole 4:
[SCond]: final int row2 = Math.min(layerHeight, ((int) ((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight)));
Hole 5:
[SCond]: final int col1 = Math.max(0, ((int) ((viewBounds.x - tileWidthLowerCorner) / tileWidthUpperCorner)));
Hole 6:
[SCond]: final int col2 = Math.min(layerWidth, ((int) ((viewBounds.x + viewBounds.width + tileWidthUpperCorner) / tileWidthUpperCorner)));
Hole 7:
[SLoop,SLoop,SCond]: renderCell(layer.getCell(col, row), (tileWidthUpperCorner * col), (layerTileHeight50 + layerTileHeight * row), color);
Hole 8:
[SLoop,SLoop,SCond]: renderCell(layer.getCell(col, row), (tileWidthUpperCorner * col), (layerTileHeight * row), color);
Hole 9:
[SCond]: final int row1 = Math.max(0, ((int) ((viewBounds.y - tileHeightLowerCorner) / tileHeightUpperCorner)));
Hole 10:
[SCond]: final int row2 = Math.min(layerHeight, ((int) ((viewBounds.y + viewBounds.height + tileHeightUpperCorner) / tileHeightUpperCorner)));
Hole 11:
[SCond]: final int col1 = Math.max(0, ((int) ((viewBounds.x - layerTileWidth50) / layerTileWidth)));
Hole 12:
[SCond]: final int col2 = Math.min(layerWidth, ((int) ((viewBounds.x + viewBounds.width + layerTileWidth) / layerTileWidth)));
Hole 13:
[SCond,SLoop,SCond]: shiftX = layerTileWidth50;
Hole 14:
[SCond,SLoop,SCond]: shiftX = 0;
Hole 15:
[SLoop,SLoop,SCond]: renderCell(layer.getCell(col, row), (layerTileWidth * col + shiftX), (tileHeightUpperCorner * row), color);

Edit B:
Hole 1:
[]: final float layerOffsetX = layer.getOffsetX() * unitScale;
Hole 2:
[]: final float layerOffsetY = -layer.getOffsetY() * unitScale;
Hole 3:
[SCond]: final int row1 = Math.max(0, ((int) ((viewBounds.y - layerTileHeight50 - layerOffsetX) / layerTileHeight)));
Hole 4:
[SCond]: final int row2 = Math.min(layerHeight, ((int) ((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetX) / layerTileHeight)));
Hole 5:
[SCond]: final int col1 = Math.max(0, ((int) ((viewBounds.x - tileWidthLowerCorner - layerOffsetY) / tileWidthUpperCorner)));
Hole 6:
[SCond]: final int col2 = Math.min(layerWidth, ((int) ((viewBounds.x + viewBounds.width + tileWidthUpperCorner - layerOffsetY) / tileWidthUpperCorner)));
Hole 7:
[SLoop,SLoop,SCond]: renderCell(layer.getCell(col, row), (tileWidthUpperCorner * col + layerOffsetX), (layerTileHeight50 + layerTileHeight * row + layerOffsetY), color);
Hole 8:
[SLoop,SLoop,SCond]: renderCell(layer.getCell(col, row), (tileWidthUpperCorner * col + layerOffsetX), (layerTileHeight * row + layerOffsetY), color);
Hole 9:
[SCond]: final int row1 = Math.max(0, ((int) ((viewBounds.y - tileHeightLowerCorner - layerOffsetX) / tileHeightUpperCorner)));
Hole 10:
[SCond]: final int row2 = Math.min(layerHeight, ((int) ((viewBounds.y + viewBounds.height + tileHeightUpperCorner - layerOffsetX) / tileHeightUpperCorner)));
Hole 11:
[SCond]: final int col1 = Math.max(0, ((int) ((viewBounds.x - layerTileWidth50 - layerOffsetY) / layerTileWidth)));
Hole 12:
[SCond]: final int col2 = Math.min(layerWidth, ((int) ((viewBounds.x + viewBounds.width + layerTileWidth - layerOffsetY) / layerTileWidth)));
Hole 13:
[SCond,SLoop,SCond]: shiftX = 0;
Hole 14:
[SCond,SLoop,SCond]: shiftX = layerTileWidth50;
Hole 15:
[SLoop,SLoop,SCond]: renderCell(layer.getCell(col, row), (layerTileWidth * col + shiftX + layerOffsetX), (tileHeightUpperCorner * row + layerOffsetY), color);

Edit M:
Hole 1:
[]: final float layerOffsetX = layer.getOffsetX() * unitScale;
Hole 2:
[]: final float layerOffsetY = -layer.getOffsetY() * unitScale;
Hole 3:
[SCond]: final int row1 = Math.max(0, ((int) ((viewBounds.y - layerTileHeight50 - layerOffsetX) / layerTileHeight)));
Hole 4:
[SCond]: final int row2 = Math.min(layerHeight, ((int) ((viewBounds.y + viewBounds.height + layerTileHeight - layerOffsetX) / layerTileHeight)));
Hole 5:
[SCond]: final int col1 = Math.max(0, ((int) ((viewBounds.x - tileWidthLowerCorner - layerOffsetY) / tileWidthUpperCorner)));
Hole 6:
[SCond]: final int col2 = Math.min(layerWidth, ((int) ((viewBounds.x + viewBounds.width + tileWidthUpperCorner - layerOffsetY) / tileWidthUpperCorner)));
Hole 7:
[SLoop,SLoop,SCond]: renderCell(layer.getCell(col, row), (tileWidthUpperCorner * col + layerOffsetX), (layerTileHeight50 + layerTileHeight * row + layerOffsetY), color);
Hole 8:
[SLoop,SLoop,SCond]: renderCell(layer.getCell(col, row), (tileWidthUpperCorner * col + layerOffsetX), (layerTileHeight * row + layerOffsetY), color);
Hole 9:
[SCond]: final int row1 = Math.max(0, ((int) ((viewBounds.y - tileHeightLowerCorner - layerOffsetX) / tileHeightUpperCorner)));
Hole 10:
[SCond]: final int row2 = Math.min(layerHeight, ((int) ((viewBounds.y + viewBounds.height + tileHeightUpperCorner - layerOffsetX) / tileHeightUpperCorner)));
Hole 11:
[SCond]: final int col1 = Math.max(0, ((int) ((viewBounds.x - layerTileWidth50 - layerOffsetY) / layerTileWidth)));
Hole 12:
[SCond]: final int col2 = Math.min(layerWidth, ((int) ((viewBounds.x + viewBounds.width + layerTileWidth - layerOffsetY) / layerTileWidth)));
Hole 13:
[SCond,SLoop,SCond]: shiftX = layerTileWidth50;
Hole 14:
[SCond,SLoop,SCond]: shiftX = 0;
Hole 15:
[SLoop,SLoop,SCond]: renderCell(layer.getCell(col, row), (layerTileWidth * col + shiftX + layerOffsetX), (tileHeightUpperCorner * row + layerOffsetY), color);

