Merge Instance for method (Ident "ObservableTests",Ident "testCompose",[])
@Test
 public void testCompose ()
{
  TestSubscriber<String> ts = new TestSubscriber<String>();
  <?HOLE?>
  ts.assertTerminalEvent();
  ts.assertNoErrors();
  ts.assertReceivedOnNext(Arrays.asList("1", "2", "3"));
}
Edit Base:
Hole 1:
[]: Observable.from(1, 2, 3).compose(new Transformer<Integer, String>()
                                 {
                                   @Override
                                   public Observable<String> call (Observable<Integer> t1)
                                   {
                                     return t1.map(new Func1<Integer, String>()
                                                   {
                                                     @Override
                                                     public String call (Integer t1)
                                                     {
                                                       return String.valueOf(t1);
                                                     }
                                                   });
                                   }
                                 }).subscribe(ts);

Edit A:
Hole 1:
[]: Observable.from(1, 2, 3).compose(new Transformer<Integer, String>()
                                 {
                                   @Override
                                   public Observable<String> call (Observable<? extends Integer> t1)
                                   {
                                     return t1.map(new Func1<Integer, String>()
                                                   {
                                                     @Override
                                                     public String call (Integer t1)
                                                     {
                                                       return String.valueOf(t1);
                                                     }
                                                   });
                                   }
                                 }).subscribe(ts);

Edit B:
Hole 1:
[]: Observable.just(1, 2, 3).compose(new Transformer<Integer, String>()
                                 {
                                   @Override
                                   public Observable<String> call (Observable<Integer> t1)
                                   {
                                     return t1.map(new Func1<Integer, String>()
                                                   {
                                                     @Override
                                                     public String call (Integer t1)
                                                     {
                                                       return String.valueOf(t1);
                                                     }
                                                   });
                                   }
                                 }).subscribe(ts);

Edit M:
Hole 1:
[]: Observable.just(1, 2, 3).compose(new Transformer<Integer, String>()
                                 {
                                   @Override
                                   public Observable<String> call (Observable<? extends Integer> t1)
                                   {
                                     return t1.map(new Func1<Integer, String>()
                                                   {
                                                     @Override
                                                     public String call (Integer t1)
                                                     {
                                                       return String.valueOf(t1);
                                                     }
                                                   });
                                   }
                                 }).subscribe(ts);

