Merge Instance for method (Ident "ViewportTest1",Ident "create",[])
public void create ()
{
  stage = new Stage();
  Skin skin = new Skin(Gdx.files.internal("data/uiskin.json"));
  label = new Label("", skin);
  Table root = new Table(skin);
  root.setFillParent(true);
  root.setBackground(skin.getDrawable("default-pane"));
  root.debug().defaults().space(6);
  root.add(new TextButton("Button 1", skin));
  root.add(new TextButton("Button 2", skin)).row();
  root.add("Press spacebar to change the viewport:").colspan(2).row();
  root.add(label).colspan(2);
  stage.addActor(root);
  int minWorldWidth = 300;
  int minWorldHeight = 225;
  int maxWorldWidth = 300;
  int maxWorldHeight = 168;
  Camera camera = stage.getCamera();
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  viewports.add(new ExtendViewport(minWorldWidth, minWorldHeight, camera));
  viewports.add(new ScreenViewport(camera));
  viewports.add(new ScalingViewport(Scaling.none, minWorldWidth, minWorldHeight, camera));
  <?HOLE?>
  <?HOLE?>
  stage.setViewport(viewports.first());
  Gdx.input.setInputProcessor(new InputMultiplexer(new InputAdapter()
                                                   {
                                                     public boolean keyDown (int keycode)
                                                     {
                                                       if (keycode == Input.Keys.SPACE)
                                                       {
                                                         Viewport viewport = viewports.get(((viewports.indexOf(stage.getViewport(), true) + 1) % viewports.size));
                                                         stage.setViewport(viewport);
                                                         resize(Gdx.graphics.getWidth(), Gdx.graphics.getHeight());
                                                       }
                                                       return false;
                                                     }
                                                   }, stage));
}
Edit Base:
Hole 1:
[]: viewports.add(new ScalingViewport(Scaling.stretch, minWorldWidth, minWorldHeight, camera));
Hole 2:
[]: viewports.add(new ScalingViewport(Scaling.fill, minWorldWidth, minWorldHeight, camera));
Hole 3:
[]: viewports.add(new ScalingViewport(Scaling.fit, minWorldWidth, minWorldHeight, camera));
Hole 4:
[]: viewports.add(new DoubleRatioViewport(minWorldWidth, minWorldHeight, maxWorldWidth, maxWorldHeight, camera));
Hole 5:
[]: viewports.add(new MinMaxViewport(minWorldWidth, minWorldHeight, maxWorldWidth, maxWorldHeight, camera));

Edit A:
Hole 1:
[]: viewports.add(new StretchViewport(minWorldWidth, minWorldHeight, camera));
Hole 2:
[]: viewports.add(new FillViewport(minWorldWidth, minWorldHeight, camera));
Hole 3:
[]: viewports.add(new FitViewport(minWorldWidth, minWorldHeight, camera));
Hole 4:
[]: viewports.add(new DoubleRatioViewport(minWorldWidth, minWorldHeight, maxWorldWidth, maxWorldHeight, camera));
Hole 5:
[]: viewports.add(new MinMaxViewport(minWorldWidth, minWorldHeight, maxWorldWidth, maxWorldHeight, camera));

Edit B:
Hole 1:
[]: viewports.add(new ScalingViewport(Scaling.stretch, minWorldWidth, minWorldHeight, camera));
Hole 2:
[]: viewports.add(new ScalingViewport(Scaling.fill, minWorldWidth, minWorldHeight, camera));
Hole 3:
[]: viewports.add(new ScalingViewport(Scaling.fit, minWorldWidth, minWorldHeight, camera));
Hole 4:
[]: viewports.add(new MinMaxViewport(minWorldWidth, minWorldHeight, maxWorldWidth, maxWorldHeight, true, camera));
Hole 5:
[]: viewports.add(new MinMaxViewport(minWorldWidth, minWorldHeight, maxWorldWidth, maxWorldHeight, false, camera));

Edit M:
Hole 1:
[]: viewports.add(new StretchViewport(minWorldWidth, minWorldHeight, camera));
Hole 2:
[]: viewports.add(new FillViewport(minWorldWidth, minWorldHeight, camera));
Hole 3:
[]: viewports.add(new FitViewport(minWorldWidth, minWorldHeight, camera));
Hole 4:
[]: viewports.add(new MinMaxViewport(minWorldWidth, minWorldHeight, maxWorldWidth, maxWorldHeight, true, camera));
Hole 5:
[]: viewports.add(new MinMaxViewport(minWorldWidth, minWorldHeight, maxWorldWidth, maxWorldHeight, false, camera));

