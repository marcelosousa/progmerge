Merge Instance for method (Ident "G3dModelLoader",Ident "parseMaterials",[RefType (ClassRefType (ClassType [(Ident "ModelData",[])])),RefType (ClassRefType (ClassType [(Ident "JsonValue",[])])),RefType (ClassRefType (ClassType [(Ident "String",[])]))])
private void parseMaterials (ModelData model, JsonValue json, String materialDir)
{
  JsonValue materials = json.get("materials");
  if (materials == null)
  {
  }
  else
  {
    <?HOLE?>
    for (JsonValue material = materials.child() ; material != null ; material = material.next())
    {
      ModelMaterial jsonMaterial = new ModelMaterial();
      String id = material.getString("id", null);
      if (id == null)
        throw new GdxRuntimeException("Material needs an id.");
      jsonMaterial.id = id;
      final JsonValue diffuse = material.get("diffuse");
      if (diffuse != null)
        jsonMaterial.diffuse = parseColor(diffuse);
      final JsonValue ambient = material.get("ambient");
      if (ambient != null)
        jsonMaterial.ambient = parseColor(ambient);
      final JsonValue emissive = material.get("emissive");
      if (emissive != null)
        jsonMaterial.emissive = parseColor(emissive);
      final JsonValue specular = material.get("specular");
      if (specular != null)
        jsonMaterial.specular = parseColor(specular);
      <?HOLE?>
      <?HOLE?>
      jsonMaterial.shininess = material.getFloat("shininess", 0.0F);
      jsonMaterial.opacity = material.getFloat("opacity", 1.0F);
      JsonValue textures = material.get("textures");
      if (textures != null)
      {
        for (JsonValue texture = textures.child() ; texture != null ; texture = texture.next())
        {
          ModelTexture jsonTexture = new ModelTexture();
          String textureId = texture.getString("id", null);
          if (textureId == null)
            throw new GdxRuntimeException("Texture has no id.");
          jsonTexture.id = textureId;
          String fileName = texture.getString("filename", null);
          if (fileName == null)
            throw new GdxRuntimeException("Texture needs filename.");
          jsonTexture.fileName = materialDir + (materialDir.length() == 0 || materialDir.endsWith("/") ? "" : "/") + fileName;
          jsonTexture.uvTranslation = readVector2(texture.get("uvTranslation"), 0.0F, 0.0F);
          jsonTexture.uvScaling = readVector2(texture.get("uvScaling"), 1.0F, 1.0F);
          String textureType = texture.getString("type", null);
          if (textureType == null)
            throw new GdxRuntimeException("Texture needs type.");
          jsonTexture.usage = parseTextureUsage(textureType);
          if (jsonMaterial.textures == null)
            jsonMaterial.textures = new Array<ModelTexture>();
          jsonMaterial.textures.add(jsonTexture);
        }
      }
      model.materials.add(jsonMaterial);
    }
  }
}
Edit Base:
Hole 1:
[SCond]: model.materials.ensureCapacity(materials.size());
Hole 2:
[SLoop,SCond]: <SKIP>
Hole 3:
[SLoop,SCond]: <SKIP>

Edit A:
Hole 1:
[SCond]: model.materials.ensureCapacity(materials.size());
Hole 2:
[SLoop,SCond]: final JsonValue reflection = material.get("reflection");
Hole 3:
[SLoop,SCond]: if (reflection != null)
  jsonMaterial.reflection = parseColor(reflection);

Edit B:
Hole 1:
[SCond]: model.materials.ensureCapacity(materials.size);
Hole 2:
[SLoop,SCond]: <SKIP>
Hole 3:
[SLoop,SCond]: <SKIP>

Edit M:
Hole 1:
[SCond]: model.materials.ensureCapacity(materials.size);
Hole 2:
[SLoop,SCond]: final JsonValue reflection = material.get("reflection");
Hole 3:
[SLoop,SCond]: if (reflection != null)
  jsonMaterial.reflection = parseColor(reflection);

