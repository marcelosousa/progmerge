Merge Instance for method (Ident "RequestBuilder",Ident "build",[])
Request build () throws UnsupportedEncodingException
{
  String apiUrl = this.apiUrl;
  StringBuilder url = new StringBuilder(apiUrl);
  if (apiUrl.endsWith("/"))
  {
    url.deleteCharAt((url.length() - 1));
  }
  url.append(buildRelativeUrl());
  if (methodInfo.hasQueryParams)
  {
    boolean first = true;
    String requestQuery = methodInfo.requestQuery;
    if (requestQuery != null)
    {
      <?HOLE?>
      first = false;
    }
    String[] requestQueryName = methodInfo.requestQueryName;
    for (int i = 0 ; i < requestQueryName.length ; i++)
    {
      String query = requestQueryName[i];
      if (query != null)
      {
        <?HOLE?>
        <?HOLE?>
        <?HOLE?>
      }
    }
  }
  List<retrofit.client.Header> headers = new ArrayList<retrofit.client.Header>();
  if (this.headers != null)
  {
    headers.addAll(this.headers);
  }
  List<Header> methodHeaders = methodInfo.headers;
  if (methodHeaders != null)
  {
    headers.addAll(methodHeaders);
  }
  String[] requestParamHeader = methodInfo.requestParamHeader;
  if (requestParamHeader != null)
  {
    for (int i = 0 ; i < requestParamHeader.length ; i++)
    {
      String name = requestParamHeader[i];
      if (name == null)
        continue;
      Object arg = args[i];
      if (arg != null)
      {
        headers.add(new retrofit.client.Header(name, String.valueOf(arg)));
      }
    }
  }
  return new Request(methodInfo.requestMethod, url.toString(), headers, buildBody());
}
Edit Base:
Hole 1:
[SCond,SCond]: url.append(requestQuery);
Hole 2:
[SCond,SLoop,SCond]: String value = URLEncoder.encode(String.valueOf(args[i]), "UTF-8");
Hole 3:
[SCond,SLoop,SCond]: url.append((first ? '?' : '&')).append(query).append('=').append(value);
Hole 4:
[SCond,SLoop,SCond]: first = false;

Edit A:
Hole 1:
[SCond,SCond]: url.append('?').append(requestQuery);
Hole 2:
[SCond,SLoop,SCond]: String value = URLEncoder.encode(String.valueOf(args[i]), "UTF-8");
Hole 3:
[SCond,SLoop,SCond]: url.append((first ? '?' : '&')).append(query).append('=').append(value);
Hole 4:
[SCond,SLoop,SCond]: first = false;

Edit B:
Hole 1:
[SCond,SCond]: url.append(requestQuery);
Hole 2:
[SCond,SLoop,SCond]: Object arg = args[i];
Hole 3:
[SCond,SLoop,SCond]: if (arg != null)
{
  String value = URLEncoder.encode(String.valueOf(arg), "UTF-8");
  url.append((first ? '?' : '&')).append(query).append('=').append(value);
  first = false;
}
Hole 4:
[SCond,SLoop,SCond]: <SKIP>

Edit M:
Hole 1:
[SCond,SCond]: url.append('?').append(requestQuery);
Hole 2:
[SCond,SLoop,SCond]: Object arg = args[i];
Hole 3:
[SCond,SLoop,SCond]: if (arg != null)
{
  String value = URLEncoder.encode(String.valueOf(arg), "UTF-8");
  url.append((first ? '?' : '&')).append(query).append('=').append(value);
  first = false;
}
Hole 4:
[SCond,SLoop,SCond]: <SKIP>

