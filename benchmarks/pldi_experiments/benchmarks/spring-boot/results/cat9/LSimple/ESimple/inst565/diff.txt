Merge Instance for method (Ident "EndpointWebMvcAutoConfigurationTests",Ident "onDifferentPort",[])
@Test
 public void onDifferentPort () throws Exception
{
  this.applicationContext.register(RootConfig.class, EndpointConfig.class, DifferentPortConfig.class, BaseConfiguration.class, EndpointWebMvcAutoConfiguration.class, ErrorMvcAutoConfiguration.class);
  this.applicationContext.refresh();
  assertContent("/controller", ports.get().server, "controlleroutput");
  assertContent("/endpoint", ports.get().server, null);
  assertContent("/controller", ports.get().management, null);
  assertContent("/endpoint", ports.get().management, "endpointoutput");
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  assertEquals(1, interceptors.size());
  this.applicationContext.close();
  assertAllClosed();
}
Edit Base:
Hole 1:
[]: List<?> interceptors = (List<?>) ReflectionTestUtils.getField(this.applicationContext.getBean(EndpointHandlerMapping.class), "interceptors");
Hole 2:
[]: <SKIP>
Hole 3:
[]: <SKIP>

Edit A:
Hole 1:
[]: ApplicationContext managementContext = this.applicationContext.getBean(ManagementContextResolver.class).getApplicationContext();
Hole 2:
[]: List<?> interceptors = (List<?>) ReflectionTestUtils.getField(managementContext.getBean(EndpointHandlerMapping.class), "interceptors");
Hole 3:
[]: <SKIP>

Edit B:
Hole 1:
[]: assertContent("/error", ports.get().management, startsWith("{\"timestamp\""));
Hole 2:
[]: List<?> interceptors = (List<?>) ReflectionTestUtils.getField(this.applicationContext.getBean(EndpointHandlerMapping.class), "interceptors");
Hole 3:
[]: <SKIP>

Edit M:
Hole 1:
[]: assertContent("/error", ports.get().management, startsWith("{"));
Hole 2:
[]: ApplicationContext managementContext = this.applicationContext.getBean(ManagementContextResolver.class).getApplicationContext();
Hole 3:
[]: List<?> interceptors = (List<?>) ReflectionTestUtils.getField(managementContext.getBean(EndpointHandlerMapping.class), "interceptors");

