Merge Instance for method (Ident "AutoConfigurationReportLoggingInitializer",Ident "logAutoConfigurationReport",[PrimType BooleanT])
public void logAutoConfigurationReport (boolean isCrashReport)
{
  if (this.report == null)
  {
    if (this.applicationContext == null)
    {
      this.logger.info(("Unable to provide auto-configuration report " + "due to missing ApplicationContext"));
      return;
    }
    this.report = ConditionEvaluationReport.get(this.applicationContext.getBeanFactory());
  }
  if (this.report.getConditionAndOutcomesBySource().size() > 0)
  {
    if (isCrashReport && this.logger.isInfoEnabled() && !this.logger.isDebugEnabled())
    {
      <?HOLE?>
    }
    if (this.logger.isDebugEnabled())
    {
      <?HOLE?>
    }
  }
}
Edit Base:
Hole 1:
[SCond,SCond]: this.logger.info(("\n\nError starting ApplicationContext. " + "To display the auto-configuration report enabled " + "debug logging (start with --debug)\n\n"));
Hole 2:
[SCond,SCond]: this.logger.debug(getLogMessage(this.report.getConditionAndOutcomesBySource()));

Edit A:
Hole 1:
[SCond,SCond]: this.logger.info(("\n\nError starting ApplicationContext. " + "To display the auto-configuration report enabled " + "debug logging (start with --debug)\n\n"));
Hole 2:
[SCond,SCond]: this.logger.debug(getLogMessage(this.report));

Edit B:
Hole 1:
[SCond,SCond]: this.logger.info(("\n\nError starting ApplicationContext. " + "To display the auto-configuration report enable " + "debug logging (start with --debug)\n\n"));
Hole 2:
[SCond,SCond]: this.logger.debug(getLogMessage(this.report.getConditionAndOutcomesBySource()));

Edit M:
Hole 1:
[SCond,SCond]: this.logger.info(("\n\nError starting ApplicationContext. " + "To display the auto-configuration report enable " + "debug logging (start with --debug)\n\n"));
Hole 2:
[SCond,SCond]: this.logger.debug(getLogMessage(this.report));

