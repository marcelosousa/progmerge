Merge Instance for method (Ident "LoggingApplicationListener",Ident "initializeSystem",[RefType (ClassRefType (ClassType [(Ident "ConfigurableEnvironment",[])])),RefType (ClassRefType (ClassType [(Ident "LoggingSystem",[])]))])
private void initializeSystem (ConfigurableEnvironment environment, LoggingSystem system)
{
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: if (environment.containsProperty("logging.config"))
{
  String value = environment.getProperty("logging.config");
  try
  {
    ResourceUtils.getURL(value).openStream().close();
    system.initialize(value);
  }
  catch (Exception ex)
  {
    this.logger.warn(("Logging environment value '" + value + "' cannot be opened and will be ignored " + "(using default location instead)"));
    system.initialize();
  }
}
else
{
  system.initialize();
}
Hole 2:
[]: <SKIP>
Hole 3:
[]: <SKIP>

Edit A:
Hole 1:
[]: String logFile = getLogFile(environment);
Hole 2:
[]: String logConfig = environment.getProperty("logging.config");
Hole 3:
[]: if (StringUtils.hasLength(logConfig))
{
  try
  {
    ResourceUtils.getURL(logConfig).openStream().close();
    system.initialize(logConfig, logFile);
  }
  catch (Exception ex)
  {
    this.logger.warn(("Logging environment value '" + logConfig + "' cannot be opened and will be ignored " + "(using default location instead)"));
    system.initialize(null, logFile);
  }
}
else
{
  system.initialize(null, logFile);
}

Edit B:
Hole 1:
[]: if (environment.containsProperty(CONFIG_PROPERTY))
{
  String value = environment.getProperty(CONFIG_PROPERTY);
  try
  {
    ResourceUtils.getURL(value).openStream().close();
    system.initialize(value);
  }
  catch (Exception ex)
  {
    this.logger.warn(("Logging environment value '" + value + "' cannot be opened and will be ignored " + "(using default location instead)"));
    system.initialize();
  }
}
else
{
  system.initialize();
}
Hole 2:
[]: <SKIP>
Hole 3:
[]: <SKIP>

Edit M:
Hole 1:
[]: String logFile = getLogFile(environment);
Hole 2:
[]: String logConfig = environment.getProperty(CONFIG_PROPERTY);
Hole 3:
[]: if (StringUtils.hasLength(logConfig))
{
  try
  {
    ResourceUtils.getURL(logConfig).openStream().close();
    system.initialize(logConfig, logFile);
  }
  catch (Exception ex)
  {
    this.logger.warn(("Logging environment value '" + logConfig + "' cannot be opened and will be ignored " + "(using default location instead)"));
    system.initialize(null, logFile);
  }
}
else
{
  system.initialize(null, logFile);
}

