Merge Instance for method (Ident "TomcatEmbeddedServletContainerFactory",Ident "prepareContext",[RefType (ClassRefType (ClassType [(Ident "Host",[])])),RefType (ArrayType (RefType (ClassRefType (ClassType [(Ident "ServletContextInitializer",[])]))))])
protected void prepareContext (Host host, ServletContextInitializer[] initializers)
{
  File docBase = getValidDocumentRoot();
  docBase = docBase != null ? docBase : createTempDir("tomcat-docbase");
  <?HOLE?>
  context.setName(getContextPath());
  context.setDisplayName(getDisplayName());
  context.setPath(getContextPath());
  context.setDocBase(docBase.getAbsolutePath());
  context.addLifecycleListener(new FixContextListener());
  context.setParentClassLoader((this.resourceLoader != null ? this.resourceLoader.getClassLoader() : ClassUtils.getDefaultClassLoader()));
  resetDefaultLocaleMapping(context);
  addLocaleMappings(context);
  try
  {
    context.setUseRelativeRedirects(false);
  }
  catch (NoSuchMethodError ex)
  {
  }
  SkipPatternJarScanner.apply(context, this.tldSkipPatterns);
  WebappLoader loader = new WebappLoader(context.getParentClassLoader());
  loader.setLoaderClass(TomcatEmbeddedWebappClassLoader.class.getName());
  loader.setDelegate(true);
  context.setLoader(loader);
  if (isRegisterDefaultServlet())
  {
    addDefaultServlet(context);
  }
  if (shouldRegisterJspServlet())
  {
    addJspServlet(context);
    addJasperInitializer(context);
    <?HOLE?>
  }
  <?HOLE?>
  ServletContextInitializer[] initializersToUse = mergeInitializers(initializers);
  configureContext(context, initializersToUse);
  host.addChild(context);
  postProcessContext(context);
}
Edit Base:
Hole 1:
[]: TomcatEmbeddedContext context = new TomcatEmbeddedContext();
Hole 2:
[SCond]: context.addLifecycleListener(new StoreMergedWebXmlListener());
Hole 3:
[]: <SKIP>

Edit A:
Hole 1:
[]: TomcatEmbeddedContext context = new TomcatEmbeddedContext();
Hole 2:
[SCond]: <SKIP>
Hole 3:
[]: <SKIP>

Edit B:
Hole 1:
[]: final TomcatEmbeddedContext context = new TomcatEmbeddedContext();
Hole 2:
[SCond]: context.addLifecycleListener(new StoreMergedWebXmlListener());
Hole 3:
[]: context.addLifecycleListener(new LifecycleListener()
                             {
                               @Override
                               public void lifecycleEvent (LifecycleEvent event)
                               {
                                 if (event.getType().equals(Lifecycle.CONFIGURE_START_EVENT))
                                 {
                                   TomcatResources.get(context).addResourceJars(getUrlsOfJarsWithMetaInfResources());
                                 }
                               }
                             });

Edit M:
Hole 1:
[]: final TomcatEmbeddedContext context = new TomcatEmbeddedContext();
Hole 2:
[SCond]: <SKIP>
Hole 3:
[]: context.addLifecycleListener(new StaticResourceConfigurer(context));

