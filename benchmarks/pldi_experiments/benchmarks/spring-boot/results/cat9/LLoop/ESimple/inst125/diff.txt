Merge Instance for method (Ident "LoggingApplicationListenerTests",Ident "closingChildContextDoesNotCleanUpLoggingSystem",[])
@Test
 public void closingChildContextDoesNotCleanUpLoggingSystem ()
{
  System.setProperty(LoggingSystem.SYSTEM_PROPERTY, TestCleanupLoggingSystem.class.getName());
  <?HOLE?>
  TestCleanupLoggingSystem loggingSystem = (TestCleanupLoggingSystem) ReflectionTestUtils.getField(this.initializer, "loggingSystem");
  assertThat(loggingSystem.cleanedUp).isFalse();
  GenericApplicationContext childContext = new GenericApplicationContext();
  childContext.setParent(this.context);
  <?HOLE?>
  assertThat(loggingSystem.cleanedUp).isFalse();
  <?HOLE?>
  assertThat(loggingSystem.cleanedUp).isTrue();
  childContext.close();
}
Edit Base:
Hole 1:
[]: this.initializer.onApplicationEvent(new ApplicationStartedEvent(this.springApplication, new String[0]));
Hole 2:
[]: this.initializer.onApplicationEvent(new ContextClosedEvent(childContext));
Hole 3:
[]: this.initializer.onApplicationEvent(new ContextClosedEvent(this.context));

Edit A:
Hole 1:
[]: this.initializer.onApplicationEvent(new ApplicationStartingEvent(this.springApplication, new String[0]));
Hole 2:
[]: this.initializer.onApplicationEvent(new ContextClosedEvent(childContext));
Hole 3:
[]: this.initializer.onApplicationEvent(new ContextClosedEvent(this.context));

Edit B:
Hole 1:
[]: multicastEvent(new ApplicationStartedEvent(this.springApplication, new String[0]));
Hole 2:
[]: multicastEvent(new ContextClosedEvent(childContext));
Hole 3:
[]: multicastEvent(new ContextClosedEvent(this.context));

Edit M:
Hole 1:
[]: multicastEvent(new ApplicationStartingEvent(this.springApplication, new String[0]));
Hole 2:
[]: multicastEvent(new ContextClosedEvent(childContext));
Hole 3:
[]: multicastEvent(new ContextClosedEvent(this.context));

