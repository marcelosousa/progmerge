Merge Instance for method (Ident "RunMojo",Ident "runWithForkedJvm",[RefType (ClassRefType (ClassType [(Ident "List",[ActualType (ClassRefType (ClassType [(Ident "String",[])]))])]))])
@Override
 protected void runWithForkedJvm (List<String> args) throws MojoExecutionException
{
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: try
{
  new RunProcess(new JavaExecutable().toString()).run(true, args.toArray(new String[args.size()]));
}
catch (Exception ex)
{
  throw new MojoExecutionException("Could not exec java", ex);
}

Edit A:
Hole 1:
[]: try
{
  RunProcess runProcess = new RunProcess(new JavaExecutable().toString());
  Runtime.getRuntime().addShutdownHook(new Thread(new RunProcessKiller(runProcess)));
  runProcess.run(true, args.toArray(new String[args.size()]));
}
catch (Exception ex)
{
  throw new MojoExecutionException("Could not exec java", ex);
}

Edit B:
Hole 1:
[]: try
{
  int exitCode = new RunProcess(new JavaExecutable().toString()).run(true, args.toArray(new String[args.size()]));
  if (exitCode != 0)
  {
    throw new MojoExecutionException("Application finished with non-zero exit code: " + exitCode);
  }
}
catch (Exception ex)
{
  throw new MojoExecutionException("Could not exec java", ex);
}

Edit M:
Hole 1:
[]: try
{
  RunProcess runProcess = new RunProcess(new JavaExecutable().toString());
  Runtime.getRuntime().addShutdownHook(new Thread(new RunProcessKiller(runProcess)));
  int exitCode = runProcess.run(true, args.toArray(new String[args.size()]));
  if (exitCode != 0)
  {
    throw new MojoExecutionException("Application finished with non-zero exit code: " + exitCode);
  }
}
catch (Exception ex)
{
  throw new MojoExecutionException("Could not exec java", ex);
}

