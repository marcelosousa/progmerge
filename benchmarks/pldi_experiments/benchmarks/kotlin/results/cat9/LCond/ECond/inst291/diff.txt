Merge Instance for method (Ident "ClassDescriptorResolver",Ident "resolveFunctionDescriptor",[RefType (ClassRefType (ClassType [(Ident "DeclarationDescriptor",[])])),RefType (ClassRefType (ClassType [(Ident "JetScope",[])])),RefType (ClassRefType (ClassType [(Ident "JetNamedFunction",[])]))])
@NotNull
 public FunctionDescriptorImpl resolveFunctionDescriptor (DeclarationDescriptor containingDescriptor, final JetScope scope, final JetNamedFunction function)
{
  final FunctionDescriptorImpl functionDescriptor = new FunctionDescriptorImpl(containingDescriptor, annotationResolver.resolveAnnotations(scope, function.getModifierList()), JetPsiUtil.safeName(function.getName()));
  WritableScope innerScope = new WritableScopeImpl(scope, functionDescriptor, new TraceBasedRedeclarationHandler(trace)).setDebugName("Function descriptor header scope");
  innerScope.addLabeledDeclaration(functionDescriptor);
  List<TypeParameterDescriptor> typeParameterDescriptors = resolveTypeParameters(functionDescriptor, innerScope, function.getTypeParameters());
  resolveGenericBounds(function, innerScope, typeParameterDescriptors);
  JetType receiverType = null;
  JetTypeReference receiverTypeRef = function.getReceiverTypeRef();
  if (receiverTypeRef != null)
  {
    JetScope scopeForReceiver = function.hasTypeParameterListBeforeFunctionName() ? innerScope : scope;
    receiverType = typeResolver.resolveType(scopeForReceiver, receiverTypeRef);
  }
  List<ValueParameterDescriptor> valueParameterDescriptors = resolveValueParameters(functionDescriptor, innerScope, function.getValueParameters());
  JetTypeReference returnTypeRef = function.getReturnTypeRef();
  JetType returnType;
  if (returnTypeRef != null)
  {
    returnType = typeResolver.resolveType(innerScope, returnTypeRef);
  }
  else
    if (function.hasBlockBody())
    {
      returnType = JetStandardClasses.getUnitType();
    }
    else
    {
      final JetExpression bodyExpression = function.getBodyExpression();
      if (bodyExpression != null)
      {
        <?HOLE?>
      }
      else
      {
        trace.report(FUNCTION_WITH_NO_TYPE_NO_BODY.on(function.asElement()));
        returnType = ErrorUtils.createErrorType("No type, no body");
      }
    }
  boolean hasBody = function.getBodyExpression() != null;
  Modality defaultModality = getDefaultModality(containingDescriptor, hasBody);
  <?HOLE?>
  <?HOLE?>
  functionDescriptor.initialize(receiverType, typeParameterDescriptors, valueParameterDescriptors, returnType, modality, visibility);
  trace.record(BindingContext.FUNCTION, function, functionDescriptor);
  return functionDescriptor;
}
Edit Base:
Hole 1:
[SCond,SCond,SCond]: returnType = new DeferredType(new LazyValue<JetType>()
                              {
                                @Override
                                protected JetType compute ()
                                {
                                  JetFlowInformationProvider flowInformationProvider = computeFlowData(function, bodyExpression);
                                  return semanticServices.getTypeInferrerServices(trace, flowInformationProvider).inferFunctionReturnType(scope, function, functionDescriptor);
                                }
                              });
Hole 2:
[]: Modality modality = resolveModalityFromModifiers(trace, function.getModifierList(), defaultModality);
Hole 3:
[]: Visibility visibility = resolveVisibilityFromModifiers(trace, function.getModifierList());

Edit A:
Hole 1:
[SCond,SCond,SCond]: returnType = new DeferredType(new LazyValue<JetType>()
                              {
                                @Override
                                protected JetType compute ()
                                {
                                  JetFlowInformationProvider flowInformationProvider = computeFlowData(function, bodyExpression);
                                  return semanticServices.getTypeInferrerServices(trace, flowInformationProvider).inferFunctionReturnType(scope, function, functionDescriptor);
                                }
                              });
Hole 2:
[]: Modality modality = resolveModalityFromModifiers(function.getModifierList(), defaultModality);
Hole 3:
[]: Visibility visibility = resolveVisibilityFromModifiers(function.getModifierList());

Edit B:
Hole 1:
[SCond,SCond,SCond]: returnType = DeferredType.create(trace, new LazyValueWithDefault<JetType>(ErrorUtils.createErrorType("Recursive dependency"))
                                        {
                                          @Override
                                          protected JetType compute ()
                                          {
                                            JetFlowInformationProvider flowInformationProvider = computeFlowData(function, bodyExpression);
                                            return semanticServices.getTypeInferrerServices(trace, flowInformationProvider).inferFunctionReturnType(scope, function, functionDescriptor);
                                          }
                                        });
Hole 2:
[]: Modality modality = resolveModalityFromModifiers(trace, function.getModifierList(), defaultModality);
Hole 3:
[]: Visibility visibility = resolveVisibilityFromModifiers(trace, function.getModifierList());

Edit M:
Hole 1:
[SCond,SCond,SCond]: returnType = DeferredType.create(trace, new LazyValueWithDefault<JetType>(ErrorUtils.createErrorType("Recursive dependency"))
                                        {
                                          @Override
                                          protected JetType compute ()
                                          {
                                            JetFlowInformationProvider flowInformationProvider = computeFlowData(function, bodyExpression);
                                            return semanticServices.getTypeInferrerServices(trace, flowInformationProvider).inferFunctionReturnType(scope, function, functionDescriptor);
                                          }
                                        });
Hole 2:
[]: Modality modality = resolveModalityFromModifiers(function.getModifierList(), defaultModality);
Hole 3:
[]: Visibility visibility = resolveVisibilityFromModifiers(function.getModifierList());

