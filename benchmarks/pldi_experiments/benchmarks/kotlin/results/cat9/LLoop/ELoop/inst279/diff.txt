Merge Instance for method (Ident "TypeHierarchyResolver",Ident "processImports",[RefType (ClassRefType (ClassType [(Ident "JetNamespace",[])])),RefType (ClassRefType (ClassType [(Ident "WriteThroughScope",[])])),RefType (ClassRefType (ClassType [(Ident "JetScope",[])]))])
private void processImports (@NotNull
                             JetNamespace namespace, @NotNull
                                                     WriteThroughScope namespaceScope, @NotNull
                                                                                       JetScope outerScope)
{
  List<JetImportDirective> importDirectives = namespace.getImportDirectives();
  for (JetImportDirective importDirective : importDirectives) {
                                                                if (importDirective.isAbsoluteInRootNamespace())
                                                                {
                                                                  context.getTrace().report(UNSUPPORTED.on(namespace, "TypeHierarchyResolver"));
                                                                  continue;
                                                                }
                                                                if (importDirective.isAllUnder())
                                                                {
                                                                  JetExpression importedReference = importDirective.getImportedReference();
                                                                  if (importedReference != null)
                                                                  {
                                                                    <?HOLE?>
                                                                    JetType type = typeInferrerServices.getTypeWithNamespaces(namespaceScope, importedReference);
                                                                    if (type != null)
                                                                    {
                                                                      namespaceScope.importScope(type.getMemberScope());
                                                                    }
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  ClassifierDescriptor classifierDescriptor = null;
                                                                  <?HOLE?>
                                                                  JetSimpleNameExpression referenceExpression = null;
                                                                  JetExpression importedReference = importDirective.getImportedReference();
                                                                  if (importedReference instanceof JetDotQualifiedExpression)
                                                                  {
                                                                    JetDotQualifiedExpression reference = (JetDotQualifiedExpression) importedReference;
                                                                    <?HOLE?>
                                                                    JetExpression selectorExpression = reference.getSelectorExpression();
                                                                    if (selectorExpression != null)
                                                                    {
                                                                      referenceExpression = (JetSimpleNameExpression) selectorExpression;
                                                                      String referencedName = referenceExpression.getReferencedName();
                                                                      if ((type != null && referencedName) != null)
                                                                      {
                                                                        classifierDescriptor = type.getMemberScope().getClassifier(referencedName);
                                                                        <?HOLE?>
                                                                      }
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    assert importedReference instanceof JetSimpleNameExpression;
                                                                    referenceExpression = (JetSimpleNameExpression) importedReference;
                                                                    String referencedName = referenceExpression.getReferencedName();
                                                                    if (referencedName != null)
                                                                    {
                                                                      classifierDescriptor = outerScope.getClassifier(referencedName);
                                                                      <?HOLE?>
                                                                    }
                                                                  }
                                                                  <?HOLE?>
                                                                  <?HOLE?>
                                                                  <?HOLE?>
                                                                  <?HOLE?>
                                                                }
                                                              }
}
Edit Base:
Hole 1:
[SCond,SCond,SLoop]: JetTypeInferrer.Services typeInferrerServices = context.getSemanticServices().getTypeInferrerServices(context.getTrace(), JetFlowInformationProvider.THROW_EXCEPTION);
Hole 2:
[SCond,SLoop]: <SKIP>
Hole 3:
[SCond,SCond,SLoop]: JetType type = context.getSemanticServices().getTypeInferrerServices(context.getTrace(), JetFlowInformationProvider.THROW_EXCEPTION).getTypeWithNamespaces(namespaceScope, reference.getReceiverExpression());
Hole 4:
[SCond,SCond,SCond,SCond,SLoop]: <SKIP>
Hole 5:
[SCond,SCond,SCond,SLoop]: <SKIP>
Hole 6:
[SCond,SLoop]: if (classifierDescriptor != null)
{
  context.getTrace().record(BindingContext.REFERENCE_TARGET, referenceExpression, classifierDescriptor);
  String aliasName = importDirective.getAliasName();
  String importedClassifierName = aliasName != null ? aliasName : classifierDescriptor.getName();
  namespaceScope.importClassifierAlias(importedClassifierName, classifierDescriptor);
}
Hole 7:
[SCond,SLoop]: <SKIP>
Hole 8:
[SCond,SLoop]: <SKIP>
Hole 9:
[SCond,SLoop]: <SKIP>

Edit A:
Hole 1:
[SCond,SCond,SLoop]: JetTypeInferrer.Services typeInferrerServices = context.getSemanticServices().getTypeInferrerServices(context.getTrace(), JetFlowInformationProvider.THROW_EXCEPTION);
Hole 2:
[SCond,SLoop]: NamespaceDescriptor namespaceDescriptor = null;
Hole 3:
[SCond,SCond,SLoop]: JetType type = context.getSemanticServices().getTypeInferrerServices(context.getTrace(), JetFlowInformationProvider.THROW_EXCEPTION).getTypeWithNamespaces(namespaceScope, reference.getReceiverExpression());
Hole 4:
[SCond,SCond,SCond,SCond,SLoop]: namespaceDescriptor = type.getMemberScope().getNamespace(referencedName);
Hole 5:
[SCond,SCond,SCond,SLoop]: namespaceDescriptor = outerScope.getNamespace(referencedName);
Hole 6:
[SCond,SLoop]: String aliasName = importDirective.getAliasName();
Hole 7:
[SCond,SLoop]: if (aliasName == null)
{
  aliasName = referenceExpression != null ? referenceExpression.getReferencedName() : null;
}
Hole 8:
[SCond,SLoop]: if (classifierDescriptor != null)
{
  context.getTrace().record(BindingContext.REFERENCE_TARGET, referenceExpression, classifierDescriptor);
  if (aliasName != null)
  {
    namespaceScope.importClassifierAlias(aliasName, classifierDescriptor);
  }
}
Hole 9:
[SCond,SLoop]: if (namespaceDescriptor != null)
{
  if (classifierDescriptor == null)
  {
    context.getTrace().record(BindingContext.REFERENCE_TARGET, referenceExpression, namespaceDescriptor);
  }
  if (aliasName != null)
  {
    namespaceScope.importNamespaceAlias(aliasName, namespaceDescriptor);
  }
}

Edit B:
Hole 1:
[SCond,SCond,SLoop]: JetTypeInferrer.Services typeInferrerServices = context.getSemanticServices().getTypeInferrerServices(context.getTrace());
Hole 2:
[SCond,SLoop]: <SKIP>
Hole 3:
[SCond,SCond,SLoop]: JetType type = context.getSemanticServices().getTypeInferrerServices(context.getTrace()).getTypeWithNamespaces(namespaceScope, reference.getReceiverExpression());
Hole 4:
[SCond,SCond,SCond,SCond,SLoop]: <SKIP>
Hole 5:
[SCond,SCond,SCond,SLoop]: <SKIP>
Hole 6:
[SCond,SLoop]: if (classifierDescriptor != null)
{
  context.getTrace().record(BindingContext.REFERENCE_TARGET, referenceExpression, classifierDescriptor);
  String aliasName = importDirective.getAliasName();
  String importedClassifierName = aliasName != null ? aliasName : classifierDescriptor.getName();
  namespaceScope.importClassifierAlias(importedClassifierName, classifierDescriptor);
}
Hole 7:
[SCond,SLoop]: <SKIP>
Hole 8:
[SCond,SLoop]: <SKIP>
Hole 9:
[SCond,SLoop]: <SKIP>

Edit M:
Hole 1:
[SCond,SCond,SLoop]: JetTypeInferrer.Services typeInferrerServices = context.getSemanticServices().getTypeInferrerServices(context.getTrace());
Hole 2:
[SCond,SLoop]: NamespaceDescriptor namespaceDescriptor = null;
Hole 3:
[SCond,SCond,SLoop]: JetType type = context.getSemanticServices().getTypeInferrerServices(context.getTrace()).getTypeWithNamespaces(namespaceScope, reference.getReceiverExpression());
Hole 4:
[SCond,SCond,SCond,SCond,SLoop]: namespaceDescriptor = type.getMemberScope().getNamespace(referencedName);
Hole 5:
[SCond,SCond,SCond,SLoop]: namespaceDescriptor = outerScope.getNamespace(referencedName);
Hole 6:
[SCond,SLoop]: String aliasName = importDirective.getAliasName();
Hole 7:
[SCond,SLoop]: if (aliasName == null)
{
  aliasName = referenceExpression != null ? referenceExpression.getReferencedName() : null;
}
Hole 8:
[SCond,SLoop]: if (classifierDescriptor != null)
{
  context.getTrace().record(BindingContext.REFERENCE_TARGET, referenceExpression, classifierDescriptor);
  if (aliasName != null)
  {
    namespaceScope.importClassifierAlias(aliasName, classifierDescriptor);
  }
}
Hole 9:
[SCond,SLoop]: if (namespaceDescriptor != null)
{
  if (classifierDescriptor == null)
  {
    context.getTrace().record(BindingContext.REFERENCE_TARGET, referenceExpression, namespaceDescriptor);
  }
  if (aliasName != null)
  {
    namespaceScope.importNamespaceAlias(aliasName, namespaceDescriptor);
  }
}

