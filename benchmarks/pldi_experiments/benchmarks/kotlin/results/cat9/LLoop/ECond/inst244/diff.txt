Merge Instance for method (Ident "JavaDescriptorResolver",Ident "createJavaClassDescriptor",[RefType (ClassRefType (ClassType [(Ident "PsiClass",[])]))])
private ClassDescriptor createJavaClassDescriptor (@NotNull
                                                   final PsiClass psiClass)
{
  assert !classDescriptorCache.containsKey(psiClass.getQualifiedName()) :psiClass.getQualifiedName();
  classDescriptorCache.put(psiClass.getQualifiedName(), null);
  String name = psiClass.getName();
  JavaClassDescriptor classDescriptor = new JavaClassDescriptor(resolveParentDescriptor(psiClass), psiClass.isInterface() ? ClassKind.TRAIT : ClassKind.CLASS);
  classDescriptor.setName(name);
  List<JetType> supertypes = new ArrayList<JetType>();
  <?HOLE?>
  classDescriptor.setTypeConstructor(new TypeConstructorImpl(classDescriptor, Collections.<AnnotationDescriptor>emptyList(), psiClass.hasModifierProperty(PsiModifier.FINAL), name, typeParameters, supertypes));
  classDescriptor.setModality(Modality.convertFromFlags((psiClass.hasModifierProperty(PsiModifier.ABSTRACT) || psiClass.isInterface()), (!psiClass.hasModifierProperty(PsiModifier.FINAL))));
  classDescriptor.setVisibility(resolveVisibilityFromPsiModifiers(psiClass));
  classDescriptorCache.put(psiClass.getQualifiedName(), classDescriptor);
  classDescriptor.setUnsubstitutedMemberScope(new JavaClassMembersScope(classDescriptor, psiClass, semanticServices, false));
  <?HOLE?>
  supertypes.addAll(getSupertypes(psiClass));
  if (psiClass.isInterface())
  {
    classDescriptor.setSuperclassType(JetStandardClasses.getAnyType());
  }
  else
  {
    PsiClassType[] extendsListTypes = psiClass.getExtendsListTypes();
    assert (extendsListTypes.length == 0 || extendsListTypes.length) == 1;
    JetType superclassType = extendsListTypes.length == 0 ? JetStandardClasses.getAnyType() : semanticServices.getTypeTransformer().transformToType(extendsListTypes[0]);
    classDescriptor.setSuperclassType(superclassType);
  }
  PsiMethod[] psiConstructors = psiClass.getConstructors();
  if (psiConstructors.length == 0)
  {
    <?HOLE?>
  }
  else
  {
    for (PsiMethod constructor : psiConstructors) {
                                                    ConstructorDescriptorImpl constructorDescriptor = new ConstructorDescriptorImpl(classDescriptor, Collections.<AnnotationDescriptor>emptyList(), false);
                                                    constructorDescriptor.initialize(typeParameters, resolveParameterDescriptors(constructorDescriptor, constructor.getParameterList().getParameters()), Modality.FINAL, resolveVisibilityFromPsiModifiers(constructor));
                                                    constructorDescriptor.setReturnType(classDescriptor.getDefaultType());
                                                    classDescriptor.addConstructor(constructorDescriptor);
                                                    semanticServices.getTrace().record(BindingContext.CONSTRUCTOR, constructor, constructorDescriptor);
                                                  }
  }
  semanticServices.getTrace().record(BindingContext.CLASS, psiClass, classDescriptor);
  return classDescriptor;
}
Edit Base:
Hole 1:
[]: List<TypeParameterDescriptor> typeParameters = makeUninitializedTypeParameters(classDescriptor, psiClass.getTypeParameters());
Hole 2:
[]: initializeTypeParameters(psiClass);
Hole 3:
[SCond,SCond]: if (!psiClass.hasModifierProperty(PsiModifier.ABSTRACT) && !psiClass.isInterface())
{
  ConstructorDescriptorImpl constructorDescriptor = new ConstructorDescriptorImpl(classDescriptor, Collections.<AnnotationDescriptor>emptyList(), false);
  constructorDescriptor.initialize(typeParameters, Collections.<ValueParameterDescriptor>emptyList(), Modality.FINAL, classDescriptor.getVisibility());
  constructorDescriptor.setReturnType(classDescriptor.getDefaultType());
  classDescriptor.addConstructor(constructorDescriptor);
  semanticServices.getTrace().record(BindingContext.CONSTRUCTOR, psiClass, constructorDescriptor);
}

Edit A:
Hole 1:
[]: List<TypeParameterDescriptor> typeParameters = makeUninitializedTypeParameters(classDescriptor, psiClass.getTypeParameters());
Hole 2:
[]: initializeTypeParameters(psiClass);
Hole 3:
[SCond,SCond]: if (!psiClass.isInterface())
{
  ConstructorDescriptorImpl constructorDescriptor = new ConstructorDescriptorImpl(classDescriptor, Collections.<AnnotationDescriptor>emptyList(), false);
  constructorDescriptor.initialize(typeParameters, Collections.<ValueParameterDescriptor>emptyList(), Modality.FINAL, classDescriptor.getVisibility());
  constructorDescriptor.setReturnType(classDescriptor.getDefaultType());
  classDescriptor.addConstructor(constructorDescriptor);
  semanticServices.getTrace().record(BindingContext.CONSTRUCTOR, psiClass, constructorDescriptor);
}

Edit B:
Hole 1:
[]: List<TypeParameterDescriptor> typeParameters = resolveClassTypeParameters(psiClass, classDescriptor);
Hole 2:
[]: if (psiClass.getModifierList().findAnnotation(StdlibNames.JET_CLASS.getFqName()) == null)
{
  initializeTypeParameters(psiClass);
}
Hole 3:
[SCond]: if (!psiClass.hasModifierProperty(PsiModifier.ABSTRACT) && !psiClass.isInterface())
{
  ConstructorDescriptorImpl constructorDescriptor = new ConstructorDescriptorImpl(classDescriptor, Collections.<AnnotationDescriptor>emptyList(), false);
  constructorDescriptor.initialize(typeParameters, Collections.<ValueParameterDescriptor>emptyList(), Modality.FINAL, classDescriptor.getVisibility());
  constructorDescriptor.setReturnType(classDescriptor.getDefaultType());
  classDescriptor.addConstructor(constructorDescriptor);
  semanticServices.getTrace().record(BindingContext.CONSTRUCTOR, psiClass, constructorDescriptor);
}

Edit M:
Hole 1:
[]: List<TypeParameterDescriptor> typeParameters = resolveClassTypeParameters(psiClass, classDescriptor);
Hole 2:
[]: if (psiClass.getModifierList().findAnnotation(StdlibNames.JET_CLASS.getFqName()) == null)
{
  initializeTypeParameters(psiClass);
}
Hole 3:
[SCond]: if (!psiClass.isInterface())
{
  ConstructorDescriptorImpl constructorDescriptor = new ConstructorDescriptorImpl(classDescriptor, Collections.<AnnotationDescriptor>emptyList(), false);
  constructorDescriptor.initialize(typeParameters, Collections.<ValueParameterDescriptor>emptyList(), Modality.FINAL, classDescriptor.getVisibility());
  constructorDescriptor.setReturnType(classDescriptor.getDefaultType());
  classDescriptor.addConstructor(constructorDescriptor);
  semanticServices.getTrace().record(BindingContext.CONSTRUCTOR, psiClass, constructorDescriptor);
}

