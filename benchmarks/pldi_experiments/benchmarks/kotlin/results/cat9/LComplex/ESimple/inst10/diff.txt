Merge Instance for method (Ident "AbstractFindUsagesTest",Ident "doTest",[RefType (ClassRefType (ClassType [(Ident "String",[])]))])
protected <T extends PsiElement> void doTest (@NotNull
                                              String path) throws Exception
{
  File mainFile = new File(path);
  final String mainFileName = mainFile.getName();
  String mainFileText = FileUtil.loadFile(mainFile, true);
  final String prefix = mainFileName.substring(0, (mainFileName.indexOf('.') + 1));
  boolean isPropertiesFile = FileUtilRt.getExtension(path).equals("properties");
  Class<T> caretElementClass;
  if (!isPropertiesFile)
  {
    List<String> caretElementClassNames = InTextDirectivesUtils.findLinesWithPrefixesRemoved(mainFileText, "// PSI_ELEMENT: ");
    assert caretElementClassNames.size() == 1;
    caretElementClass = (Class<T>) Class.forName(caretElementClassNames.get(0));
  }
  else
  {
    caretElementClass = (Class<T>) (InTextDirectivesUtils.isDirectiveDefined(mainFileText, "## FIND_FILE_USAGES") ? PropertiesFile.class : Property.class);
  }
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: OptionsParser parser = OptionsParser.getParserByPsiElementClass(caretElementClass);
Hole 2:
[]: String rootPath = path.substring(0, (path.lastIndexOf("/") + 1));
Hole 3:
[]: File rootDir = new File(rootPath);
Hole 4:
[]: File[] extraFiles = rootDir.listFiles(new FilenameFilter()
                                      {
                                        @Override
                                        public boolean accept (@NotNull
                                                               File dir, @NotNull
                                                                         String name)
                                        {
                                          if (!name.startsWith(prefix) || name.equals(mainFileName))
                                            return false;
                                          String ext = FileUtilRt.getExtension(name);
                                          return (ext.equals("kt") || ext.equals("java") || ext.equals("xml") || ext.equals("properties") || ext.equals("txt") && !name.endsWith(".results.txt"));
                                        }
                                      });
Hole 5:
[]: assert extraFiles != null;
Hole 6:
[]: for (File file : extraFiles) {
                               myFixture.configureByFile((rootPath + file.getName()));
                             }
Hole 7:
[]: myFixture.configureByFile(path);
Hole 8:
[]: PsiElement caretElement = InTextDirectivesUtils.isDirectiveDefined(mainFileText, "// FIND_BY_REF") ? TargetElementUtilBase.findTargetElement(myFixture.getEditor(), (TargetElementUtilBase.REFERENCED_ELEMENT_ACCEPTED | JavaTargetElementEvaluator.NEW_AS_CONSTRUCTOR)) : myFixture.getElementAtCaret();
Hole 9:
[]: assertNotNull(caretElement);
Hole 10:
[]: assertInstanceOf(caretElement, caretElementClass);
Hole 11:
[]: PsiFile containingFile = caretElement.getContainingFile();
Hole 12:
[]: boolean isLibraryElement = containingFile != null && ProjectRootsUtil.isLibraryFile(getProject(), containingFile.getVirtualFile());
Hole 13:
[]: FindUsagesOptions options = parser != null ? parser.parse(mainFileText, getProject()) : null;
Hole 14:
[]: if (isLibraryElement)
{
  PsiElement originalElement = caretElement.getOriginalElement();
  findUsagesAndCheckResults(mainFileText, prefix, rootPath, originalElement, options);
  PsiElement navigationElement = caretElement.getNavigationElement();
  if (navigationElement != originalElement)
  {
    findUsagesAndCheckResults(mainFileText, prefix, rootPath, navigationElement, options);
  }
}
else
{
  findUsagesAndCheckResults(mainFileText, prefix, rootPath, caretElement, options);
}

Edit A:
Hole 1:
[]: OptionsParser parser = OptionsParser.getParserByPsiElementClass(caretElementClass);
Hole 2:
[]: String rootPath = path.substring(0, (path.lastIndexOf("/") + 1));
Hole 3:
[]: File rootDir = new File(rootPath);
Hole 4:
[]: File[] extraFiles = rootDir.listFiles(new FilenameFilter()
                                      {
                                        @Override
                                        public boolean accept (@NotNull
                                                               File dir, @NotNull
                                                                         String name)
                                        {
                                          if (!name.startsWith(prefix) || name.equals(mainFileName))
                                            return false;
                                          String ext = FileUtilRt.getExtension(name);
                                          return (ext.equals("kt") || ext.equals("java") || ext.equals("xml") || ext.equals("properties") || ext.equals("txt") && !name.endsWith(".results.txt"));
                                        }
                                      });
Hole 5:
[]: assert extraFiles != null;
Hole 6:
[]: for (File file : extraFiles) {
                               myFixture.configureByFile((rootPath + file.getName()));
                             }
Hole 7:
[]: myFixture.configureByFile(path);
Hole 8:
[]: PsiElement caretElement = InTextDirectivesUtils.isDirectiveDefined(mainFileText, "// FIND_BY_REF") ? TargetElementUtilBase.findTargetElement(myFixture.getEditor(), (TargetElementUtilBase.REFERENCED_ELEMENT_ACCEPTED | TargetElementUtil.NEW_AS_CONSTRUCTOR)) : myFixture.getElementAtCaret();
Hole 9:
[]: assertNotNull(caretElement);
Hole 10:
[]: assertInstanceOf(caretElement, caretElementClass);
Hole 11:
[]: PsiFile containingFile = caretElement.getContainingFile();
Hole 12:
[]: boolean isLibraryElement = containingFile != null && ProjectRootsUtil.isLibraryFile(getProject(), containingFile.getVirtualFile());
Hole 13:
[]: FindUsagesOptions options = parser != null ? parser.parse(mainFileText, getProject()) : null;
Hole 14:
[]: if (isLibraryElement)
{
  PsiElement originalElement = caretElement.getOriginalElement();
  findUsagesAndCheckResults(mainFileText, prefix, rootPath, originalElement, options);
  PsiElement navigationElement = caretElement.getNavigationElement();
  if (navigationElement != originalElement)
  {
    findUsagesAndCheckResults(mainFileText, prefix, rootPath, navigationElement, options);
  }
}
else
{
  findUsagesAndCheckResults(mainFileText, prefix, rootPath, caretElement, options);
}

Edit B:
Hole 1:
[]: List<String> fixtureClasses = InTextDirectivesUtils.findListWithPrefixes(mainFileText, "// FIXTURE_CLASS: ");
Hole 2:
[]: for (String fixtureClass : fixtureClasses) {
                                             TestFixtureExtension.Companion.loadFixture(fixtureClass, myFixture.getModule());
                                           }
Hole 3:
[]: try
{
  extraConfig(path);
  OptionsParser parser = OptionsParser.getParserByPsiElementClass(caretElementClass);
  String rootPath = path.substring(0, (path.lastIndexOf("/") + 1));
  File rootDir = new File(rootPath);
  File[] extraFiles = rootDir.listFiles(new FilenameFilter()
                                        {
                                          @Override
                                          public boolean accept (@NotNull
                                                                 File dir, @NotNull
                                                                           String name)
                                          {
                                            if (!name.startsWith(prefix) || name.equals(mainFileName))
                                              return false;
                                            String ext = FileUtilRt.getExtension(name);
                                            return (ext.equals("kt") || ext.equals("java") || ext.equals("xml") || ext.equals("properties") || ext.equals("txt") && !name.endsWith(".results.txt"));
                                          }
                                        });
  assert extraFiles != null;
  for (File file : extraFiles) {
                                 myFixture.configureByFile((rootPath + file.getName()));
                               }
  myFixture.configureByFile(path);
  PsiElement caretElement = InTextDirectivesUtils.isDirectiveDefined(mainFileText, "// FIND_BY_REF") ? TargetElementUtilBase.findTargetElement(myFixture.getEditor(), (TargetElementUtilBase.REFERENCED_ELEMENT_ACCEPTED | JavaTargetElementEvaluator.NEW_AS_CONSTRUCTOR)) : myFixture.getElementAtCaret();
  assertNotNull(caretElement);
  assertInstanceOf(caretElement, caretElementClass);
  PsiFile containingFile = caretElement.getContainingFile();
  boolean isLibraryElement = containingFile != null && ProjectRootsUtil.isLibraryFile(getProject(), containingFile.getVirtualFile());
  FindUsagesOptions options = parser != null ? parser.parse(mainFileText, getProject()) : null;
  if (isLibraryElement)
  {
    PsiElement originalElement = caretElement.getOriginalElement();
    findUsagesAndCheckResults(mainFileText, prefix, rootPath, originalElement, options);
    PsiElement navigationElement = caretElement.getNavigationElement();
    if (navigationElement != originalElement)
    {
      findUsagesAndCheckResults(mainFileText, prefix, rootPath, navigationElement, options);
    }
  }
  else
  {
    findUsagesAndCheckResults(mainFileText, prefix, rootPath, caretElement, options);
  }
}
finally {
          for (String fixtureClass : fixtureClasses) {
                                                       TestFixtureExtension.Companion.unloadFixture(fixtureClass);
                                                     }
        }
Hole 4:
[]: <SKIP>
Hole 5:
[]: <SKIP>
Hole 6:
[]: <SKIP>
Hole 7:
[]: <SKIP>
Hole 8:
[]: <SKIP>
Hole 9:
[]: <SKIP>
Hole 10:
[]: <SKIP>
Hole 11:
[]: <SKIP>
Hole 12:
[]: <SKIP>
Hole 13:
[]: <SKIP>
Hole 14:
[]: <SKIP>

Edit M:
Hole 1:
[]: List<String> fixtureClasses = InTextDirectivesUtils.findListWithPrefixes(mainFileText, "// FIXTURE_CLASS: ");
Hole 2:
[]: for (String fixtureClass : fixtureClasses) {
                                             TestFixtureExtension.Companion.loadFixture(fixtureClass, myFixture.getModule());
                                           }
Hole 3:
[]: try
{
  extraConfig(path);
  OptionsParser parser = OptionsParser.getParserByPsiElementClass(caretElementClass);
  String rootPath = path.substring(0, (path.lastIndexOf("/") + 1));
  File rootDir = new File(rootPath);
  File[] extraFiles = rootDir.listFiles(new FilenameFilter()
                                        {
                                          @Override
                                          public boolean accept (@NotNull
                                                                 File dir, @NotNull
                                                                           String name)
                                          {
                                            if (!name.startsWith(prefix) || name.equals(mainFileName))
                                              return false;
                                            String ext = FileUtilRt.getExtension(name);
                                            return (ext.equals("kt") || ext.equals("java") || ext.equals("xml") || ext.equals("properties") || ext.equals("txt") && !name.endsWith(".results.txt"));
                                          }
                                        });
  assert extraFiles != null;
  for (File file : extraFiles) {
                                 myFixture.configureByFile((rootPath + file.getName()));
                               }
  myFixture.configureByFile(path);
  PsiElement caretElement = InTextDirectivesUtils.isDirectiveDefined(mainFileText, "// FIND_BY_REF") ? TargetElementUtilBase.findTargetElement(myFixture.getEditor(), (TargetElementUtilBase.REFERENCED_ELEMENT_ACCEPTED | TargetElementUtil.NEW_AS_CONSTRUCTOR)) : myFixture.getElementAtCaret();
  assertNotNull(caretElement);
  assertInstanceOf(caretElement, caretElementClass);
  PsiFile containingFile = caretElement.getContainingFile();
  boolean isLibraryElement = containingFile != null && ProjectRootsUtil.isLibraryFile(getProject(), containingFile.getVirtualFile());
  FindUsagesOptions options = parser != null ? parser.parse(mainFileText, getProject()) : null;
  if (isLibraryElement)
  {
    PsiElement originalElement = caretElement.getOriginalElement();
    findUsagesAndCheckResults(mainFileText, prefix, rootPath, originalElement, options);
    PsiElement navigationElement = caretElement.getNavigationElement();
    if (navigationElement != originalElement)
    {
      findUsagesAndCheckResults(mainFileText, prefix, rootPath, navigationElement, options);
    }
  }
  else
  {
    findUsagesAndCheckResults(mainFileText, prefix, rootPath, caretElement, options);
  }
}
finally {
          for (String fixtureClass : fixtureClasses) {
                                                       TestFixtureExtension.Companion.unloadFixture(fixtureClass);
                                                     }
        }
Hole 4:
[]: <SKIP>
Hole 5:
[]: <SKIP>
Hole 6:
[]: <SKIP>
Hole 7:
[]: <SKIP>
Hole 8:
[]: <SKIP>
Hole 9:
[]: <SKIP>
Hole 10:
[]: <SKIP>
Hole 11:
[]: <SKIP>
Hole 12:
[]: <SKIP>
Hole 13:
[]: <SKIP>
Hole 14:
[]: <SKIP>

