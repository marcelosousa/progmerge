Merge Instance for method (Ident "ImplementationBodyCodegen",Ident "generatePrimaryConstructor",[])
protected void generatePrimaryConstructor ()
{
  if (ignoreIfTraitOrAnnotation())
    return;
  if (kind != OwnerKind.IMPLEMENTATION)
  {
    throw new IllegalStateException("incorrect kind for primary constructor: " + kind);
  }
  ConstructorDescriptor constructorDescriptor = bindingContext.get(BindingContext.CONSTRUCTOR, myClass);
  final CodegenContext.ConstructorContext constructorContext = context.intoConstructor(constructorDescriptor);
  lookupConstructorExpressionsInClosureIfPresent(constructorContext);
  MutableClosure closure = context.closure;
  boolean hasThis0 = (closure != null && closure.getCaptureThis()) != null;
  final CallableMethod callableMethod = typeMapper.mapToCallableMethod(constructorDescriptor, context.closure);
  final JvmMethodSignature constructorMethod = callableMethod.getSignature();
  assert constructorDescriptor != null;
  <?HOLE?>
  final MethodVisitor mv = v.newMethod(myClass, flags, constructorMethod.getName(), constructorMethod.getAsmMethod().getDescriptor(), constructorMethod.getGenericsSignature(), null);
  if (state.getClassBuilderMode() == ClassBuilderMode.SIGNATURES)
    return;
  AnnotationVisitor jetConstructorVisitor = mv.visitAnnotation(JvmStdlibNames.JET_CONSTRUCTOR.getDescriptor(), true);
  <?HOLE?>
  if (JvmStdlibNames.FLAGS_DEFAULT_VALUE != flagsValue)
  {
    jetConstructorVisitor.visit(JvmStdlibNames.JET_CLASS_FLAGS_FIELD, flagsValue);
  }
  jetConstructorVisitor.visitEnd();
  AnnotationCodegen.forMethod(mv, typeMapper).genAnnotations(constructorDescriptor);
  writeParameterAnnotations(constructorDescriptor, constructorMethod, hasThis0, mv);
  if (state.getClassBuilderMode() == ClassBuilderMode.STUBS)
  {
    StubCodegen.generateStubCode(mv);
    return;
  }
  generatePrimiryConstructorImpl(constructorDescriptor, constructorContext, constructorMethod, callableMethod, hasThis0, closure, mv);
}
Edit Base:
Hole 1:
[]: int flags = JetTypeMapper.getAccessModifiers(constructorDescriptor, 0);
Hole 2:
[]: int flagsValue = BitSetUtils.toInt(CodegenUtil.getFlagsForVisibility(constructorDescriptor.getVisibility()));

Edit A:
Hole 1:
[]: int flags = getVisibilityAccessFlag(constructorDescriptor);
Hole 2:
[]: int flagsValue = BitSetUtils.toInt(CodegenUtil.getFlagsForVisibility(constructorDescriptor.getVisibility()));

Edit B:
Hole 1:
[]: int flags = getAccessModifiers(constructorDescriptor, 0);
Hole 2:
[]: int flagsValue = BitSetUtils.toInt(getFlagsForVisibility(constructorDescriptor.getVisibility()));

Edit M:
Hole 1:
[]: int flags = getVisibilityAccessFlag(constructorDescriptor);
Hole 2:
[]: int flagsValue = BitSetUtils.toInt(getFlagsForVisibility(constructorDescriptor.getVisibility()));

