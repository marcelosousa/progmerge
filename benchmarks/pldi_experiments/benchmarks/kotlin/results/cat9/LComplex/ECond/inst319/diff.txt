Merge Instance for method (Ident "ExpressionCodegen",Ident "visitArrayAccessExpression",[RefType (ClassRefType (ClassType [(Ident "JetArrayAccessExpression",[])])),RefType (ClassRefType (ClassType [(Ident "StackValue",[])]))])
@Override
 public StackValue visitArrayAccessExpression (JetArrayAccessExpression expression, StackValue receiver)
{
  final JetExpression array = expression.getArrayExpression();
  final Type arrayType = expressionType(array);
  gen(array, arrayType);
  generateArrayIndex(expression);
  if (arrayType.getSort() == Type.ARRAY)
  {
    final Type elementType = arrayType.getElementType();
    return StackValue.arrayElement(elementType);
  }
  else
  {
    final PsiElement declaration = BindingContextUtils.resolveToDeclarationPsiElement(bindingContext, expression);
    <?HOLE?>
    final CallableMethod accessor;
    if (declaration instanceof PsiMethod)
    {
      accessor = JetTypeMapper.mapToCallableMethod(((PsiMethod) declaration));
    }
    else
      if (declaration instanceof JetNamedFunction)
      {
        accessor = typeMapper.mapToCallableMethod(((JetNamedFunction) declaration));
      }
      else
      {
        <?HOLE?>
      }
    boolean isGetter = accessor.getSignature().getName().equals("get");
    <?HOLE?>
  }
}
Edit Base:
Hole 1:
[SCond]: <SKIP>
Hole 2:
[SCond,SCond,SCond]: throw new UnsupportedOperationException("unknown accessor type");
Hole 3:
[SCond]: return StackValue.collectionElement(JetTypeMapper.TYPE_OBJECT, (isGetter ? accessor : null), (isGetter ? null : accessor));

Edit A:
Hole 1:
[SCond]: assert declaration != null :"No declaration found for " + expression.getText();
Hole 2:
[SCond,SCond,SCond]: throw new UnsupportedOperationException("unknown accessor type: " + declaration);
Hole 3:
[SCond]: return StackValue.collectionElement(JetTypeMapper.TYPE_OBJECT, (isGetter ? accessor : null), (isGetter ? null : accessor));

Edit B:
Hole 1:
[SCond]: <SKIP>
Hole 2:
[SCond,SCond,SCond]: throw new UnsupportedOperationException("unknown accessor type");
Hole 3:
[SCond]: return StackValue.collectionElement((isGetter ? accessor.getSignature().getReturnType() : accessor.getSignature().getArgumentTypes()[1]), (isGetter ? accessor : null), (isGetter ? null : accessor));

Edit M:
Hole 1:
[SCond]: assert declaration != null :"No declaration found for " + expression.getText();
Hole 2:
[SCond,SCond,SCond]: throw new UnsupportedOperationException("unknown accessor type: " + declaration);
Hole 3:
[SCond]: return StackValue.collectionElement((isGetter ? accessor.getSignature().getReturnType() : accessor.getSignature().getArgumentTypes()[1]), (isGetter ? accessor : null), (isGetter ? null : accessor));

