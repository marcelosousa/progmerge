Merge Instance for method (Ident "BodyResolver",Ident "resolveSecondaryConstructorBody",[RefType (ClassRefType (ClassType [(Ident "JetConstructor",[])])),RefType (ClassRefType (ClassType [(Ident "ConstructorDescriptor",[])])),RefType (ClassRefType (ClassType [(Ident "JetScope",[])]))])
private void resolveSecondaryConstructorBody (JetConstructor declaration, final ConstructorDescriptor descriptor, final JetScope declaringScope)
{
  final JetScope functionInnerScope = getInnerScopeForConstructor(descriptor, declaringScope, false);
  <?HOLE?>
  JetClass containingClass = PsiTreeUtil.getParentOfType(declaration, JetClass.class);
  assert containingClass != null :"This must be guaranteed by the parser";
  if (!containingClass.hasPrimaryConstructor())
  {
    context.getTrace().report(SECONDARY_CONSTRUCTOR_BUT_NO_PRIMARY.on(declaration.getNameNode()));
  }
  else
  {
    List<JetDelegationSpecifier> initializers = declaration.getInitializers();
    if (initializers.isEmpty())
    {
      context.getTrace().report(SECONDARY_CONSTRUCTOR_NO_INITIALIZER_LIST.on(declaration.getNameNode()));
    }
    else
    {
      <?HOLE?>
      for (int i = 1, initializersSize = initializers.size() ; i < initializersSize ; i++)
      {
        JetDelegationSpecifier initializer = initializers.get(i);
        context.getTrace().report(MANY_CALLS_TO_THIS.on(initializer));
      }
    }
  }
  JetExpression bodyExpression = declaration.getBodyExpression();
  if (bodyExpression != null)
  {
    <?HOLE?>
    <?HOLE?>
    <?HOLE?>
    <?HOLE?>
  }
}
Edit Base:
Hole 1:
[]: final JetTypeInferrer.Services typeInferrerForInitializers = context.getSemanticServices().getTypeInferrerServices(traceForConstructors, JetFlowInformationProvider.NONE);
Hole 2:
[SCond,SCond]: initializers.get(0).accept(new JetVisitorVoid()
                           {
                             @Override
                             public void visitDelegationToSuperCallSpecifier (JetDelegatorToSuperCall call)
                             {
                               JetTypeReference typeReference = call.getTypeReference();
                               if (typeReference != null)
                               {
                                 typeInferrerForInitializers.getCallResolver().resolveCall(context.getTrace(), functionInnerScope, ReceiverDescriptor.NO_RECEIVER, call, NO_EXPECTED_TYPE);
                               }
                             }
                             @Override
                             public void visitDelegationToThisCall (JetDelegatorToThisCall call)
                             {
                               ClassDescriptor classDescriptor = descriptor.getContainingDeclaration();
                               typeInferrerForInitializers.getCallResolver().resolveCall(context.getTrace(), functionInnerScope, ReceiverDescriptor.NO_RECEIVER, call, NO_EXPECTED_TYPE);
                             }
                             @Override
                             public void visitDelegationByExpressionSpecifier (JetDelegatorByExpressionSpecifier specifier)
                             {
                               context.getTrace().report(BY_IN_SECONDARY_CONSTRUCTOR.on(specifier));
                             }
                             @Override
                             public void visitDelegationToSuperClassSpecifier (JetDelegatorToSuperClass specifier)
                             {
                               context.getTrace().report(INITIALIZER_WITH_NO_ARGUMENTS.on(specifier));
                             }
                             @Override
                             public void visitDelegationSpecifier (JetDelegationSpecifier specifier)
                             {
                               throw new IllegalStateException();
                             }
                           });
Hole 3:
[SCond]: context.getClassDescriptorResolver().computeFlowData(declaration, bodyExpression);
Hole 4:
[SCond]: JetFlowInformationProvider flowInformationProvider = context.getClassDescriptorResolver().computeFlowData(declaration, bodyExpression);
Hole 5:
[SCond]: JetTypeInferrer.Services typeInferrer = context.getSemanticServices().getTypeInferrerServices(traceForConstructors, flowInformationProvider);
Hole 6:
[SCond]: typeInferrer.checkFunctionReturnType(functionInnerScope, declaration, JetStandardClasses.getUnitType());

Edit A:
Hole 1:
[]: final JetTypeInferrer.Services typeInferrerForInitializers = context.getSemanticServices().getTypeInferrerServices(traceForConstructors, JetFlowInformationProvider.NONE);
Hole 2:
[SCond,SCond]: initializers.get(0).accept(new JetVisitorVoid()
                           {
                             @Override
                             public void visitDelegationToSuperCallSpecifier (JetDelegatorToSuperCall call)
                             {
                               JetTypeReference typeReference = call.getTypeReference();
                               if (typeReference != null)
                               {
                                 typeInferrerForInitializers.getCallResolver().resolveCall(context.getTrace(), functionInnerScope, CallMaker.makeCall(ReceiverDescriptor.NO_RECEIVER, null, call), NO_EXPECTED_TYPE);
                               }
                             }
                             @Override
                             public void visitDelegationToThisCall (JetDelegatorToThisCall call)
                             {
                               ClassDescriptor classDescriptor = descriptor.getContainingDeclaration();
                               typeInferrerForInitializers.getCallResolver().resolveCall(context.getTrace(), functionInnerScope, CallMaker.makeCall(ReceiverDescriptor.NO_RECEIVER, null, call), NO_EXPECTED_TYPE);
                             }
                             @Override
                             public void visitDelegationByExpressionSpecifier (JetDelegatorByExpressionSpecifier specifier)
                             {
                               context.getTrace().report(BY_IN_SECONDARY_CONSTRUCTOR.on(specifier));
                             }
                             @Override
                             public void visitDelegationToSuperClassSpecifier (JetDelegatorToSuperClass specifier)
                             {
                               context.getTrace().report(INITIALIZER_WITH_NO_ARGUMENTS.on(specifier));
                             }
                             @Override
                             public void visitDelegationSpecifier (JetDelegationSpecifier specifier)
                             {
                               throw new IllegalStateException();
                             }
                           });
Hole 3:
[SCond]: context.getClassDescriptorResolver().computeFlowData(declaration, bodyExpression);
Hole 4:
[SCond]: JetFlowInformationProvider flowInformationProvider = context.getClassDescriptorResolver().computeFlowData(declaration, bodyExpression);
Hole 5:
[SCond]: JetTypeInferrer.Services typeInferrer = context.getSemanticServices().getTypeInferrerServices(traceForConstructors, flowInformationProvider);
Hole 6:
[SCond]: typeInferrer.checkFunctionReturnType(functionInnerScope, declaration, JetStandardClasses.getUnitType());

Edit B:
Hole 1:
[]: final JetTypeInferrer.Services typeInferrerForInitializers = context.getSemanticServices().getTypeInferrerServices(traceForConstructors);
Hole 2:
[SCond,SCond]: initializers.get(0).accept(new JetVisitorVoid()
                           {
                             @Override
                             public void visitDelegationToSuperCallSpecifier (JetDelegatorToSuperCall call)
                             {
                               JetTypeReference typeReference = call.getTypeReference();
                               if (typeReference != null)
                               {
                                 typeInferrerForInitializers.getCallResolver().resolveCall(context.getTrace(), functionInnerScope, ReceiverDescriptor.NO_RECEIVER, call, NO_EXPECTED_TYPE);
                               }
                             }
                             @Override
                             public void visitDelegationToThisCall (JetDelegatorToThisCall call)
                             {
                               ClassDescriptor classDescriptor = descriptor.getContainingDeclaration();
                               typeInferrerForInitializers.getCallResolver().resolveCall(context.getTrace(), functionInnerScope, ReceiverDescriptor.NO_RECEIVER, call, NO_EXPECTED_TYPE);
                             }
                             @Override
                             public void visitDelegationByExpressionSpecifier (JetDelegatorByExpressionSpecifier specifier)
                             {
                               context.getTrace().report(BY_IN_SECONDARY_CONSTRUCTOR.on(specifier));
                             }
                             @Override
                             public void visitDelegationToSuperClassSpecifier (JetDelegatorToSuperClass specifier)
                             {
                               context.getTrace().report(INITIALIZER_WITH_NO_ARGUMENTS.on(specifier));
                             }
                             @Override
                             public void visitDelegationSpecifier (JetDelegationSpecifier specifier)
                             {
                               throw new IllegalStateException();
                             }
                           });
Hole 3:
[SCond]: JetTypeInferrer.Services typeInferrer = context.getSemanticServices().getTypeInferrerServices(traceForConstructors);
Hole 4:
[SCond]: typeInferrer.checkFunctionReturnType(functionInnerScope, declaration, descriptor, JetStandardClasses.getUnitType());
Hole 5:
[SCond]: <SKIP>
Hole 6:
[SCond]: <SKIP>

Edit M:
Hole 1:
[]: final JetTypeInferrer.Services typeInferrerForInitializers = context.getSemanticServices().getTypeInferrerServices(traceForConstructors);
Hole 2:
[SCond,SCond]: initializers.get(0).accept(new JetVisitorVoid()
                           {
                             @Override
                             public void visitDelegationToSuperCallSpecifier (JetDelegatorToSuperCall call)
                             {
                               JetTypeReference typeReference = call.getTypeReference();
                               if (typeReference != null)
                               {
                                 typeInferrerForInitializers.getCallResolver().resolveCall(context.getTrace(), functionInnerScope, CallMaker.makeCall(ReceiverDescriptor.NO_RECEIVER, null, call), NO_EXPECTED_TYPE);
                               }
                             }
                             @Override
                             public void visitDelegationToThisCall (JetDelegatorToThisCall call)
                             {
                               ClassDescriptor classDescriptor = descriptor.getContainingDeclaration();
                               typeInferrerForInitializers.getCallResolver().resolveCall(context.getTrace(), functionInnerScope, CallMaker.makeCall(ReceiverDescriptor.NO_RECEIVER, null, call), NO_EXPECTED_TYPE);
                             }
                             @Override
                             public void visitDelegationByExpressionSpecifier (JetDelegatorByExpressionSpecifier specifier)
                             {
                               context.getTrace().report(BY_IN_SECONDARY_CONSTRUCTOR.on(specifier));
                             }
                             @Override
                             public void visitDelegationToSuperClassSpecifier (JetDelegatorToSuperClass specifier)
                             {
                               context.getTrace().report(INITIALIZER_WITH_NO_ARGUMENTS.on(specifier));
                             }
                             @Override
                             public void visitDelegationSpecifier (JetDelegationSpecifier specifier)
                             {
                               throw new IllegalStateException();
                             }
                           });
Hole 3:
[SCond]: JetTypeInferrer.Services typeInferrer = context.getSemanticServices().getTypeInferrerServices(traceForConstructors);
Hole 4:
[SCond]: typeInferrer.checkFunctionReturnType(functionInnerScope, declaration, descriptor, JetStandardClasses.getUnitType());
Hole 5:
[SCond]: <SKIP>
Hole 6:
[SCond]: <SKIP>

