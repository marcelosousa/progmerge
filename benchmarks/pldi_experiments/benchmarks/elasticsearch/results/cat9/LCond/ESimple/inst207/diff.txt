Merge Instance for method (Ident "MatchQueryBuilder",Ident "doXContent",[RefType (ClassRefType (ClassType [(Ident "XContentBuilder",[])])),RefType (ClassRefType (ClassType [(Ident "Params",[])]))])
@Override
 public void doXContent (XContentBuilder builder, Params params) throws IOException
{
  <?HOLE?>
  builder.startObject(name);
  builder.field("query", text);
  if (type != null)
  {
    builder.field("type", type.toString().toLowerCase(Locale.ENGLISH));
  }
  if (operator != null)
  {
    builder.field("operator", operator.toString());
  }
  if (analyzer != null)
  {
    builder.field("analyzer", analyzer);
  }
  <?HOLE?>
  if (slop != null)
  {
    builder.field("slop", slop);
  }
  if (fuzziness != null)
  {
    fuzziness.toXContent(builder, params);
  }
  if (prefixLength != null)
  {
    builder.field("prefix_length", prefixLength);
  }
  if (maxExpansions != null)
  {
    builder.field("max_expansions", maxExpansions);
  }
  if (minimumShouldMatch != null)
  {
    builder.field("minimum_should_match", minimumShouldMatch);
  }
  <?HOLE?>
  if (fuzzyRewrite != null)
  {
    builder.field("fuzzy_rewrite", fuzzyRewrite);
  }
  if (fuzzyTranspositions != null)
  {
    builder.field("fuzzy_transpositions", fuzzyTranspositions);
  }
  if (lenient != null)
  {
    builder.field("lenient", lenient);
  }
  if (zeroTermsQuery != null)
  {
    builder.field("zero_terms_query", zeroTermsQuery.toString());
  }
  if (cutoff_Frequency != null)
  {
    builder.field("cutoff_frequency", cutoff_Frequency);
  }
  <?HOLE?>
  builder.endObject();
  builder.endObject();
}
Edit Base:
Hole 1:
[]: builder.startObject(MatchQueryParser.NAME);
Hole 2:
[]: if (boost != null)
{
  builder.field("boost", boost);
}
Hole 3:
[]: if (rewrite != null)
{
  builder.field("rewrite", rewrite);
}
Hole 4:
[]: if (queryName != null)
{
  builder.field("_name", queryName);
}

Edit A:
Hole 1:
[]: builder.startObject(NAME);
Hole 2:
[]: <SKIP>
Hole 3:
[]: if (rewrite != null)
{
  builder.field("rewrite", rewrite);
}
Hole 4:
[]: printBoostAndQueryName(builder);

Edit B:
Hole 1:
[]: builder.startObject(MatchQueryParser.NAME);
Hole 2:
[]: if (boost != null)
{
  builder.field("boost", boost);
}
Hole 3:
[]: <SKIP>
Hole 4:
[]: if (queryName != null)
{
  builder.field("_name", queryName);
}

Edit M:
Hole 1:
[]: builder.startObject(NAME);
Hole 2:
[]: <SKIP>
Hole 3:
[]: <SKIP>
Hole 4:
[]: printBoostAndQueryName(builder);

