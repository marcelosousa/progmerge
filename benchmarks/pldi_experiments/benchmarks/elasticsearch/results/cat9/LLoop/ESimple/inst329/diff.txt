Merge Instance for method (Ident "ParentFieldLoadingTest",Ident "testChangingEagerParentFieldLoadingAtRuntime",[])
@Test
 public void testChangingEagerParentFieldLoadingAtRuntime () throws Exception
{
  assertAcked(prepareCreate("test").setSettings(indexSettings).addMapping("parent").addMapping("child", "_parent", "type=parent"));
  ensureGreen();
  client().prepareIndex("test", "parent", "1").setSource("{}").get();
  client().prepareIndex("test", "child", "1").setParent("1").setSource("{}").get();
  refresh();
  ClusterStatsResponse response = client().admin().cluster().prepareClusterStats().get();
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  assertAcked(putMappingResponse);
  <?HOLE?>
  client().prepareIndex("test", "dummy", "dummy").setSource("{}").get();
  refresh();
  response = client().admin().cluster().prepareClusterStats().get();
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: long fielddataSizeDefault = response.getIndicesStats().getFieldData().getMemorySizeInBytes();
Hole 2:
[]: assertThat(fielddataSizeDefault, greaterThan(0L));
Hole 3:
[]: PutMappingResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("child").setSource(childMapping(FieldMapper.Loading.EAGER_GLOBAL_ORDINALS)).get();
Hole 4:
[]: assertBusy(new Runnable()
           {
             @Override
             public void run ()
             {
               ClusterState clusterState = internalCluster().clusterService().state();
               ShardRouting shardRouting = clusterState.routingTable().index("test").shard(0).getShards().get(0);
               String nodeName = clusterState.getNodes().get(shardRouting.currentNodeId()).getName();
               boolean verified = false;
               IndicesService indicesService = internalCluster().getInstance(IndicesService.class, nodeName);
               IndexService indexService = indicesService.indexService("test");
               if (indexService != null)
               {
                 MapperService mapperService = indexService.mapperService();
                 DocumentMapper documentMapper = mapperService.documentMapper("child");
                 if (documentMapper != null)
                 {
                   verified = documentMapper.parentFieldMapper().fieldDataType().getLoading() == FieldMapper.Loading.EAGER_GLOBAL_ORDINALS;
                 }
               }
               assertTrue(verified);
             }
           });
Hole 5:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), greaterThan(fielddataSizeDefault));

Edit A:
Hole 1:
[]: long fielddataSizeDefault = response.getIndicesStats().getFieldData().getMemorySizeInBytes();
Hole 2:
[]: assertThat(fielddataSizeDefault, greaterThan(0L));
Hole 3:
[]: PutMappingResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("child").setSource(childMapping(MappedFieldType.Loading.EAGER_GLOBAL_ORDINALS)).get();
Hole 4:
[]: assertBusy(new Runnable()
           {
             @Override
             public void run ()
             {
               ClusterState clusterState = internalCluster().clusterService().state();
               ShardRouting shardRouting = clusterState.routingTable().index("test").shard(0).getShards().get(0);
               String nodeName = clusterState.getNodes().get(shardRouting.currentNodeId()).getName();
               boolean verified = false;
               IndicesService indicesService = internalCluster().getInstance(IndicesService.class, nodeName);
               IndexService indexService = indicesService.indexService("test");
               if (indexService != null)
               {
                 MapperService mapperService = indexService.mapperService();
                 DocumentMapper documentMapper = mapperService.documentMapper("child");
                 if (documentMapper != null)
                 {
                   verified = documentMapper.parentFieldMapper().fieldType().fieldDataType().getLoading() == MappedFieldType.Loading.EAGER_GLOBAL_ORDINALS;
                 }
               }
               assertTrue(verified);
             }
           });
Hole 5:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), greaterThan(fielddataSizeDefault));

Edit B:
Hole 1:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), equalTo(0L));
Hole 2:
[]: PutMappingResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("child").setSource(childMapping(FieldMapper.Loading.EAGER_GLOBAL_ORDINALS)).get();
Hole 3:
[]: <SKIP>
Hole 4:
[]: assertBusy(new Runnable()
           {
             @Override
             public void run ()
             {
               ClusterState clusterState = internalCluster().clusterService().state();
               ShardRouting shardRouting = clusterState.routingTable().index("test").shard(0).getShards().get(0);
               String nodeName = clusterState.getNodes().get(shardRouting.currentNodeId()).getName();
               boolean verified = false;
               IndicesService indicesService = internalCluster().getInstance(IndicesService.class, nodeName);
               IndexService indexService = indicesService.indexService("test");
               if (indexService != null)
               {
                 MapperService mapperService = indexService.mapperService();
                 DocumentMapper documentMapper = mapperService.documentMapper("child");
                 if (documentMapper != null)
                 {
                   verified = documentMapper.parentFieldMapper().fieldDataType().getLoading() == FieldMapper.Loading.EAGER_GLOBAL_ORDINALS;
                 }
               }
               assertTrue(verified);
             }
           });
Hole 5:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), greaterThan(0L));

Edit M:
Hole 1:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), equalTo(0L));
Hole 2:
[]: PutMappingResponse putMappingResponse = client().admin().indices().preparePutMapping("test").setType("child").setSource(childMapping(MappedFieldType.Loading.EAGER_GLOBAL_ORDINALS)).get();
Hole 3:
[]: <SKIP>
Hole 4:
[]: assertBusy(new Runnable()
           {
             @Override
             public void run ()
             {
               ClusterState clusterState = internalCluster().clusterService().state();
               ShardRouting shardRouting = clusterState.routingTable().index("test").shard(0).getShards().get(0);
               String nodeName = clusterState.getNodes().get(shardRouting.currentNodeId()).getName();
               boolean verified = false;
               IndicesService indicesService = internalCluster().getInstance(IndicesService.class, nodeName);
               IndexService indexService = indicesService.indexService("test");
               if (indexService != null)
               {
                 MapperService mapperService = indexService.mapperService();
                 DocumentMapper documentMapper = mapperService.documentMapper("child");
                 if (documentMapper != null)
                 {
                   verified = documentMapper.parentFieldMapper().fieldType().fieldDataType().getLoading() == MappedFieldType.Loading.EAGER_GLOBAL_ORDINALS;
                 }
               }
               assertTrue(verified);
             }
           });
Hole 5:
[]: assertThat(response.getIndicesStats().getFieldData().getMemorySizeInBytes(), greaterThan(0L));

