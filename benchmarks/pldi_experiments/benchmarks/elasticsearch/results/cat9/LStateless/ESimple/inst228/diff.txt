Merge Instance for method (Ident "SimpleQueryStringIT",Ident "testSimpleQueryString",[])
@Test
 public void testSimpleQueryString () throws ExecutionException, InterruptedException
{
  createIndex("test");
  indexRandom(true, false, client().prepareIndex("test", "type1", "1").setSource("body", "foo"), client().prepareIndex("test", "type1", "2").setSource("body", "bar"), client().prepareIndex("test", "type1", "3").setSource("body", "foo bar"), client().prepareIndex("test", "type1", "4").setSource("body", "quux baz eggplant"), client().prepareIndex("test", "type1", "5").setSource("body", "quux baz spaghetti"), client().prepareIndex("test", "type1", "6").setSource("otherbody", "spaghetti"));
  SearchResponse searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo bar")).get();
  assertHitCount(searchResponse, 3L);
  assertSearchHits(searchResponse, "1", "2", "3");
  searchResponse = client().prepareSearch().setQuery(boolQuery().should(simpleQueryStringQuery("\"foo bar\"").boost(10.0F)).should(termQuery("body", "eggplant"))).get();
  assertHitCount(searchResponse, 2L);
  assertFirstHit(searchResponse, hasId("3"));
  <?HOLE?>
  assertHitCount(searchResponse, 1L);
  assertFirstHit(searchResponse, hasId("3"));
  searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("\"quux baz\" +(eggplant | spaghetti)")).get();
  assertHitCount(searchResponse, 2L);
  assertSearchHits(searchResponse, "4", "5");
  searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("eggplants").analyzer("snowball")).get();
  assertHitCount(searchResponse, 1L);
  assertFirstHit(searchResponse, hasId("4"));
  searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("spaghetti").field("body", 1000.0F).field("otherbody", 2.0F).queryName("myquery")).get();
  assertHitCount(searchResponse, 2L);
  assertFirstHit(searchResponse, hasId("5"));
  assertSearchHits(searchResponse, "5", "6");
  assertThat(searchResponse.getHits().getAt(0).getMatchedQueries()[0], equalTo("myquery"));
  searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("spaghetti").field("*body")).get();
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  assertHitCount(searchResponse, 2L);
  assertSearchHits(searchResponse, "5", "6");
}
Edit Base:
Hole 1:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo bar").defaultOperator(SimpleQueryStringBuilder.Operator.AND)).get();
Hole 2:
[]: assertHitCount(searchResponse, 2L);
Hole 3:
[]: assertSearchHits(searchResponse, "5", "6");
Hole 4:
[]: searchResponse = client().prepareSearch().setQuery("{\"simple_query_string\": {\"query\": \"spaghetti\", \"field\": \"_all\"}}").get();

Edit A:
Hole 1:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo bar").defaultOperator(Operator.AND)).get();
Hole 2:
[]: assertHitCount(searchResponse, 2L);
Hole 3:
[]: assertSearchHits(searchResponse, "5", "6");
Hole 4:
[]: searchResponse = client().prepareSearch().setQuery("{\"simple_query_string\": {\"query\": \"spaghetti\", \"field\": \"_all\"}}").get();

Edit B:
Hole 1:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo bar").defaultOperator(SimpleQueryStringBuilder.Operator.AND)).get();
Hole 2:
[]: <SKIP>
Hole 3:
[]: <SKIP>
Hole 4:
[]: <SKIP>

Edit M:
Hole 1:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo bar").defaultOperator(Operator.AND)).get();
Hole 2:
[]: <SKIP>
Hole 3:
[]: <SKIP>
Hole 4:
[]: <SKIP>

