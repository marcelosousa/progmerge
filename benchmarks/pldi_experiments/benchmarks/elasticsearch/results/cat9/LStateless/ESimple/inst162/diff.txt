Merge Instance for method (Ident "SimpleQueryStringIT",Ident "testSimpleQueryStringFlags",[])
@Test
 public void testSimpleQueryStringFlags () throws ExecutionException, InterruptedException
{
  createIndex("test");
  indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("body", "foo"), client().prepareIndex("test", "type1", "2").setSource("body", "bar"), client().prepareIndex("test", "type1", "3").setSource("body", "foo bar"), client().prepareIndex("test", "type1", "4").setSource("body", "quux baz eggplant"), client().prepareIndex("test", "type1", "5").setSource("body", "quux baz spaghetti"), client().prepareIndex("test", "type1", "6").setSource("otherbody", "spaghetti"));
  SearchResponse searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo bar").flags(SimpleQueryStringFlag.ALL)).get();
  assertHitCount(searchResponse, 3L);
  assertSearchHits(searchResponse, "1", "2", "3");
  searchResponse = client().prepareSearch().setQuery("{\"simple_query_string\": {\"query\": \"foo bar\", \"flags\": -1}}").get();
  assertHitCount(searchResponse, 3L);
  assertSearchHits(searchResponse, "1", "2", "3");
  <?HOLE?>
  assertHitCount(searchResponse, 3L);
  assertSearchHits(searchResponse, "1", "2", "3");
  <?HOLE?>
  assertHitCount(searchResponse, 1L);
  assertFirstHit(searchResponse, hasId("3"));
  <?HOLE?>
  assertHitCount(searchResponse, 0L);
  <?HOLE?>
  assertHitCount(searchResponse, 1L);
  <?HOLE?>
  assertHitCount(searchResponse, 1L);
  assertFirstHit(searchResponse, hasId("4"));
}
Edit Base:
Hole 1:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo | bar").defaultOperator(SimpleQueryStringBuilder.Operator.AND).flags(SimpleQueryStringFlag.OR)).get();
Hole 2:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo | bar").defaultOperator(SimpleQueryStringBuilder.Operator.AND).flags(SimpleQueryStringFlag.NONE)).get();
Hole 3:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("baz | egg*").defaultOperator(SimpleQueryStringBuilder.Operator.AND).flags(SimpleQueryStringFlag.NONE)).get();
Hole 4:
[]: searchResponse = client().prepareSearch().setSource(("{\n" + "  \"query\": {\n" + "    \"simple_query_string\": {\n" + "      \"query\": \"foo|bar\",\n" + "      \"default_operator\": \"AND\"," + "      \"flags\": \"NONE\"\n" + "    }\n" + "  }\n" + "}")).get();
Hole 5:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("baz | egg*").defaultOperator(SimpleQueryStringBuilder.Operator.AND).flags(SimpleQueryStringFlag.WHITESPACE, SimpleQueryStringFlag.PREFIX)).get();

Edit A:
Hole 1:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo | bar").defaultOperator(Operator.AND).flags(SimpleQueryStringFlag.OR)).get();
Hole 2:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo | bar").defaultOperator(Operator.AND).flags(SimpleQueryStringFlag.NONE)).get();
Hole 3:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("baz | egg*").defaultOperator(Operator.AND).flags(SimpleQueryStringFlag.NONE)).get();
Hole 4:
[]: searchResponse = client().prepareSearch().setSource(("{\n" + "  \"query\": {\n" + "    \"simple_query_string\": {\n" + "      \"query\": \"foo|bar\",\n" + "      \"default_operator\": \"AND\"," + "      \"flags\": \"NONE\"\n" + "    }\n" + "  }\n" + "}")).get();
Hole 5:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("baz | egg*").defaultOperator(Operator.AND).flags(SimpleQueryStringFlag.WHITESPACE, SimpleQueryStringFlag.PREFIX)).get();

Edit B:
Hole 1:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo | bar").defaultOperator(SimpleQueryStringBuilder.Operator.AND).flags(SimpleQueryStringFlag.OR)).get();
Hole 2:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo | bar").defaultOperator(SimpleQueryStringBuilder.Operator.AND).flags(SimpleQueryStringFlag.NONE)).get();
Hole 3:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("baz | egg*").defaultOperator(SimpleQueryStringBuilder.Operator.AND).flags(SimpleQueryStringFlag.NONE)).get();
Hole 4:
[]: searchResponse = client().prepareSearch().setSource(new BytesArray(("{\n" + "  \"query\": {\n" + "    \"simple_query_string\": {\n" + "      \"query\": \"foo|bar\",\n" + "      \"default_operator\": \"AND\"," + "      \"flags\": \"NONE\"\n" + "    }\n" + "  }\n" + "}"))).get();
Hole 5:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("baz | egg*").defaultOperator(SimpleQueryStringBuilder.Operator.AND).flags(SimpleQueryStringFlag.WHITESPACE, SimpleQueryStringFlag.PREFIX)).get();

Edit M:
Hole 1:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo | bar").defaultOperator(Operator.AND).flags(SimpleQueryStringFlag.OR)).get();
Hole 2:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("foo | bar").defaultOperator(Operator.AND).flags(SimpleQueryStringFlag.NONE)).get();
Hole 3:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("baz | egg*").defaultOperator(Operator.AND).flags(SimpleQueryStringFlag.NONE)).get();
Hole 4:
[]: searchResponse = client().prepareSearch().setSource(new BytesArray(("{\n" + "  \"query\": {\n" + "    \"simple_query_string\": {\n" + "      \"query\": \"foo|bar\",\n" + "      \"default_operator\": \"AND\"," + "      \"flags\": \"NONE\"\n" + "    }\n" + "  }\n" + "}"))).get();
Hole 5:
[]: searchResponse = client().prepareSearch().setQuery(simpleQueryStringQuery("baz | egg*").defaultOperator(Operator.AND).flags(SimpleQueryStringFlag.WHITESPACE, SimpleQueryStringFlag.PREFIX)).get();

