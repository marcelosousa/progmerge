Merge Instance for method (Ident "InternalEngineSettingsTest",Ident "testSettingsUpdate",[])
public void testSettingsUpdate ()
{
  final IndexService service = createIndex("foo");
  InternalEngine engine = (InternalEngine) engine(service);
  assertThat(engine.getCurrentIndexWriterConfig().getUseCompoundFile(), is(true));
  <?HOLE?>
  assertThat(engine.getCurrentIndexWriterConfig().getUseCompoundFile(), is(false));
  <?HOLE?>
  assertThat(engine.getCurrentIndexWriterConfig().getUseCompoundFile(), is(true));
  long indexBufferSize = engine.config().getIndexingBufferSize().bytes();
  long versionMapSize = engine.config().getVersionMapSize().bytes();
  assertThat(versionMapSize, equalTo(((long) (indexBufferSize * 0.25))));
  final int iters = between(1, 20);
  for (int i = 0 ; i < iters ; i++)
  {
    boolean compoundOnFlush = randomBoolean();
    <?HOLE?>
    boolean versionMapAsPercent = randomBoolean();
    double versionMapPercent = randomIntBetween(0, 100);
    long versionMapSizeInMB = randomIntBetween(10, 20);
    String versionMapString = versionMapAsPercent ? versionMapPercent + "%" : versionMapSizeInMB + "mb";
    <?HOLE?>
    <?HOLE?>
    client().admin().indices().prepareUpdateSettings("foo").setSettings(build).get();
    LiveIndexWriterConfig currentIndexWriterConfig = engine.getCurrentIndexWriterConfig();
    assertEquals(engine.config().isCompoundOnFlush(), compoundOnFlush);
    assertEquals(currentIndexWriterConfig.getUseCompoundFile(), compoundOnFlush);
    assertEquals(engine.config().getGcDeletesInMillis(), gcDeletes);
    assertEquals(engine.getGcDeletesInMillis(), gcDeletes);
    indexBufferSize = engine.config().getIndexingBufferSize().bytes();
    versionMapSize = engine.config().getVersionMapSize().bytes();
    if (versionMapAsPercent)
    {
      assertThat(versionMapSize, equalTo(((long) (indexBufferSize * versionMapPercent / 100))));
    }
    else
    {
      assertThat(versionMapSize, equalTo((1024 * 1024 * versionMapSizeInMB)));
    }
  }
  <?HOLE?>
  client().admin().indices().prepareUpdateSettings("foo").setSettings(settings).get();
  assertEquals(engine.getGcDeletesInMillis(), 1000);
  assertTrue(engine.config().isEnableGcDeletes());
  <?HOLE?>
  client().admin().indices().prepareUpdateSettings("foo").setSettings(settings).get();
  assertEquals(engine.getGcDeletesInMillis(), 0);
  assertTrue(engine.config().isEnableGcDeletes());
  <?HOLE?>
  client().admin().indices().prepareUpdateSettings("foo").setSettings(settings).get();
  assertEquals(engine.getGcDeletesInMillis(), 1000);
  assertTrue(engine.config().isEnableGcDeletes());
  <?HOLE?>
  try
  {
    client().admin().indices().prepareUpdateSettings("foo").setSettings(settings).get();
    fail("settings update didn't fail, but should have");
  }
  catch (IllegalArgumentException e)
  {
  }
  <?HOLE?>
  try
  {
    client().admin().indices().prepareUpdateSettings("foo").setSettings(settings).get();
    fail("settings update didn't fail, but should have");
  }
  catch (IllegalArgumentException e)
  {
  }
  <?HOLE?>
  try
  {
    client().admin().indices().prepareUpdateSettings("foo").setSettings(settings).get();
    fail("settings update didn't fail, but should have");
  }
  catch (IllegalArgumentException e)
  {
  }
}
Edit Base:
Hole 1:
[]: client().admin().indices().prepareUpdateSettings("foo").setSettings(ImmutableSettings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH, false).build()).get();
Hole 2:
[]: client().admin().indices().prepareUpdateSettings("foo").setSettings(ImmutableSettings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH, true).build()).get();
Hole 3:
[SLoop]: long gcDeletes = Math.max(0, randomLong());
Hole 4:
[SLoop]: Settings build = ImmutableSettings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH, compoundOnFlush).put(EngineConfig.INDEX_GC_DELETES_SETTING, gcDeletes).put(EngineConfig.INDEX_VERSION_MAP_SIZE, versionMapString).build();
Hole 5:
[SLoop]: <SKIP>
Hole 6:
[]: Settings settings = ImmutableSettings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000).build();
Hole 7:
[]: settings = ImmutableSettings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING, "0ms").build();
Hole 8:
[]: settings = ImmutableSettings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000).build();
Hole 9:
[]: settings = ImmutableSettings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE, "sdfasfd").build();
Hole 10:
[]: settings = ImmutableSettings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE, "-12%").build();
Hole 11:
[]: settings = ImmutableSettings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE, "130%").build();

Edit A:
Hole 1:
[]: client().admin().indices().prepareUpdateSettings("foo").setSettings(ImmutableSettings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH, false).build()).get();
Hole 2:
[]: client().admin().indices().prepareUpdateSettings("foo").setSettings(ImmutableSettings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH, true).build()).get();
Hole 3:
[SLoop]: long gcDeletes = random().nextLong() & Long.MAX_VALUE >> 11;
Hole 4:
[SLoop]: Settings build = ImmutableSettings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH, compoundOnFlush).put(EngineConfig.INDEX_GC_DELETES_SETTING, gcDeletes, TimeUnit.MILLISECONDS).put(EngineConfig.INDEX_VERSION_MAP_SIZE, versionMapString).build();
Hole 5:
[SLoop]: assertEquals(gcDeletes, build.getAsTime(EngineConfig.INDEX_GC_DELETES_SETTING, null).millis());
Hole 6:
[]: Settings settings = ImmutableSettings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000, TimeUnit.MILLISECONDS).build();
Hole 7:
[]: settings = ImmutableSettings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING, "0ms").build();
Hole 8:
[]: settings = ImmutableSettings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000, TimeUnit.MILLISECONDS).build();
Hole 9:
[]: settings = ImmutableSettings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE, "sdfasfd").build();
Hole 10:
[]: settings = ImmutableSettings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE, "-12%").build();
Hole 11:
[]: settings = ImmutableSettings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE, "130%").build();

Edit B:
Hole 1:
[]: client().admin().indices().prepareUpdateSettings("foo").setSettings(Settings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH, false).build()).get();
Hole 2:
[]: client().admin().indices().prepareUpdateSettings("foo").setSettings(Settings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH, true).build()).get();
Hole 3:
[SLoop]: long gcDeletes = Math.max(0, randomLong());
Hole 4:
[SLoop]: Settings build = Settings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH, compoundOnFlush).put(EngineConfig.INDEX_GC_DELETES_SETTING, gcDeletes).put(EngineConfig.INDEX_VERSION_MAP_SIZE, versionMapString).build();
Hole 5:
[SLoop]: <SKIP>
Hole 6:
[]: Settings settings = Settings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000).build();
Hole 7:
[]: settings = Settings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING, "0ms").build();
Hole 8:
[]: settings = Settings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000).build();
Hole 9:
[]: settings = Settings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE, "sdfasfd").build();
Hole 10:
[]: settings = Settings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE, "-12%").build();
Hole 11:
[]: settings = Settings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE, "130%").build();

Edit M:
Hole 1:
[]: client().admin().indices().prepareUpdateSettings("foo").setSettings(Settings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH, false).build()).get();
Hole 2:
[]: client().admin().indices().prepareUpdateSettings("foo").setSettings(Settings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH, true).build()).get();
Hole 3:
[SLoop]: long gcDeletes = random().nextLong() & Long.MAX_VALUE >> 11;
Hole 4:
[SLoop]: Settings build = Settings.builder().put(EngineConfig.INDEX_COMPOUND_ON_FLUSH, compoundOnFlush).put(EngineConfig.INDEX_GC_DELETES_SETTING, gcDeletes, TimeUnit.MILLISECONDS).put(EngineConfig.INDEX_VERSION_MAP_SIZE, versionMapString).build();
Hole 5:
[SLoop]: assertEquals(gcDeletes, build.getAsTime(EngineConfig.INDEX_GC_DELETES_SETTING, null).millis());
Hole 6:
[]: Settings settings = Settings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000, TimeUnit.MILLISECONDS).build();
Hole 7:
[]: settings = Settings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING, "0ms").build();
Hole 8:
[]: settings = Settings.builder().put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000, TimeUnit.MILLISECONDS).build();
Hole 9:
[]: settings = Settings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE, "sdfasfd").build();
Hole 10:
[]: settings = Settings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE, "-12%").build();
Hole 11:
[]: settings = Settings.builder().put(EngineConfig.INDEX_VERSION_MAP_SIZE, "130%").build();

