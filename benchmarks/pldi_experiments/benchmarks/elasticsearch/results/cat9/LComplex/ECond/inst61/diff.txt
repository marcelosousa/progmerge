Merge Instance for method (Ident "FloatFieldMapper",Ident "innerParseCreateField",[RefType (ClassRefType (ClassType [(Ident "ParseContext",[])])),RefType (ClassRefType (ClassType [(Ident "List",[ActualType (ClassRefType (ClassType [(Ident "Field",[])]))])]))])
@Override
 protected void innerParseCreateField (ParseContext context, List<Field> fields) throws IOException
{
  float value;
  float boost = fieldType().boost();
  if (context.externalValueSet())
  {
    Object externalValue = context.externalValue();
    if (externalValue == null)
    {
      if (fieldType().nullValue() == null)
      {
        return;
      }
      value = fieldType().nullValue();
    }
    else
      if (externalValue instanceof String)
      {
        String sExternalValue = (String) externalValue;
        if (sExternalValue.length() == 0)
        {
          if (fieldType().nullValue() == null)
          {
            return;
          }
          value = fieldType().nullValue();
        }
        else
        {
          value = Float.parseFloat(sExternalValue);
        }
      }
      else
      {
        value = ((Number) externalValue).floatValue();
      }
    if (context.includeInAll(includeInAll, this))
    {
      context.allEntries().addText(fieldType().name(), Float.toString(value), boost);
    }
  }
  else
  {
    XContentParser parser = context.parser();
    if (parser.currentToken() == XContentParser.Token.VALUE_NULL || (parser.currentToken() == XContentParser.Token.VALUE_STRING && parser.textLength()) == 0)
    {
      if (fieldType().nullValue() == null)
      {
        return;
      }
      value = fieldType().nullValue();
      if (fieldType().nullValueAsString() != null && context.includeInAll(includeInAll, this))
      {
        context.allEntries().addText(fieldType().name(), fieldType().nullValueAsString(), boost);
      }
    }
    else
      if (parser.currentToken() == XContentParser.Token.START_OBJECT && Version.indexCreated(context.indexSettings()).before(Version.V_5_0_0))
      {
        XContentParser.Token token;
        String currentFieldName = null;
        Float objValue = fieldType().nullValue();
        while (token = parser.nextToken() != XContentParser.Token.END_OBJECT)
        {
          if (token == XContentParser.Token.FIELD_NAME)
          {
            currentFieldName = parser.currentName();
          }
          else
          {
            if ("value".equals(currentFieldName) || "_value".equals(currentFieldName))
            {
              if (parser.currentToken() != XContentParser.Token.VALUE_NULL)
              {
                objValue = parser.floatValue(coerce.value());
              }
            }
            else
              if ("boost".equals(currentFieldName) || "_boost".equals(currentFieldName))
              {
                boost = parser.floatValue();
              }
              else
              {
                throw new IllegalArgumentException("unknown property [" + currentFieldName + "]");
              }
          }
        }
        if (objValue == null)
        {
          return;
        }
        value = objValue;
      }
      else
      {
        value = parser.floatValue(coerce.value());
        if (context.includeInAll(includeInAll, this))
        {
          context.allEntries().addText(fieldType().name(), parser.text(), boost);
        }
      }
  }
  if (fieldType().indexOptions() != IndexOptions.NONE || fieldType().stored())
  {
    CustomFloatNumericField field = new CustomFloatNumericField(value, fieldType());
    <?HOLE?>
    fields.add(field);
  }
  if (fieldType().hasDocValues())
  {
    <?HOLE?>
  }
}
Edit Base:
Hole 1:
[SCond]: field.setBoost(boost);
Hole 2:
[SCond]: addDocValue(context, fields, floatToSortableInt(value));

Edit A:
Hole 1:
[SCond]: field.setBoost(boost);
Hole 2:
[SCond]: addDocValue(context, fields, NumericUtils.floatToSortableInt(value));

Edit B:
Hole 1:
[SCond]: if (boost != 1.0F && Version.indexCreated(context.indexSettings()).before(Version.V_5_0_0))
{
  field.setBoost(boost);
}
Hole 2:
[SCond]: addDocValue(context, fields, floatToSortableInt(value));

Edit M:
Hole 1:
[SCond]: if (boost != 1.0F && Version.indexCreated(context.indexSettings()).before(Version.V_5_0_0))
{
  field.setBoost(boost);
}
Hole 2:
[SCond]: addDocValue(context, fields, NumericUtils.floatToSortableInt(value));

