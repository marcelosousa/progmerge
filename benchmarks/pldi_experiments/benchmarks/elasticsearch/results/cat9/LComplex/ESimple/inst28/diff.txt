Merge Instance for method (Ident "PainlessParser",Ident "funcref",[])
public final FuncrefContext funcref () throws RecognitionException
{
  FuncrefContext _localctx = new FuncrefContext(_ctx, getState());
  enterRule(_localctx, 18, RULE_funcref);
  <?HOLE?>
  <?HOLE?>
  return _localctx;
}
Edit Base:
Hole 1:
[]: try
{
  enterOuterAlt(_localctx, 1);
  {
    setState(161);
    match(TYPE);
    setState(162);
    match(REF);
    setState(163);
    match(ID);
  }
}
catch (RecognitionException re)
{
  _localctx.exception = re;
  _errHandler.reportError(this, re);
  _errHandler.recover(this, re);
}
finally {
          exitRule();
        }
Hole 2:
[]: <SKIP>

Edit A:
Hole 1:
[]: int _la;
Hole 2:
[]: try
{
  enterOuterAlt(_localctx, 1);
  {
    setState(161);
    match(TYPE);
    setState(162);
    match(REF);
    setState(163);
    _la = _input.LA(1);
    if (!((_la == NEW || _la) == ID))
    {
      _errHandler.recoverInline(this);
    }
    else
    {
      consume();
    }
  }
}
catch (RecognitionException re)
{
  _localctx.exception = re;
  _errHandler.reportError(this, re);
  _errHandler.recover(this, re);
}
finally {
          exitRule();
        }

Edit B:
Hole 1:
[]: try
{
  enterOuterAlt(_localctx, 1);
  {
    setState(170);
    match(TYPE);
    setState(171);
    match(REF);
    setState(172);
    match(ID);
  }
}
catch (RecognitionException re)
{
  _localctx.exception = re;
  _errHandler.reportError(this, re);
  _errHandler.recover(this, re);
}
finally {
          exitRule();
        }
Hole 2:
[]: <SKIP>

Edit M:
Hole 1:
[]: int _la;
Hole 2:
[]: try
{
  enterOuterAlt(_localctx, 1);
  {
    setState(170);
    match(TYPE);
    setState(171);
    match(REF);
    setState(172);
    _la = _input.LA(1);
    if (!((_la == NEW || _la) == ID))
    {
      _errHandler.recoverInline(this);
    }
    else
    {
      consume();
    }
  }
}
catch (RecognitionException re)
{
  _localctx.exception = re;
  _errHandler.reportError(this, re);
  _errHandler.recover(this, re);
}
finally {
          exitRule();
        }

