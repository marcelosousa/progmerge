Merge Instance for method (Ident "TransportNodesListShardStoreMetaData",Ident "listStoreMetaData",[RefType (ClassRefType (ClassType [(Ident "ShardId",[])]))])
private StoreFilesMetaData listStoreMetaData (ShardId shardId) throws IOException
{
  logger.trace("listing store meta data for {}", shardId);
  <?HOLE?>
  boolean exists = false;
  <?HOLE?>
}
Edit Base:
Hole 1:
[]: long startTime = System.currentTimeMillis();
Hole 2:
[]: try
{
  IndexService indexService = indicesService.indexService(shardId.index().name());
  if (indexService != null)
  {
    IndexShard indexShard = indexService.shard(shardId.id());
    if (indexShard != null)
    {
      final Store store = indexShard.store();
      store.incRef();
      try
      {
        exists = true;
        return new StoreFilesMetaData(true, shardId, store.getMetadataOrEmpty().asMap());
      }
      finally {
                store.decRef();
              }
    }
  }
  IndexMetaData metaData = clusterService.state().metaData().index(shardId.index().name());
  if (metaData == null)
  {
    return new StoreFilesMetaData(false, shardId, ImmutableMap.<String, StoreFileMetaData>of());
  }
  String storeType = metaData.settings().get(IndexStoreModule.STORE_TYPE, "fs");
  if (!storeType.contains("fs"))
  {
    return new StoreFilesMetaData(false, shardId, ImmutableMap.<String, StoreFileMetaData>of());
  }
  final ShardPath shardPath = ShardPath.loadShardPath(logger, nodeEnv, shardId, metaData.settings());
  if (shardPath == null)
  {
    return new StoreFilesMetaData(false, shardId, ImmutableMap.<String, StoreFileMetaData>of());
  }
  return new StoreFilesMetaData(false, shardId, Store.readMetadataSnapshot(shardPath.resolveIndex(), logger).asMap());
}
finally {
          TimeValue took = new TimeValue(System.currentTimeMillis() - startTime);
          if (exists)
          {
            logger.debug("{} loaded store meta data (took [{}])", shardId, took);
          }
          else
          {
            logger.trace("{} didn't find any store meta data to load (took [{}])", shardId, took);
          }
        }

Edit A:
Hole 1:
[]: long startTime = System.currentTimeMillis();
Hole 2:
[]: try
{
  IndexService indexService = indicesService.indexService(shardId.index().name());
  if (indexService != null)
  {
    IndexShard indexShard = indexService.shard(shardId.id());
    if (indexShard != null)
    {
      final Store store = indexShard.store();
      store.incRef();
      try
      {
        exists = true;
        return new StoreFilesMetaData(true, shardId, store.getMetadataOrEmpty());
      }
      finally {
                store.decRef();
              }
    }
  }
  IndexMetaData metaData = clusterService.state().metaData().index(shardId.index().name());
  if (metaData == null)
  {
    return new StoreFilesMetaData(false, shardId, Store.MetadataSnapshot.EMPTY);
  }
  String storeType = metaData.settings().get(IndexStoreModule.STORE_TYPE, "fs");
  if (!storeType.contains("fs"))
  {
    return new StoreFilesMetaData(false, shardId, Store.MetadataSnapshot.EMPTY);
  }
  final ShardPath shardPath = ShardPath.loadShardPath(logger, nodeEnv, shardId, metaData.settings());
  if (shardPath == null)
  {
    return new StoreFilesMetaData(false, shardId, Store.MetadataSnapshot.EMPTY);
  }
  return new StoreFilesMetaData(false, shardId, Store.readMetadataSnapshot(shardPath.resolveIndex(), logger));
}
finally {
          TimeValue took = new TimeValue(System.currentTimeMillis() - startTime);
          if (exists)
          {
            logger.debug("{} loaded store meta data (took [{}])", shardId, took);
          }
          else
          {
            logger.trace("{} didn't find any store meta data to load (took [{}])", shardId, took);
          }
        }

Edit B:
Hole 1:
[]: long startTimeNS = System.nanoTime();
Hole 2:
[]: try
{
  IndexService indexService = indicesService.indexService(shardId.index().name());
  if (indexService != null)
  {
    IndexShard indexShard = indexService.shard(shardId.id());
    if (indexShard != null)
    {
      final Store store = indexShard.store();
      store.incRef();
      try
      {
        exists = true;
        return new StoreFilesMetaData(true, shardId, store.getMetadataOrEmpty().asMap());
      }
      finally {
                store.decRef();
              }
    }
  }
  IndexMetaData metaData = clusterService.state().metaData().index(shardId.index().name());
  if (metaData == null)
  {
    return new StoreFilesMetaData(false, shardId, ImmutableMap.<String, StoreFileMetaData>of());
  }
  String storeType = metaData.settings().get(IndexStoreModule.STORE_TYPE, "fs");
  if (!storeType.contains("fs"))
  {
    return new StoreFilesMetaData(false, shardId, ImmutableMap.<String, StoreFileMetaData>of());
  }
  final ShardPath shardPath = ShardPath.loadShardPath(logger, nodeEnv, shardId, metaData.settings());
  if (shardPath == null)
  {
    return new StoreFilesMetaData(false, shardId, ImmutableMap.<String, StoreFileMetaData>of());
  }
  return new StoreFilesMetaData(false, shardId, Store.readMetadataSnapshot(shardPath.resolveIndex(), logger).asMap());
}
finally {
          TimeValue took = new TimeValue(System.nanoTime() - startTimeNS, TimeUnit.NANOSECONDS);
          if (exists)
          {
            logger.debug("{} loaded store meta data (took [{}])", shardId, took);
          }
          else
          {
            logger.trace("{} didn't find any store meta data to load (took [{}])", shardId, took);
          }
        }

Edit M:
Hole 1:
[]: long startTimeNS = System.nanoTime();
Hole 2:
[]: try
{
  IndexService indexService = indicesService.indexService(shardId.index().name());
  if (indexService != null)
  {
    IndexShard indexShard = indexService.shard(shardId.id());
    if (indexShard != null)
    {
      final Store store = indexShard.store();
      store.incRef();
      try
      {
        exists = true;
        return new StoreFilesMetaData(true, shardId, store.getMetadataOrEmpty());
      }
      finally {
                store.decRef();
              }
    }
  }
  IndexMetaData metaData = clusterService.state().metaData().index(shardId.index().name());
  if (metaData == null)
  {
    return new StoreFilesMetaData(false, shardId, Store.MetadataSnapshot.EMPTY);
  }
  String storeType = metaData.settings().get(IndexStoreModule.STORE_TYPE, "fs");
  if (!storeType.contains("fs"))
  {
    return new StoreFilesMetaData(false, shardId, Store.MetadataSnapshot.EMPTY);
  }
  final ShardPath shardPath = ShardPath.loadShardPath(logger, nodeEnv, shardId, metaData.settings());
  if (shardPath == null)
  {
    return new StoreFilesMetaData(false, shardId, Store.MetadataSnapshot.EMPTY);
  }
  return new StoreFilesMetaData(false, shardId, Store.readMetadataSnapshot(shardPath.resolveIndex(), logger));
}
finally {
          TimeValue took = new TimeValue(System.nanoTime() - startTimeNS, TimeUnit.NANOSECONDS);
          if (exists)
          {
            logger.debug("{} loaded store meta data (took [{}])", shardId, took);
          }
          else
          {
            logger.trace("{} didn't find any store meta data to load (took [{}])", shardId, took);
          }
        }

