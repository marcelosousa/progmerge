Merge Instance for method (Ident "NestedQueryParser",Ident "parse",[RefType (ClassRefType (ClassType [(Ident "QueryParseContext",[])]))])
@Override
 public Query parse (QueryParseContext parseContext) throws IOException, QueryParsingException
{
  XContentParser parser = parseContext.parser();
  final ToBlockJoinQueryBuilder builder = new ToBlockJoinQueryBuilder(parseContext);
  <?HOLE?>
  ScoreMode scoreMode = ScoreMode.Avg;
  String queryName = null;
  String currentFieldName = null;
  XContentParser.Token token;
  while (token = parser.nextToken() != XContentParser.Token.END_OBJECT)
  {
    if (token == XContentParser.Token.FIELD_NAME)
    {
      currentFieldName = parser.currentName();
    }
    else
      if (token == XContentParser.Token.START_OBJECT)
      {
        if ("query".equals(currentFieldName))
        {
          builder.query();
        }
        else
          <?HOLE?>
      }
      else
        if (token.isValue())
        {
          if ("path".equals(currentFieldName))
          {
            builder.setPath(parser.text());
          }
          else
            if ("boost".equals(currentFieldName))
            {
              boost = parser.floatValue();
            }
            else
              if ("score_mode".equals(currentFieldName) || "scoreMode".equals(currentFieldName))
              {
                String sScoreMode = parser.text();
                if ("avg".equals(sScoreMode))
                {
                  scoreMode = ScoreMode.Avg;
                }
                else
                  if ("min".equals(sScoreMode))
                  {
                    scoreMode = ScoreMode.Min;
                  }
                  else
                    if ("max".equals(sScoreMode))
                    {
                      scoreMode = ScoreMode.Max;
                    }
                    else
                      if ("total".equals(sScoreMode) || "sum".equals(sScoreMode))
                      {
                        scoreMode = ScoreMode.Total;
                      }
                      else
                        if ("none".equals(sScoreMode))
                        {
                          scoreMode = ScoreMode.None;
                        }
                        else
                        {
                          throw new QueryParsingException(parseContext, "illegal score_mode for nested query [" + sScoreMode + "]");
                        }
              }
              else
                if ("_name".equals(currentFieldName))
                {
                  queryName = parser.text();
                }
                else
                {
                  throw new QueryParsingException(parseContext, "[nested] query does not support [" + currentFieldName + "]");
                }
        }
  }
  builder.setScoreMode(scoreMode);
  ToParentBlockJoinQuery joinQuery = builder.build();
  if (joinQuery != null)
  {
    joinQuery.setBoost(boost);
    if (queryName != null)
    {
      parseContext.addNamedQuery(queryName, joinQuery);
    }
  }
  return joinQuery;
}
Edit Base:
Hole 1:
[]: float boost = 1.0F;
Hole 2:
[SCond,SCond,SCond,SCond,SLoop]: if (FILTER_FIELD.match(currentFieldName))
{
  builder.filter();
}
else
  if ("inner_hits".equals(currentFieldName))
  {
    builder.setInnerHits(innerHitsQueryParserHelper.parse(parseContext));
  }
  else
  {
    throw new QueryParsingException(parseContext, "[nested] query does not support [" + currentFieldName + "]");
  }

Edit A:
Hole 1:
[]: float boost = AbstractQueryBuilder.DEFAULT_BOOST;
Hole 2:
[SCond,SCond,SCond,SCond,SLoop]: if (FILTER_FIELD.match(currentFieldName))
{
  builder.filter();
}
else
  if ("inner_hits".equals(currentFieldName))
  {
    builder.setInnerHits(innerHitsQueryParserHelper.parse(parseContext));
  }
  else
  {
    throw new QueryParsingException(parseContext, "[nested] query does not support [" + currentFieldName + "]");
  }

Edit B:
Hole 1:
[]: float boost = 1.0F;
Hole 2:
[SCond,SCond,SCond,SCond,SLoop]: if (parseContext.parseFieldMatcher().match(currentFieldName, FILTER_FIELD))
{
  builder.filter();
}
else
  if ("inner_hits".equals(currentFieldName))
  {
    builder.setInnerHits(innerHitsQueryParserHelper.parse(parseContext));
  }
  else
  {
    throw new QueryParsingException(parseContext, "[nested] query does not support [" + currentFieldName + "]");
  }

Edit M:
Hole 1:
[]: float boost = AbstractQueryBuilder.DEFAULT_BOOST;
Hole 2:
[SCond,SCond,SCond,SLoop]: if (parseContext.parseFieldMatcher().match(currentFieldName, FILTER_FIELD))
{
  builder.filter();
}
else
  if ("inner_hits".equals(currentFieldName))
  {
    builder.setInnerHits(innerHitsQueryParserHelper.parse(parseContext));
  }
  else
  {
    throw new QueryParsingException(parseContext, "[nested] query does not support [" + currentFieldName + "]");
  }

