Merge Instance for method (Ident "DiskLruCacheWrapper",Ident "get",[RefType (ClassRefType (ClassType [(Ident "String",[])]))])
@Override
 public InputStream get (String key)
{
  <?HOLE?>
  InputStream result = null;
  <?HOLE?>
  return result;
}
Edit Base:
Hole 1:
[]: <SKIP>
Hole 2:
[]: try
{
  final DiskLruCache.Snapshot snapshot = diskLruCache.get(key);
  if (snapshot != null)
  {
    result = snapshot.getInputStream(0);
  }
}
catch (IOException e)
{
  e.printStackTrace();
}

Edit A:
Hole 1:
[]: String safeKey = safeKeyGenerator.getSafeKey(key);
Hole 2:
[]: try
{
  final DiskLruCache.Snapshot snapshot = diskLruCache.get(safeKey);
  if (snapshot != null)
  {
    result = snapshot.getInputStream(0);
  }
}
catch (IOException e)
{
  e.printStackTrace();
}

Edit B:
Hole 1:
[]: <SKIP>
Hole 2:
[]: try
{
  final DiskLruCache.Snapshot snapshot = getDiskCache().get(key);
  if (snapshot != null)
  {
    result = snapshot.getInputStream(0);
  }
}
catch (IOException e)
{
  if (Log.isLoggable(TAG, Log.WARN))
  {
    Log.w(TAG, "Unable to get from disk cache", e);
  }
}

Edit M:
Hole 1:
[]: String safeKey = safeKeyGenerator.getSafeKey(key);
Hole 2:
[]: try
{
  final DiskLruCache.Snapshot snapshot = getDiskCache().get(safeKey);
  if (snapshot != null)
  {
    result = snapshot.getInputStream(0);
  }
}
catch (IOException e)
{
  if (Log.isLoggable(TAG, Log.WARN))
  {
    Log.w(TAG, "Unable to get from disk cache", e);
  }
}

