Merge Instance for method (Ident "PieRadarChartBase",Ident "calculateOffsets",[])
@Override
 protected void calculateOffsets ()
{
  float legendLeft = 0.0F, legendRight = 0.0F, legendBottom = 0.0F, legendTop = 0.0F;
  if (mLegend != null && mLegend.isEnabled())
  {
    <?HOLE?>
    <?HOLE?>
    legendLeft += getRequiredBaseOffset();
    legendRight += getRequiredBaseOffset();
    legendTop += getRequiredBaseOffset();
  }
  float min = Utils.convertDpToPixel(10.0F);
  if (this instanceof RadarChart)
  {
    XAxis x = ((RadarChart) this).getXAxis();
    if (x.isEnabled())
    {
      min = Math.max(Utils.convertDpToPixel(10.0F), x.mLabelWidth);
    }
  }
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  <?HOLE?>
  float offsetLeft = Math.max(min, legendLeft);
  float offsetTop = Math.max(min, legendTop);
  float offsetRight = Math.max(min, legendRight);
  float offsetBottom = Math.max(min, Math.max(getRequiredBaseOffset(), legendBottom));
  mViewPortHandler.restrainViewPort(offsetLeft, offsetTop, offsetRight, offsetBottom);
  if (mLogEnabled)
    Log.i(LOG_TAG, ("offsetLeft: " + offsetLeft + ", offsetTop: " + offsetTop + ", offsetRight: " + offsetRight + ", offsetBottom: " + offsetBottom));
}
Edit Base:
Hole 1:
[SCond]: if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART_CENTER)
{
  float spacing = Utils.convertDpToPixel(13.0F);
  legendRight = getFullLegendWidth() + spacing;
}
else
  if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART)
  {
    float spacing = Utils.convertDpToPixel(8.0F);
    float legendWidth = getFullLegendWidth() + spacing;
    float legendHeight = mLegend.mNeededHeight + mLegend.mTextHeightMax;
    PointF c = getCenter();
    PointF bottomRight = new PointF(getWidth() - legendWidth + 15, legendHeight + 15);
    float distLegend = distanceToCenter(bottomRight.x, bottomRight.y);
    PointF reference = getPosition(c, getRadius(), getAngleForPoint(bottomRight.x, bottomRight.y));
    float distReference = distanceToCenter(reference.x, reference.y);
    float min = Utils.convertDpToPixel(5.0F);
    if (distLegend < distReference)
    {
      float diff = distReference - distLegend;
      legendRight = min + diff;
    }
    if ((bottomRight.y >= c.y && getHeight()) - legendWidth > getWidth())
    {
      legendRight = legendWidth;
    }
  }
  else
    if (mLegend.getPosition() == LegendPosition.LEFT_OF_CHART_CENTER)
    {
      float spacing = Utils.convertDpToPixel(13.0F);
      legendLeft = getFullLegendWidth() + spacing;
    }
    else
      if (mLegend.getPosition() == LegendPosition.LEFT_OF_CHART)
      {
        float spacing = Utils.convertDpToPixel(8.0F);
        float legendWidth = getFullLegendWidth() + spacing;
        float legendHeight = mLegend.mNeededHeight + mLegend.mTextHeightMax;
        PointF c = getCenter();
        PointF bottomLeft = new PointF(legendWidth - 15, legendHeight + 15);
        float distLegend = distanceToCenter(bottomLeft.x, bottomLeft.y);
        PointF reference = getPosition(c, getRadius(), getAngleForPoint(bottomLeft.x, bottomLeft.y));
        float distReference = distanceToCenter(reference.x, reference.y);
        float min = Utils.convertDpToPixel(5.0F);
        if (distLegend < distReference)
        {
          float diff = distReference - distLegend;
          legendLeft = min + diff;
        }
        if ((bottomLeft.y >= c.y && getHeight()) - legendWidth > getWidth())
        {
          legendLeft = legendWidth;
        }
      }
      else
        if (((mLegend.getPosition() == LegendPosition.BELOW_CHART_LEFT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_RIGHT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_CENTER)
        {
          legendBottom = getRequiredBottomOffset();
        }
Hole 2:
[SCond]: <SKIP>
Hole 3:
[]: <SKIP>
Hole 4:
[]: <SKIP>
Hole 5:
[]: <SKIP>
Hole 6:
[]: <SKIP>

Edit A:
Hole 1:
[SCond]: float fullLegendWidth = Math.min(mLegend.mNeededWidth, (mViewPortHandler.getChartWidth() * mLegend.getMaxSizePercent())) + mLegend.getFormSize() + mLegend.getFormToTextSpace();
Hole 2:
[SCond]: if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART_CENTER)
{
  float spacing = Utils.convertDpToPixel(13.0F);
  legendRight = fullLegendWidth + spacing;
}
else
  if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART)
  {
    float spacing = Utils.convertDpToPixel(8.0F);
    float legendWidth = fullLegendWidth + spacing;
    float legendHeight = mLegend.mNeededHeight + mLegend.mTextHeightMax;
    PointF c = getCenter();
    PointF bottomRight = new PointF(getWidth() - legendWidth + 15, legendHeight + 15);
    float distLegend = distanceToCenter(bottomRight.x, bottomRight.y);
    PointF reference = getPosition(c, getRadius(), getAngleForPoint(bottomRight.x, bottomRight.y));
    float distReference = distanceToCenter(reference.x, reference.y);
    float min = Utils.convertDpToPixel(5.0F);
    if (distLegend < distReference)
    {
      float diff = distReference - distLegend;
      legendRight = min + diff;
    }
    if ((bottomRight.y >= c.y && getHeight()) - legendWidth > getWidth())
    {
      legendRight = legendWidth;
    }
  }
  else
    if (mLegend.getPosition() == LegendPosition.LEFT_OF_CHART_CENTER)
    {
      float spacing = Utils.convertDpToPixel(13.0F);
      legendLeft = fullLegendWidth + spacing;
    }
    else
      if (mLegend.getPosition() == LegendPosition.LEFT_OF_CHART)
      {
        float spacing = Utils.convertDpToPixel(8.0F);
        float legendWidth = fullLegendWidth + spacing;
        float legendHeight = mLegend.mNeededHeight + mLegend.mTextHeightMax;
        PointF c = getCenter();
        PointF bottomLeft = new PointF(legendWidth - 15, legendHeight + 15);
        float distLegend = distanceToCenter(bottomLeft.x, bottomLeft.y);
        PointF reference = getPosition(c, getRadius(), getAngleForPoint(bottomLeft.x, bottomLeft.y));
        float distReference = distanceToCenter(reference.x, reference.y);
        float min = Utils.convertDpToPixel(5.0F);
        if (distLegend < distReference)
        {
          float diff = distReference - distLegend;
          legendLeft = min + diff;
        }
        if ((bottomLeft.y >= c.y && getHeight()) - legendWidth > getWidth())
        {
          legendLeft = legendWidth;
        }
      }
      else
        if (((mLegend.getPosition() == LegendPosition.BELOW_CHART_LEFT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_RIGHT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_CENTER)
        {
          float yOffset = getRequiredBottomOffset();
          legendBottom = Math.min((mLegend.mNeededHeight + yOffset), (mViewPortHandler.getChartHeight() * mLegend.getMaxSizePercent()));
        }
Hole 3:
[]: <SKIP>
Hole 4:
[]: <SKIP>
Hole 5:
[]: <SKIP>
Hole 6:
[]: <SKIP>

Edit B:
Hole 1:
[SCond]: if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART_CENTER)
{
  float spacing = Utils.convertDpToPixel(13.0F);
  legendRight = getFullLegendWidth() + spacing;
}
else
  if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART)
  {
    float spacing = Utils.convertDpToPixel(8.0F);
    float legendWidth = getFullLegendWidth() + spacing;
    float legendHeight = mLegend.mNeededHeight + mLegend.mTextHeightMax;
    PointF c = getCenter();
    PointF bottomRight = new PointF(getWidth() - legendWidth + 15, legendHeight + 15);
    float distLegend = distanceToCenter(bottomRight.x, bottomRight.y);
    PointF reference = getPosition(c, getRadius(), getAngleForPoint(bottomRight.x, bottomRight.y));
    float distReference = distanceToCenter(reference.x, reference.y);
    float min = Utils.convertDpToPixel(5.0F);
    if (distLegend < distReference)
    {
      float diff = distReference - distLegend;
      legendRight = min + diff;
    }
    if ((bottomRight.y >= c.y && getHeight()) - legendWidth > getWidth())
    {
      legendRight = legendWidth;
    }
  }
  else
    if (mLegend.getPosition() == LegendPosition.LEFT_OF_CHART_CENTER)
    {
      float spacing = Utils.convertDpToPixel(13.0F);
      legendLeft = getFullLegendWidth() + spacing;
    }
    else
      if (mLegend.getPosition() == LegendPosition.LEFT_OF_CHART)
      {
        float spacing = Utils.convertDpToPixel(8.0F);
        float legendWidth = getFullLegendWidth() + spacing;
        float legendHeight = mLegend.mNeededHeight + mLegend.mTextHeightMax;
        PointF c = getCenter();
        PointF bottomLeft = new PointF(legendWidth - 15, legendHeight + 15);
        float distLegend = distanceToCenter(bottomLeft.x, bottomLeft.y);
        PointF reference = getPosition(c, getRadius(), getAngleForPoint(bottomLeft.x, bottomLeft.y));
        float distReference = distanceToCenter(reference.x, reference.y);
        float min = Utils.convertDpToPixel(5.0F);
        if (distLegend < distReference)
        {
          float diff = distReference - distLegend;
          legendLeft = min + diff;
        }
        if ((bottomLeft.y >= c.y && getHeight()) - legendWidth > getWidth())
        {
          legendLeft = legendWidth;
        }
      }
      else
        if (((mLegend.getPosition() == LegendPosition.BELOW_CHART_LEFT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_RIGHT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_CENTER)
        {
          legendBottom = getRequiredBottomOffset();
        }
Hole 2:
[SCond]: <SKIP>
Hole 3:
[]: legendTop += getExtraTopOffset();
Hole 4:
[]: legendRight += getExtraRightOffset();
Hole 5:
[]: legendBottom += getExtraBottomOffset();
Hole 6:
[]: legendLeft += getExtraLeftOffset();

Edit M:
Hole 1:
[SCond]: float fullLegendWidth = Math.min(mLegend.mNeededWidth, (mViewPortHandler.getChartWidth() * mLegend.getMaxSizePercent())) + mLegend.getFormSize() + mLegend.getFormToTextSpace();
Hole 2:
[SCond]: if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART_CENTER)
{
  float spacing = Utils.convertDpToPixel(13.0F);
  legendRight = fullLegendWidth + spacing;
}
else
  if (mLegend.getPosition() == LegendPosition.RIGHT_OF_CHART)
  {
    float spacing = Utils.convertDpToPixel(8.0F);
    float legendWidth = fullLegendWidth + spacing;
    float legendHeight = mLegend.mNeededHeight + mLegend.mTextHeightMax;
    PointF c = getCenter();
    PointF bottomRight = new PointF(getWidth() - legendWidth + 15, legendHeight + 15);
    float distLegend = distanceToCenter(bottomRight.x, bottomRight.y);
    PointF reference = getPosition(c, getRadius(), getAngleForPoint(bottomRight.x, bottomRight.y));
    float distReference = distanceToCenter(reference.x, reference.y);
    float min = Utils.convertDpToPixel(5.0F);
    if (distLegend < distReference)
    {
      float diff = distReference - distLegend;
      legendRight = min + diff;
    }
    if ((bottomRight.y >= c.y && getHeight()) - legendWidth > getWidth())
    {
      legendRight = legendWidth;
    }
  }
  else
    if (mLegend.getPosition() == LegendPosition.LEFT_OF_CHART_CENTER)
    {
      float spacing = Utils.convertDpToPixel(13.0F);
      legendLeft = fullLegendWidth + spacing;
    }
    else
      if (mLegend.getPosition() == LegendPosition.LEFT_OF_CHART)
      {
        float spacing = Utils.convertDpToPixel(8.0F);
        float legendWidth = fullLegendWidth + spacing;
        float legendHeight = mLegend.mNeededHeight + mLegend.mTextHeightMax;
        PointF c = getCenter();
        PointF bottomLeft = new PointF(legendWidth - 15, legendHeight + 15);
        float distLegend = distanceToCenter(bottomLeft.x, bottomLeft.y);
        PointF reference = getPosition(c, getRadius(), getAngleForPoint(bottomLeft.x, bottomLeft.y));
        float distReference = distanceToCenter(reference.x, reference.y);
        float min = Utils.convertDpToPixel(5.0F);
        if (distLegend < distReference)
        {
          float diff = distReference - distLegend;
          legendLeft = min + diff;
        }
        if ((bottomLeft.y >= c.y && getHeight()) - legendWidth > getWidth())
        {
          legendLeft = legendWidth;
        }
      }
      else
        if (((mLegend.getPosition() == LegendPosition.BELOW_CHART_LEFT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_RIGHT || mLegend.getPosition()) == LegendPosition.BELOW_CHART_CENTER)
        {
          float yOffset = getRequiredBottomOffset();
          legendBottom = Math.min((mLegend.mNeededHeight + yOffset), (mViewPortHandler.getChartHeight() * mLegend.getMaxSizePercent()));
        }
Hole 3:
[]: legendTop += getExtraTopOffset();
Hole 4:
[]: legendRight += getExtraRightOffset();
Hole 5:
[]: legendBottom += getExtraBottomOffset();
Hole 6:
[]: legendLeft += getExtraLeftOffset();

