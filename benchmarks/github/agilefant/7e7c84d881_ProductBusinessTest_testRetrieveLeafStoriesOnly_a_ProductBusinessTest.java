{
  Product product = new Product();
  product.setId(1);
  Project project = new Project();
  project.setId(2);
  product.getChildren().add(project);
  Iteration iteration = new Iteration();
  iteration.setId(3);
  iteration.setParent(project);
  project.getChildren().add(iteration);
  Story productStory = new Story();
  productStory.setBacklog(product);
  productStory.setId(1);
  productStory.setName("ppp");
  Story projectStory = new Story();
  projectStory.setBacklog(project);
  projectStory.setId(2);
  projectStory.setName("sss");
  Story iterationStory = new Story();
  iterationStory.setId(3);
  iterationStory.setIteration(iteration);
  iterationStory.setBacklog(project);
  iterationStory.setName("xxx");
  Story iterationStory2 = new Story();
  iterationStory2.setId(4);
  iterationStory2.setIteration(iteration);
  iterationStory2.setBacklog(project);
  iterationStory2.setState(StoryState.DONE);
  iterationStory2.setName("bbb");
  product.setStories(new HashSet<Story>(Arrays.asList(productStory, projectStory, iterationStory)));
  project.setStories(new HashSet<Story>(Arrays.asList(productStory, projectStory, iterationStory)));
  iteration.setStories(new HashSet<Story>(Arrays.asList(productStory, projectStory, iterationStory, iterationStory2)));
  expect(productDAO.retrieveLeafStories(product)).andReturn(Arrays.asList(productStory, projectStory, iterationStory, iterationStory2));
  expect(transferObjectBusiness.getBacklogScheduleStatus(project)).andReturn(ScheduleStatus.FUTURE);
  expect(transferObjectBusiness.getBacklogScheduleStatus(iteration)).andReturn(ScheduleStatus.PAST);
  replayAll();
  ProductTO actual = this.productBusiness.retrieveLeafStoriesOnly(product);
  verifyAll();
  assertEquals(1, actual.getChildProjects().size());
  assertEquals(1, actual.getLeafStories().size());
  assertEquals(1, actual.getLeafStories().get(0).getId());
  ProjectTO actualProject = actual.getChildProjects().get(0);
  assertEquals(1, actualProject.getChildIterations().size());
  assertEquals(1, actualProject.getLeafStories().size());
  assertEquals(2, actualProject.getLeafStories().get(0).getId());
  IterationTO actualIteration = actualProject.getChildIterations().get(0);
  assertEquals(0, actualIteration.getChildren().size());
  assertEquals(2, actualIteration.getLeafStories().size());
  assertEquals(3, actualIteration.getLeafStories().get(0).getId());
  assertEquals(4, actualIteration.getLeafStories().get(1).getId());
}