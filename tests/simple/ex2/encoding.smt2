(set-logic HORN)
(declare-fun Q_n0 (Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun Q_exit (Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun Q_n0_a (Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun Q_n1 (Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun Q_n1_b (Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int) Bool)
(assert (forall ((io Int) (ia Int) (ib Int) (im Int) (jo Int) (ja Int) (jb Int) (jm Int) (xo Int) (xa Int) (xb Int) (xm Int) (yo Int) (ya Int) (yb Int) (ym Int)) (=> (and (= io ia) (= ia ib) (= ib im) (= jo ja) (= ja jb) (= jb jm) (= xo xa) (= xa xb) (= xb xm) (= yo ya) (= ya yb) (= yb ym)) (Q_n0 io ia ib im jo ja jb jm xo xa xb xm yo ya yb ym))))
(assert (forall ((io Int) (ia Int) (ib Int) (im Int) (jo Int) (ja Int) (jb Int) (jm Int) (xo Int) (xa Int) (xb Int) (xm Int) (yo Int) (ya Int) (yb Int) (ym Int)) (=> (Q_n0 io ia ib im jo ja jb jm xo xa xb xm yo ya yb ym) (Q_n0_a io ia ib im jo ja jb jm xo xa xb xm yo ya yb ym))))
(assert (forall ((io Int) (ia Int) (ib Int) (im Int) (jo Int) (ja Int) (jb Int) (jm Int) (xo Int) (xa Int) (xb Int) (xm Int) (yo Int) (ya Int) (yb Int) (ym Int) (io1 Int) (ib1 Int) (xa1 Int) (xm1 Int)) (=> (and (= xm1 0) (= ib1 1) (= xa1 0) (= io1 1) (Q_n0_a io ia ib im jo ja jb jm xo xa xb xm yo ya yb ym)) (Q_n1 io1 ia ib1 im jo ja jb jm xo xa1 xb xm1 yo ya yb ym))))
(assert (forall ((io Int) (ia Int) (ib Int) (im Int) (jo Int) (ja Int) (jb Int) (jm Int) (xo Int) (xa Int) (xb Int) (xm Int) (yo Int) (ya Int) (yb Int) (ym Int)) (=> (Q_n1 io ia ib im jo ja jb jm xo xa xb xm yo ya yb ym) (Q_n1_b io ia ib im jo ja jb jm xo xa xb xm yo ya yb ym))))
(assert (forall ((io Int) (ia Int) (ib Int) (im Int) (jo Int) (ja Int) (jb Int) (jm Int) (xo Int) (xa Int) (xb Int) (xm Int) (yo Int) (ya Int) (yb Int) (ym Int) (jo1 Int) (ja1 Int) (yb1 Int) (ym1 Int)) (=> (and (= ym1 1) (= yb1 1) (= ja1 2) (= jo1 2) (Q_n1_b io ia ib im jo ja jb jm xo xa xb xm yo ya yb ym)) (Q_exit io ia ib im jo1 ja1 jb jm xo xa xb xm yo ya yb1 ym1))))
(assert (forall ((io Int) (ia Int) (ib Int) (im Int) (jo Int) (ja Int) (jb Int) (jm Int) (xo Int) (xa Int) (xb Int) (xm Int) (yo Int) (ya Int) (yb Int) (ym Int)) (=> (Q_exit io ia ib im jo ja jb jm xo xa xb xm yo ya yb ym) (and (and (or (= io ia) (= im ia)) (or (= io ib) (= im ib)) (or (not (= io ia)) (not (= io ib)) (= im io))) (and (or (= jo ja) (= jm ja)) (or (= jo jb) (= jm jb)) (or (not (= jo ja)) (not (= jo jb)) (= jm jo))) (and (or (= xo xa) (= xm xa)) (or (= xo xb) (= xm xb)) (or (not (= xo xa)) (not (= xo xb)) (= xm xo))) (and (or (= yo ya) (= ym ya)) (or (= yo yb) (= ym yb)) (or (not (= yo ya)) (not (= yo yb)) (= ym yo)))))))
(check-sat)
